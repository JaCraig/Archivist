{
  "api/Archivist.BaseClasses.FileBaseClass-1.html": {
    "href": "api/Archivist.BaseClasses.FileBaseClass-1.html",
    "title": "Class FileBaseClass<TFileType> | Archivist API Reference",
    "keywords": "Class FileBaseClass<TFileType> Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for file types in the Archivist library. public abstract class FileBaseClass<TFileType> : IGenericFile where TFileType : FileBaseClass<TFileType> Type Parameters TFileType The specific file type derived from this base class. Inheritance object FileBaseClass<TFileType> Implements IGenericFile Derived Card FixedLengthFile StructuredObject Table Tables Text Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Metadata Gets or sets the metadata associated with the file. public Dictionary<string, string> Metadata { get; } Property Value Dictionary<string, string> Title Gets or sets the title of the file. public string? Title { get; set; } Property Value string Methods CompareTo(object?) Compares the file object to another object. public int CompareTo(object? obj) Parameters obj object The object to compare to. Returns int 0 if the objects are equal, -1 if this is smaller, 1 if it is larger. CompareTo(TFileType?) Compares the file object to another file object. public abstract int CompareTo(TFileType? other) Parameters other TFileType The file object to compare to. Returns int 0 if the file objects are equal, -1 if this is smaller, 1 if it is larger. Equals(object?) Determines if the file object is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare to. Returns bool True if the file objects are equal, false otherwise. Equals(TFileType?) Determines if the file object is equal to another file object. public abstract bool Equals(TFileType? other) Parameters other TFileType The file object to compare to. Returns bool True if the file objects are equal, false otherwise. GetContent() Gets the content of the file. public abstract string? GetContent() Returns string The content of the file. GetHashCode() Gets the hash code for the file object. public override int GetHashCode() Returns int The hash code for the file object. ToFileType<TFile>() Converts the file object to a specific file type. public virtual TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The converted file object. Type Parameters TFile The file type to convert to. ToString() Converts the file object to a string. public override string ToString() Returns string The content of the file object. Operators operator ==(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the two file objects are equal. public static bool operator ==(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the file objects are equal, false otherwise. operator >(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is greater than the second file object. public static bool operator >(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is greater than the second file object, false otherwise. operator >=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is greater than or equal to the second file object. public static bool operator >=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is greater than or equal to the second file object, false otherwise. operator !=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the two file objects are not equal. public static bool operator !=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the file objects are not equal, false otherwise. operator <(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is less than the second file object. public static bool operator <(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is less than the second file object, false otherwise. operator <=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is less than or equal to the second file object. public static bool operator <=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is less than or equal to the second file object, false otherwise."
  },
  "api/Archivist.BaseClasses.FixedLengthFormatBaseClass-2.html": {
    "href": "api/Archivist.BaseClasses.FixedLengthFormatBaseClass-2.html",
    "title": "Class FixedLengthFormatBaseClass<TFormat, TFileReader> | Archivist API Reference",
    "keywords": "Class FixedLengthFormatBaseClass<TFormat, TFileReader> Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for fixed-length format classes. public abstract class FixedLengthFormatBaseClass<TFormat, TFileReader> : FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>, IFormat where TFormat : FixedLengthFormatBaseClass<TFormat, TFileReader> where TFileReader : IFormatReader Type Parameters TFormat The type of the derived fixed-length format class. TFileReader The type of the file reader. Inheritance object FormatBaseClass<TFormat, TFileReader, FixedLengthWriter> FixedLengthFormatBaseClass<TFormat, TFileReader> Implements IFormat Inherited Members FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.DisplayName FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.Extensions FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.HeaderInfo FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.MimeTypes FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.Order FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.Reader FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.Writer FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.CanRead(string) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.CanRead(Stream) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.CanWrite(string) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.CanWrite(IGenericFile) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.ReadAsync(Stream) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FixedLengthFormatBaseClass(TFileReader) Initializes a new instance of the FixedLengthFormatBaseClass<TFormat, TFileReader> class. protected FixedLengthFormatBaseClass(TFileReader reader) Parameters reader TFileReader The file reader."
  },
  "api/Archivist.BaseClasses.FormatBaseClass-3.html": {
    "href": "api/Archivist.BaseClasses.FormatBaseClass-3.html",
    "title": "Class FormatBaseClass<TFormat, TFileReader, TFileWriter> | Archivist API Reference",
    "keywords": "Class FormatBaseClass<TFormat, TFileReader, TFileWriter> Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for file formats. public abstract class FormatBaseClass<TFormat, TFileReader, TFileWriter> : IFormat where TFormat : FormatBaseClass<TFormat, TFileReader, TFileWriter> where TFileReader : IFormatReader where TFileWriter : IFormatWriter Type Parameters TFormat The derived format class. TFileReader The file reader class. TFileWriter The file writer class. Inheritance object FormatBaseClass<TFormat, TFileReader, TFileWriter> Implements IFormat Derived FixedLengthFormatBaseClass<TFormat, TFileReader> DelimitedFormat ExcelFormat JsonFormat TextFormat VCardFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FormatBaseClass(TFileReader, TFileWriter) Initializes a new instance of the FormatBaseClass<TFormat, TFileReader, TFileWriter> class. protected FormatBaseClass(TFileReader reader, TFileWriter writer) Parameters reader TFileReader The file reader instance. writer TFileWriter The file writer instance. Properties DisplayName Gets the display name of the format. public virtual string DisplayName { get; } Property Value string Extensions Gets the file extensions associated with the format. public abstract string[] Extensions { get; } Property Value string[] HeaderInfo Gets the header information of the format. public byte[] HeaderInfo { get; } Property Value byte[] MimeTypes Gets the content types supported by the format. public abstract string[] MimeTypes { get; } Property Value string[] Order Gets the order that the file format should be checked. The lower the value, the higher the priority. Note that the order is only relevant when multiple file formats have the same HeaderInfo length. The system uses HeaderInfo to determine the order to check first, with longer headers checked first. public virtual int Order { get; } Property Value int Reader Gets the file reader instance. protected TFileReader Reader { get; } Property Value TFileReader Writer Gets the file writer instance. protected TFileWriter Writer { get; } Property Value TFileWriter Methods CanRead(Stream?) Determines whether the format can read the specified stream. public bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the format can read the stream; otherwise, false. CanRead(string?) Determines whether the format can read the specified file. public bool CanRead(string? fileName) Parameters fileName string The name of the file. Returns bool true if the format can read the file; otherwise, false. CanWrite(IGenericFile?) Determines whether the format can write the specified file. public bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to write. Returns bool true if the format can write the file; otherwise, false. CanWrite(string?) Determines whether the format can write the specified file. public bool CanWrite(string? fileName) Parameters fileName string The name of the file. Returns bool true if the format can write the file; otherwise, false. ReadAsync(Stream?) Reads the file asynchronously from the specified stream. public Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous read operation. The task result contains the generic file. WriteAsync(Stream?, IGenericFile?) Writes the file asynchronously to the specified stream. public Task<bool> WriteAsync(Stream? writer, IGenericFile? file) Parameters writer Stream The stream to write. file IGenericFile The file to write. Returns Task<bool> A task that represents the asynchronous write operation. The task result contains a value indicating whether the write operation was successful. See Also IFormat"
  },
  "api/Archivist.BaseClasses.ReaderBaseClass.html": {
    "href": "api/Archivist.BaseClasses.ReaderBaseClass.html",
    "title": "Class ReaderBaseClass | Archivist API Reference",
    "keywords": "Class ReaderBaseClass Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for format readers. public abstract class ReaderBaseClass : IFormatReader Inheritance object ReaderBaseClass Implements IFormatReader Derived DelimitedReader ExcelReader JsonReader TextReader VCardReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderInfo Gets the header information for the format. public abstract byte[] HeaderInfo { get; } Property Value byte[] Methods CanRead(Stream?) Determines whether the reader can read the specified stream. public bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the stream; otherwise, false. InternalCanRead(Stream?) Used to determine if a reader can actually read the file. public virtual bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the file; otherwise, false. ReadAsync(Stream?) Reads the file asynchronously. public abstract Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task representing the asynchronous operation that returns the generic file. See Also IFormatReader"
  },
  "api/Archivist.BaseClasses.WriterBaseClass.html": {
    "href": "api/Archivist.BaseClasses.WriterBaseClass.html",
    "title": "Class WriterBaseClass | Archivist API Reference",
    "keywords": "Class WriterBaseClass Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for format writers. public abstract class WriterBaseClass : IFormatWriter Inheritance object WriterBaseClass Implements IFormatWriter Derived DelimitedWriter ExcelWriter FixedLengthWriter JsonWriter TextWriter VCardWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanWrite(IGenericFile?) Determines if the writer can write the specified file. public virtual bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to be written. Returns bool true if the writer can write the file; otherwise, false. WriteAsync(IGenericFile?, Stream?) Writes the specified file to the provided stream asynchronously. public abstract Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file to. Returns Task<bool> A task representing the asynchronous write operation. The task result is true if the write operation is successful; otherwise, false."
  },
  "api/Archivist.BaseClasses.html": {
    "href": "api/Archivist.BaseClasses.html",
    "title": "Namespace Archivist.BaseClasses | Archivist API Reference",
    "keywords": "Namespace Archivist.BaseClasses Classes FileBaseClass<TFileType> Base class for file types in the Archivist library. FixedLengthFormatBaseClass<TFormat, TFileReader> Base class for fixed-length format classes. FormatBaseClass<TFormat, TFileReader, TFileWriter> Base class for file formats. ReaderBaseClass Base class for format readers. WriterBaseClass Base class for format writers."
  },
  "api/Archivist.DataTypes.Card.html": {
    "href": "api/Archivist.DataTypes.Card.html",
    "title": "Class Card | Archivist API Reference",
    "keywords": "Class Card Namespace Archivist.DataTypes Assembly Archivist.dll Represents a card (vCard, etc.) file. public class Card : FileBaseClass<Card>, IGenericFile, IComparable<Card>, IEquatable<Card>, IEnumerable<CardField?>, IEnumerable, IObjectConvertable Inheritance object FileBaseClass<Card> Card Implements IGenericFile IComparable<Card> IEquatable<Card> IEnumerable<CardField> IEnumerable IObjectConvertable Inherited Members FileBaseClass<Card>.Metadata FileBaseClass<Card>.Title FileBaseClass<Card>.CompareTo(object) FileBaseClass<Card>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Addresses Gets the addresses for the card. public IEnumerable<CardField?> Addresses { get; } Property Value IEnumerable<CardField> Anniversaries Gets the anniversaries for the card. public IEnumerable<CardField?> Anniversaries { get; } Property Value IEnumerable<CardField> Birthdays Gets the birthdays for the card. public IEnumerable<CardField?> Birthdays { get; } Property Value IEnumerable<CardField> Count Gets the number of fields in the card. public int Count { get; } Property Value int Emails Gets the emails for the card. public IEnumerable<CardField?> Emails { get; } Property Value IEnumerable<CardField> Fields Gets or sets the fields of the card. public List<CardField?> Fields { get; } Property Value List<CardField> FirstName Gets the first name from the card. public string FirstName { get; set; } Property Value string FullName Gets the full name for the card. public CardField? FullName { get; } Property Value CardField InstantMessengers Gets the IM entries from the card. public IEnumerable<CardField?> InstantMessengers { get; } Property Value IEnumerable<CardField> this[int] Gets or sets the field at the specified index. public CardField? this[int index] { get; set; } Parameters index int The index of the field. Property Value CardField The field at the specified index. this[string] Gets the fields with the specified property name. public IEnumerable<CardField?> this[string property] { get; } Parameters property string The property name of the fields. Property Value IEnumerable<CardField> The fields with the specified property name. this[string, string?] Gets the fields with the specified property name and parameter. public IEnumerable<CardField?> this[string property, string? parameter] { get; } Parameters property string The property name of the fields. parameter string The parameter of the fields. Property Value IEnumerable<CardField> The fields with the specified property name and parameter. Languages Gets the languages from the card. public IEnumerable<CardField?> Languages { get; } Property Value IEnumerable<CardField> LastName Gets the last name from the card. public string LastName { get; set; } Property Value string Logos Gets the logos from the card. public IEnumerable<CardField?> Logos { get; } Property Value IEnumerable<CardField> MiddleName Gets the middle name from the card. public string MiddleName { get; set; } Property Value string Name Gets the name for the card. public CardField? Name { get; } Property Value CardField Nicknames Gets the nicknames from the card. public IEnumerable<CardField?> Nicknames { get; } Property Value IEnumerable<CardField> Notes Gets the notes from the card. public IEnumerable<CardField?> Notes { get; } Property Value IEnumerable<CardField> Organizations Gets the organizations from the card. public IEnumerable<CardField?> Organizations { get; } Property Value IEnumerable<CardField> PhoneNumbers Gets the phone numbers from the card. public IEnumerable<CardField?> PhoneNumbers { get; } Property Value IEnumerable<CardField> Photos Gets the photos from the card. public IEnumerable<CardField?> Photos { get; } Property Value IEnumerable<CardField> Prefix Gets the prefix from the card. public string Prefix { get; set; } Property Value string Roles Gets the roles of the card. public IEnumerable<CardField?> Roles { get; } Property Value IEnumerable<CardField> Sounds Gets the sounds from the card. public IEnumerable<CardField?> Sounds { get; } Property Value IEnumerable<CardField> Suffix Gets the suffix from the card. public string Suffix { get; set; } Property Value string TimeZones Gets the time zones from the card. public IEnumerable<CardField?> TimeZones { get; } Property Value IEnumerable<CardField> Titles Gets the titles from the card. public IEnumerable<CardField?> Titles { get; } Property Value IEnumerable<CardField> Websites Gets the URLs from the card. public IEnumerable<CardField?> Websites { get; } Property Value IEnumerable<CardField> Methods CompareTo(Card?) Compares the card to another card based on their content. public override int CompareTo(Card? other) Parameters other Card The other card to compare. Returns int An integer that indicates the relative order of the cards. ConvertFrom<TObject>(TObject) Converts the object to the card. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to convert. Type Parameters TObject The type of object to convert. ConvertTo<TObject>() Converts the card to the specified object type. public TObject? ConvertTo<TObject>() Returns TObject The converted card. Type Parameters TObject The type to convert the card to. Equals(Card?) Determines whether the card is equal to another card based on their content. public override bool Equals(Card? other) Parameters other Card The other card to compare. Returns bool True if the cards are equal; otherwise, false. Equals(object?) Determines whether the card is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the card is equal to the object; otherwise, false. GetContent() Gets the content of the card. public override string? GetContent() Returns string The content of the card. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<CardField?> GetEnumerator() Returns IEnumerator<CardField> An enumerator that can be used to iterate through the collection. GetHashCode() Gets the hash code of the card based on its content. public override int GetHashCode() Returns int The hash code of the card. ToFileType<TFile>() Converts the card to the specified object type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The converted card. Type Parameters TFile The type to convert the card to. Operators operator ==(Card?, Card?) Determines whether two card objects are equal. public static bool operator ==(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the two card objects are equal; otherwise, false. operator >(Card?, Card?) Determines whether one card object is greater than another card object. public static bool operator >(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is greater than the second card object; otherwise, false. operator >=(Card?, Card?) Determines whether one card object is greater than or equal to another card object. public static bool operator >=(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is greater than or equal to the second card object; otherwise, false. implicit operator StructuredObject?(Card?) Converts the card to a structured object. public static implicit operator StructuredObject?(Card? file) Parameters file Card The card to convert. Returns StructuredObject implicit operator Table?(Card?) Converts the card to a table. public static implicit operator Table?(Card? file) Parameters file Card The card to convert. Returns Table The table representation of the card. implicit operator Tables?(Card?) Converts the card to a Tables file. public static implicit operator Tables?(Card? file) Parameters file Card The card to convert. Returns Tables The Tables representation of the card. implicit operator Text?(Card?) Converts the card to text. public static implicit operator Text?(Card? file) Parameters file Card The card to convert. Returns Text The text representation of the card. operator !=(Card?, Card?) Determines whether two card objects are not equal. public static bool operator !=(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the two card objects are not equal; otherwise, false. operator <(Card?, Card?) Determines whether one card object is less than another card object. public static bool operator <(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is less than the second card object; otherwise, false. operator <=(Card?, Card?) Determines whether one card object is less than or equal to another card object. public static bool operator <=(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is less than or equal to the second card object; otherwise, false. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.CardField.html": {
    "href": "api/Archivist.DataTypes.CardField.html",
    "title": "Class CardField | Archivist API Reference",
    "keywords": "Class CardField Namespace Archivist.DataTypes Assembly Archivist.dll Represents a field in a card. public class CardField : IEquatable<CardField>, IComparable<CardField>, IObjectConvertable Inheritance object CardField Implements IEquatable<CardField> IComparable<CardField> IObjectConvertable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CardField(string?, IEnumerable<CardFieldParameter>?, string?) Initializes a new instance of the CardField class. public CardField(string? property, IEnumerable<CardFieldParameter>? parameters, string? value) Parameters property string The property of the field. parameters IEnumerable<CardFieldParameter> The parameters of the field. value string The value of the field. Properties Parameters Gets or sets the parameter of the field (sub type). public List<CardFieldParameter> Parameters { get; } Property Value List<CardFieldParameter> Property Gets or sets the property of the field (the type). public string Property { get; set; } Property Value string Value Gets or sets the value of the field. public string? Value { get; set; } Property Value string Methods CompareTo(CardField?) Compares the current CardField object with another CardField object and returns an integer that indicates whether the current object precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(CardField? other) Parameters other CardField The CardField object to compare with the current object. Returns int A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter. Zero This object is equal to other. Greater than zero This object is greater than other. ConvertFrom<TObject>(TObject) Converts the object to a string and sets the content of the field. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject Object to convert Type Parameters TObject Object type ConvertTo<TObject>() Converts the content of the field to the specified type. public TObject? ConvertTo<TObject>() Returns TObject The converted content of the field. Type Parameters TObject The type to convert the content to. Equals(CardField?) Determines whether the specified CardField object is equal to the current CardField object. public bool Equals(CardField? other) Parameters other CardField The CardField object to compare with the current object. Returns bool true if the specified CardField object is equal to the current object; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current CardField object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Returns the hash code for the current CardField object. public override int GetHashCode() Returns int A 32-bit signed integer hash code. ToString() Returns a string representation of the card field. public override string ToString() Returns string A string representation of the card field. Operators operator ==(CardField?, CardField?) Determines whether two CardField objects are equal. public static bool operator ==(CardField? left, CardField? right) Parameters left CardField The first CardField to compare. right CardField The second CardField to compare. Returns bool true if the two CardField objects are equal; otherwise, false. operator >(CardField?, CardField?) Compares two CardField objects and determines whether the first one is greater than the second one. public static bool operator >(CardField? left, CardField? right) Parameters left CardField The first CardField to compare. right CardField The second CardField to compare. Returns bool true if the first CardField is greater than the second one; otherwise, false. operator >=(CardField?, CardField?) Compares two CardField objects and determines whether the first one is greater than or equal to the second one. public static bool operator >=(CardField? left, CardField? right) Parameters left CardField The first CardField to compare. right CardField The second CardField to compare. Returns bool true if the first CardField is greater than or equal to the second one; otherwise, false. operator !=(CardField?, CardField?) Determines whether two CardField objects are not equal. public static bool operator !=(CardField? left, CardField? right) Parameters left CardField The first CardField to compare. right CardField The second CardField to compare. Returns bool true if the two CardField objects are not equal; otherwise, false. operator <(CardField?, CardField?) Compares two CardField objects and determines whether the first one is less than the second one. public static bool operator <(CardField? left, CardField? right) Parameters left CardField The first CardField to compare. right CardField The second CardField to compare. Returns bool true if the first CardField is less than the second one; otherwise, false. operator <=(CardField?, CardField?) Compares two CardField objects and determines whether the first one is less than or equal to the second one. public static bool operator <=(CardField? left, CardField? right) Parameters left CardField The first CardField to compare. right CardField The second CardField to compare. Returns bool true if the first CardField is less than or equal to the second one; otherwise, false."
  },
  "api/Archivist.DataTypes.CardFieldParameter.html": {
    "href": "api/Archivist.DataTypes.CardFieldParameter.html",
    "title": "Class CardFieldParameter | Archivist API Reference",
    "keywords": "Class CardFieldParameter Namespace Archivist.DataTypes Assembly Archivist.dll Represents a parameter for a card field. public class CardFieldParameter : IEquatable<CardFieldParameter>, IComparable<CardFieldParameter> Inheritance object CardFieldParameter Implements IEquatable<CardFieldParameter> IComparable<CardFieldParameter> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CardFieldParameter(string?, string?) Initializes a new instance of the CardFieldParameter class. public CardFieldParameter(string? name, string? value) Parameters name string The name of the parameter. value string The value of the parameter. Properties Name Gets or sets the name of the parameter. public string? Name { get; set; } Property Value string Value Gets or sets the value of the parameter. public string? Value { get; set; } Property Value string Methods CompareTo(CardFieldParameter?) Compares the card field parameter to another card field parameter to determine the relative ordering of the two objects. public int CompareTo(CardFieldParameter? other) Parameters other CardFieldParameter The card field parameter to compare to this card field parameter. Returns int A value that indicates the relative ordering of the two objects. Equals(CardFieldParameter?) Compares the card field parameter to another card field parameter to determine if they are equal. public bool Equals(CardFieldParameter? other) Parameters other CardFieldParameter The card field parameter to compare to this card field parameter. Returns bool true if the card field parameter is equal to the other card field parameter; otherwise, false. Equals(object?) Determines whether the card field parameter is equal to the specified object. public override bool Equals(object? obj) Parameters obj object The object to compare with the card field parameter. Returns bool true if the card field parameter is equal to the object; otherwise, false. GetHashCode() Gets a hash code for the card field parameter. public override int GetHashCode() Returns int A hash code for the card field parameter. ToString() Returns a string representation of the card field parameter. public override string ToString() Returns string A string representation of the card field parameter. Operators operator ==(CardFieldParameter?, CardFieldParameter?) Determines whether the card field parameter is equal to the specified card field parameter. public static bool operator ==(CardFieldParameter? left, CardFieldParameter? right) Parameters left CardFieldParameter The card field parameter to compare with the card field parameter. right CardFieldParameter The card field parameter to compare with the card field parameter. Returns bool true if the card field parameter is equal to the other card field parameter; otherwise, false. operator >(CardFieldParameter?, CardFieldParameter?) Determines if the card field parameter is greater than another card field parameter. public static bool operator >(CardFieldParameter? left, CardFieldParameter? right) Parameters left CardFieldParameter The first card field parameter to compare. right CardFieldParameter The second card field parameter to compare. Returns bool true if the card field parameter is greater than the other card field parameter; otherwise, false. operator >=(CardFieldParameter?, CardFieldParameter?) Determines if the card field parameter is greater than or equal to another card field parameter. public static bool operator >=(CardFieldParameter? left, CardFieldParameter? right) Parameters left CardFieldParameter The first card field parameter to compare. right CardFieldParameter The second card field parameter to compare. Returns bool true if the card field parameter is greater than or equal to the other card field parameter; otherwise, false. operator !=(CardFieldParameter?, CardFieldParameter?) Determines whether two card field parameters are not equal. public static bool operator !=(CardFieldParameter? left, CardFieldParameter? right) Parameters left CardFieldParameter The first card field parameter to compare. right CardFieldParameter The second card field parameter to compare. Returns bool true if the card field parameters are not equal; otherwise, false. operator <(CardFieldParameter?, CardFieldParameter?) Determines if the card field parameter is less than another card field parameter. public static bool operator <(CardFieldParameter? left, CardFieldParameter? right) Parameters left CardFieldParameter The first card field parameter to compare. right CardFieldParameter The second card field parameter to compare. Returns bool true if the card field parameter is less than the other card field parameter; otherwise, false. operator <=(CardFieldParameter?, CardFieldParameter?) Determines if the card field parameter is less than or equal to another card field parameter. public static bool operator <=(CardFieldParameter? left, CardFieldParameter? right) Parameters left CardFieldParameter The first card field parameter to compare. right CardFieldParameter The second card field parameter to compare. Returns bool true if the card field parameter is less than or equal to the other card field parameter; otherwise, false."
  },
  "api/Archivist.DataTypes.FixedLengthField.html": {
    "href": "api/Archivist.DataTypes.FixedLengthField.html",
    "title": "Class FixedLengthField | Archivist API Reference",
    "keywords": "Class FixedLengthField Namespace Archivist.DataTypes Assembly Archivist.dll Represents a fixed-length field. public class FixedLengthField : IComparable<FixedLengthField>, IEquatable<FixedLengthField>, IObjectConvertable Inheritance object FixedLengthField Implements IComparable<FixedLengthField> IEquatable<FixedLengthField> IObjectConvertable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FixedLengthField(string?, int, char, bool) Initializes a new instance of the FixedLengthField class. public FixedLengthField(string? value, int maxLength, char fillerCharacter = ' ', bool leftAligned = true) Parameters value string The value of the field. maxLength int The maximum length of the field. fillerCharacter char The filler character used to pad the field. leftAligned bool Specifies whether the field is left-aligned or not. Properties FillerCharacter Gets the filler character used to pad the field. public char FillerCharacter { get; } Property Value char LeftAligned Gets a value indicating whether the field is left-aligned or not. public bool LeftAligned { get; } Property Value bool MaxLength Gets or sets the maximum length of the field. public int MaxLength { get; } Property Value int Value Gets or sets the value of the field. public string Value { get; set; } Property Value string Methods CompareTo(FixedLengthField?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(FixedLengthField? other) Parameters other FixedLengthField The other field. Returns int A value that indicates the relative order of the objects being compared. ConvertFrom<TObject>(TObject) Converts the content of the field from the specified type to a FixedLengthField. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to convert. Type Parameters TObject The type to convert the content from. ConvertTo<TObject>() Converts the content of the field to the specified type. public TObject? ConvertTo<TObject>() Returns TObject The converted content of the field. Type Parameters TObject The type to convert the content to. Equals(FixedLengthField?) Determines whether the specified object is equal to the current object. public bool Equals(FixedLengthField? other) Parameters other FixedLengthField The object to compare with the current object. Returns bool True if they are the same, otherwise false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool True if they are the same, otherwise false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int The hash code for this instance. ToString() Returns the string representation of the field. public override string ToString() Returns string The string representation of the field. Operators operator ==(FixedLengthField?, FixedLengthField?) Determines whether two FixedLengthField objects are equal. public static bool operator ==(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the two FixedLengthField objects are equal; otherwise, false. operator >(FixedLengthField?, FixedLengthField?) Determines whether the first FixedLengthField object is greater than the second FixedLengthField object. public static bool operator >(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the first FixedLengthField object is greater than the second FixedLengthField object; otherwise, false. operator >=(FixedLengthField?, FixedLengthField?) Determines whether the first FixedLengthField object is greater than or equal to the second FixedLengthField object. public static bool operator >=(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the first FixedLengthField object is greater than or equal to the second FixedLengthField object; otherwise, false. operator !=(FixedLengthField?, FixedLengthField?) Determines whether two FixedLengthField objects are not equal. public static bool operator !=(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the two FixedLengthField objects are not equal; otherwise, false. operator <(FixedLengthField?, FixedLengthField?) Determines whether the first FixedLengthField object is less than the second FixedLengthField object. public static bool operator <(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the first FixedLengthField object is less than the second FixedLengthField object; otherwise, false. operator <=(FixedLengthField?, FixedLengthField?) Determines whether the first FixedLengthField object is less than or equal to the second FixedLengthField object. public static bool operator <=(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the first FixedLengthField object is less than or equal to the second FixedLengthField object; otherwise, false."
  },
  "api/Archivist.DataTypes.FixedLengthFile.html": {
    "href": "api/Archivist.DataTypes.FixedLengthFile.html",
    "title": "Class FixedLengthFile | Archivist API Reference",
    "keywords": "Class FixedLengthFile Namespace Archivist.DataTypes Assembly Archivist.dll Represents a fixed-length file. public class FixedLengthFile : FileBaseClass<FixedLengthFile>, IGenericFile, IEquatable<FixedLengthFile>, IComparable<FixedLengthFile> Inheritance object FileBaseClass<FixedLengthFile> FixedLengthFile Implements IGenericFile IEquatable<FixedLengthFile> IComparable<FixedLengthFile> Inherited Members FileBaseClass<FixedLengthFile>.Metadata FileBaseClass<FixedLengthFile>.Title FileBaseClass<FixedLengthFile>.CompareTo(object) FileBaseClass<FixedLengthFile>.ToFileType<TFile>() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FixedLengthFile() Initializes a new instance of the FixedLengthFile class with the default line separator. public FixedLengthFile() FixedLengthFile(string) Initializes a new instance of the FixedLengthFile class with the specified line separator. public FixedLengthFile(string lineSeparator) Parameters lineSeparator string The line separator to use. Properties LineSeparator Gets the line separator used in the fixed-length file. public string LineSeparator { get; } Property Value string Records Gets the list of fixed-length records in the file. public List<FixedLengthRecord> Records { get; } Property Value List<FixedLengthRecord> Methods CompareTo(FixedLengthFile?) Compares the current fixed-length file with another fixed-length file. public override int CompareTo(FixedLengthFile? other) Parameters other FixedLengthFile The other fixed-length file to compare. Returns int An integer that indicates the relative order of the objects being compared. Equals(FixedLengthFile?) Determines whether the current fixed-length file is equal to another fixed-length file. public override bool Equals(FixedLengthFile? other) Parameters other FixedLengthFile The other fixed-length file to compare. Returns bool True if the current fixed-length file is equal to the other fixed-length file; otherwise, false. Equals(object?) Determines whether the current fixed-length file is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current fixed-length file. Returns bool True if the current fixed-length file is equal to the other object; otherwise, false. GetContent() Gets the content of the fixed-length file as a string. public override string? GetContent() Returns string A string that represents the content of the fixed-length file. GetHashCode() Gets the hash code for the fixed-length file. public override int GetHashCode() Returns int An integer representing the hash code. ToString() Returns a string that represents the current fixed-length file. public override string ToString() Returns string A string that represents the current fixed-length file. Operators operator ==(FixedLengthFile?, FixedLengthFile?) Determines whether two fixed-length files are equal. public static bool operator ==(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the two fixed-length files are equal; otherwise, false. operator >(FixedLengthFile?, FixedLengthFile?) Determines whether the first fixed-length file is greater than the second fixed-length file. public static bool operator >(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the first fixed-length file is greater than the second fixed-length file; otherwise, false. operator >=(FixedLengthFile?, FixedLengthFile?) Determines whether the first fixed-length file is greater than or equal to the second fixed-length file. public static bool operator >=(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the first fixed-length file is greater than or equal to the second fixed-length file; otherwise, false. operator !=(FixedLengthFile?, FixedLengthFile?) Determines whether two fixed-length files are not equal. public static bool operator !=(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the two fixed-length files are not equal; otherwise, false. operator <(FixedLengthFile?, FixedLengthFile?) Determines whether the first fixed-length file is less than the second fixed-length file. public static bool operator <(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the first fixed-length file is less than the second fixed-length file; otherwise, false. operator <=(FixedLengthFile?, FixedLengthFile?) Determines whether the first fixed-length file is less than or equal to the second fixed-length file. public static bool operator <=(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the first fixed-length file is less than or equal to the second fixed-length file; otherwise, false."
  },
  "api/Archivist.DataTypes.FixedLengthRecord.html": {
    "href": "api/Archivist.DataTypes.FixedLengthRecord.html",
    "title": "Class FixedLengthRecord | Archivist API Reference",
    "keywords": "Class FixedLengthRecord Namespace Archivist.DataTypes Assembly Archivist.dll Represents a fixed-length record. public class FixedLengthRecord : IEnumerable<FixedLengthField>, IEnumerable, IComparable<FixedLengthRecord>, IEquatable<FixedLengthRecord> Inheritance object FixedLengthRecord Implements IEnumerable<FixedLengthField> IEnumerable IComparable<FixedLengthRecord> IEquatable<FixedLengthRecord> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Count Gets the number of fields in the record. public int Count { get; } Property Value int Fields Gets the list of fields in the record. public List<FixedLengthField> Fields { get; } Property Value List<FixedLengthField> Length Gets the total length of the record. public int Length { get; } Property Value int Methods CompareTo(FixedLengthRecord?) Compares the current fixed-length record with another fixed-length record and returns an integer that indicates whether the current record is shorter, equal to, or longer than the other record. public int CompareTo(FixedLengthRecord? other) Parameters other FixedLengthRecord The fixed-length record to compare with the current record. Returns int A positive integer if the current record is longer than the other record, zero if they are of equal length, or a negative integer if the current record is shorter than the other record. Equals(FixedLengthRecord?) Determines whether the current fixed-length record is equal to another fixed-length record. public bool Equals(FixedLengthRecord? other) Parameters other FixedLengthRecord The fixed-length record to compare with the current record. Returns bool true if the current fixed-length record is equal to the other record; otherwise, false. Equals(object?) Determines whether the current fixed-length record is equal to the specified object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current fixed-length record. Returns bool true if the current fixed-length record is equal to the specified object; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the fields in the record. public IEnumerator<FixedLengthField> GetEnumerator() Returns IEnumerator<FixedLengthField> An enumerator that can be used to iterate through the fields in the record. GetHashCode() Returns the hash code for the current fixed-length record. public override int GetHashCode() Returns int A 32-bit signed integer hash code. ToString() The string representation of the fixed-length record. public override string ToString() Returns string The string representation of the fixed-length record. Operators operator ==(FixedLengthRecord?, FixedLengthRecord?) Determines whether two fixed-length records are equal. public static bool operator ==(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the two fixed-length records are equal; otherwise, false. operator >(FixedLengthRecord?, FixedLengthRecord?) Determines whether the first fixed-length record is greater than the second fixed-length record. public static bool operator >(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the first fixed-length record is greater than the second fixed-length record; otherwise, false. operator >=(FixedLengthRecord?, FixedLengthRecord?) Determines whether the first fixed-length record is greater than or equal to the second fixed-length record. public static bool operator >=(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the first fixed-length record is greater than or equal to the second fixed-length record; otherwise, false. operator !=(FixedLengthRecord?, FixedLengthRecord?) Determines whether two fixed-length records are not equal. public static bool operator !=(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the two fixed-length records are not equal; otherwise, false. operator <(FixedLengthRecord?, FixedLengthRecord?) Determines whether the first fixed-length record is less than the second fixed-length record. public static bool operator <(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the first fixed-length record is less than the second fixed-length record; otherwise, false. operator <=(FixedLengthRecord?, FixedLengthRecord?) Determines whether the first fixed-length record is less than or equal to the second fixed-length record. public static bool operator <=(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the first fixed-length record is less than or equal to the second fixed-length record; otherwise, false."
  },
  "api/Archivist.DataTypes.StructuredObject.html": {
    "href": "api/Archivist.DataTypes.StructuredObject.html",
    "title": "Class StructuredObject | Archivist API Reference",
    "keywords": "Class StructuredObject Namespace Archivist.DataTypes Assembly Archivist.dll Represents a structured object. public class StructuredObject : FileBaseClass<StructuredObject>, IGenericFile, IComparable<StructuredObject>, IEquatable<StructuredObject>, IObjectConvertable, IDictionary<string, object?>, ICollection<KeyValuePair<string, object?>>, IEnumerable<KeyValuePair<string, object?>>, IEnumerable Inheritance object FileBaseClass<StructuredObject> StructuredObject Implements IGenericFile IComparable<StructuredObject> IEquatable<StructuredObject> IObjectConvertable IDictionary<string, object> ICollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable Inherited Members FileBaseClass<StructuredObject>.Metadata FileBaseClass<StructuredObject>.Title FileBaseClass<StructuredObject>.CompareTo(object) FileBaseClass<StructuredObject>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StructuredObject() Initializes a new instance of the StructuredObject class. public StructuredObject() StructuredObject(IDictionary<string, object?>?) Initializes a new instance of the StructuredObject class with the specified content. public StructuredObject(IDictionary<string, object?>? value) Parameters value IDictionary<string, object> The content of the structured object. Properties Count Gets the number of items in the structured object. public int Count { get; } Property Value int IsReadOnly Determines whether the structured object is read-only. public bool IsReadOnly { get; } Property Value bool this[string] Gets the value of the structured object with the specified key. public object? this[string key] { get; set; } Parameters key string The key of the value to get. Property Value object The value of the structured object with the specified key. Keys Keys in the structured object. public ICollection<string> Keys { get; } Property Value ICollection<string> Values Values in the structured object. public ICollection<object?> Values { get; } Property Value ICollection<object> Methods Add(KeyValuePair<string, object?>) Adds a key-value pair to the structured object. public void Add(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The key-value pair to add. Add(string, object?) Adds a key-value pair to the structured object. public void Add(string key, object? value) Parameters key string The key of the value to add. value object The value to add. Clear() Clears the structured object. public void Clear() CompareTo(StructuredObject?) Compares the current structured object with another structured object. public override int CompareTo(StructuredObject? other) Parameters other StructuredObject The structured object to compare with this structured object. Returns int A value indicating the relative order of the objects being compared. Contains(KeyValuePair<string, object?>) Determines whether the current structured object contains the specified key-value pair. public bool Contains(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The key-value pair to locate in the structured object. Returns bool True if the structured object contains the key-value pair; otherwise, false. ContainsKey(string) Determines whether the current structured object contains the specified key. public bool ContainsKey(string key) Parameters key string The key to locate in the structured object. Returns bool True if the structured object contains the key; otherwise, false. ConvertFrom<TObject>(TObject) Converts the structured object from the specified object. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to convert from. Type Parameters TObject The type of the object to convert from. ConvertTo<TObject>() Converts the structured object to the specified object type. public TObject? ConvertTo<TObject>() Returns TObject The converted object. Type Parameters TObject The type of the object to convert to. CopyTo(KeyValuePair<string, object?>[], int) Copies the key-value pairs of the structured object to an array. public void CopyTo(KeyValuePair<string, object?>[] array, int arrayIndex) Parameters array KeyValuePair<string, object>[] The array to copy the key-value pairs to. arrayIndex int The index in the array to start copying the key-value pairs to. Equals(StructuredObject?) Determines whether the current structured object is equal to another structured object. public override bool Equals(StructuredObject? other) Parameters other StructuredObject The structured object to compare with the current structured object. Returns bool true if the current structured object is equal to the other structured object; otherwise, false. Equals(object?) Determines whether the current structured object is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current structured object. Returns bool true if the current structured object is equal to the other object; otherwise, false. GetContent() Gets the content of the structured object as a string. public override string? GetContent() Returns string The content of the structured object as a string. GetEnumerator() Gets the enumerator for the structured object. public IEnumerator<KeyValuePair<string, object?>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, object>> The enumerator for the structured object. GetHashCode() Gets the hash code of the structured object. public override int GetHashCode() Returns int The hash code of the structured object. GetValue<TObject>(string) Gets the value of the structured object with the specified key. public TObject? GetValue<TObject>(string key) Parameters key string The key of the value to get. Returns TObject The value of the structured object with the specified key. Type Parameters TObject The type of the value to get. Remove(KeyValuePair<string, object?>) Removes the key-value pair with the specified key from the structured object. public bool Remove(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The key-value pair to remove. Returns bool true if the key-value pair was removed; otherwise, false. Remove(string) Removes the key-value pair with the specified key from the structured object. public bool Remove(string key) Parameters key string The key of the key-value pair to remove. Returns bool true if the key-value pair was removed; otherwise, false. SetValue<TObject>(string, TObject) Sets the value of the structured object with the specified key. public StructuredObject SetValue<TObject>(string key, TObject value) Parameters key string The key of the value to set. value TObject Value to set Returns StructuredObject The structured object with the value set. Type Parameters TObject The type of the value to set. ToFileType<TFile>() Converts the structured object to the specified file type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The file of the specified type. Type Parameters TFile The type of the file. TryGetValue(string, out object?) Tries to get the value of the structured object with the specified key. public bool TryGetValue(string key, out object? value) Parameters key string The key of the value to get. value object The value of the structured object with the specified key. Returns bool true if the value was retrieved; otherwise, false. TryGetValue<TObject>(string, out TObject?) Tries to get the value of the structured object with the specified key. public bool TryGetValue<TObject>(string key, out TObject? value) Parameters key string The key of the value to get. value TObject The value of the structured object with the specified key. Returns bool true if the value was retrieved; otherwise, false. Type Parameters TObject The type of the value to get. Operators operator ==(StructuredObject?, StructuredObject?) Determines whether two structured objects are equal. public static bool operator ==(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the structured objects are equal; otherwise, false. operator >(StructuredObject?, StructuredObject?) Determines whether the left structured object is greater than the right structured object. public static bool operator >(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the left structured object is greater than the right structured object; otherwise, false. operator >=(StructuredObject?, StructuredObject?) Determines whether the left structured object is greater than or equal to the right structured object. public static bool operator >=(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the left structured object is greater than or equal to the right structured object; otherwise, false. implicit operator Card?(StructuredObject?) Converts the structured object to a card. public static implicit operator Card?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Card implicit operator Table?(StructuredObject?) Converts the structured object to a table. public static implicit operator Table?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Table implicit operator Tables?(StructuredObject?) Converts the structured object to a tables object. public static implicit operator Tables?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Tables implicit operator Text?(StructuredObject?) Converts the structured object to a text object. public static implicit operator Text?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Text operator !=(StructuredObject?, StructuredObject?) Determines whether two structured objects are not equal. public static bool operator !=(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the structured objects are not equal; otherwise, false. operator <(StructuredObject?, StructuredObject?) Determines whether the left structured object is less than the right structured object. public static bool operator <(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the left structured object is less than the right structured object; otherwise, false. operator <=(StructuredObject?, StructuredObject?) Determines whether the left structured object is less than or equal to the right structured object. public static bool operator <=(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the left structured object is less than or equal to the right structured object; otherwise, false."
  },
  "api/Archivist.DataTypes.Table.html": {
    "href": "api/Archivist.DataTypes.Table.html",
    "title": "Class Table | Archivist API Reference",
    "keywords": "Class Table Namespace Archivist.DataTypes Assembly Archivist.dll Represents a table in the Archivist system. public class Table : FileBaseClass<Table>, IGenericFile, IComparable<Table>, IEquatable<Table>, IListConvertable, IList<TableRow>, ICollection<TableRow>, IEnumerable<TableRow>, IEnumerable Inheritance object FileBaseClass<Table> Table Implements IGenericFile IComparable<Table> IEquatable<Table> IListConvertable IList<TableRow> ICollection<TableRow> IEnumerable<TableRow> IEnumerable Inherited Members FileBaseClass<Table>.Metadata FileBaseClass<Table>.Title FileBaseClass<Table>.CompareTo(object) FileBaseClass<Table>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Table() Initializes a new instance of the Table class. public Table() Properties Columns Gets the headers of the table. public List<string> Columns { get; } Property Value List<string> The headers. Count Gets the number of rows in the table. public int Count { get; } Property Value int Delimiter Gets or sets the delimiter used by the table. public string Delimiter { get; set; } Property Value string IsReadOnly Gets a value indicating whether the table is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the row at the specified index. public TableRow this[int index] { get; set; } Parameters index int The index of the table. Property Value TableRow The row at the specified index. Exceptions ArgumentOutOfRangeException The index is out of range. Methods Add(TableRow?) Adds a row to the table. public void Add(TableRow? item) Parameters item TableRow The row to add to the table. AddRow() Adds a new row to the table. public TableRow AddRow() Returns TableRow The new row. Clear() Clears the table. public void Clear() CompareTo(Table?) Compares the current table object with another table object. public override int CompareTo(Table? other) Parameters other Table The table object to compare with this table object. Returns int A value that indicates the relative order of the table objects being compared. Contains(TableRow?) Determines if the table contains the specified row. public bool Contains(TableRow? item) Parameters item TableRow The row to find in the table. Returns bool true if the table contains the row; otherwise, false>. ConvertFrom<TObject>(List<TObject?>) Copies the list object to the table. public void ConvertFrom<TObject>(List<TObject?> obj) Parameters obj List<TObject> The list object to copy to the table. Type Parameters TObject The type of the object. ConvertTo<TObject>() Converts this instance into the object array of the type specified. public List<TObject?> ConvertTo<TObject>() Returns List<TObject> The resulting array. Type Parameters TObject The type of the object. CopyTo(TableRow[]?, int) Copies the rows of the table to an array, starting at a particular array index. public void CopyTo(TableRow[]? array, int arrayIndex) Parameters array TableRow[] The array to copy the rows to. arrayIndex int The index in the array at which to start copying the rows. Equals(Table?) Determines whether the current table object is equal to another table object. public override bool Equals(Table? other) Parameters other Table The table object to compare with this table object. Returns bool true if the current table object is equal to the other table object; otherwise, false. Equals(object?) Determines whether the current table object is equal to another table object. public override bool Equals(object? obj) Parameters obj object The table object to compare with this table object. Returns bool true if the current table object is equal to the other table object; otherwise, false. GetContent() Gets the content of the table. public override string? GetContent() Returns string The content of the table. GetEnumerator() Returns an enumerator that iterates through the rows of the table. public IEnumerator<TableRow> GetEnumerator() Returns IEnumerator<TableRow> An enumerator that can be used to iterate through the rows of the table. GetHashCode() Returns the hash code for the current table object. public override int GetHashCode() Returns int A hash code for the current table object. IndexOf(TableRow?) Returns the index of the specified row in the table. public int IndexOf(TableRow? item) Parameters item TableRow The row to find in the table. Returns int The index of the row in the table. Insert(int, TableRow?) Inserts a row into the table at the specified index. public void Insert(int index, TableRow? item) Parameters index int The index at which to insert the row. item TableRow The row to insert into the table. Remove(TableRow?) Removes the first occurrence of a specific row from the table. public bool Remove(TableRow? item) Parameters item TableRow The row to remove from the table. Returns bool true if the row was successfully removed; otherwise, false>. RemoveAt(int) Removes the row at the specified index. public void RemoveAt(int index) Parameters index int The index of the row to remove. ToFileType<TFile>() Converts the table to the specified file type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The file of the specified type. Type Parameters TFile The type of the file. Operators operator ==(Table?, Table?) Determines whether two table objects are equal. public static bool operator ==(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the two table objects are equal; otherwise, false. operator >(Table?, Table?) Determines whether the first table object is greater than the second table object. public static bool operator >(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the first table object is greater than the second table object; otherwise, false. operator >=(Table?, Table?) Determines whether the first table object is greater than or equal to the second table object. public static bool operator >=(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the first table object is greater than or equal to the second table object; otherwise, false. implicit operator Card?(Table?) Converts the table to a card. public static implicit operator Card?(Table? file) Parameters file Table The table to convert. Returns Card The card representation of the table. implicit operator StructuredObject?(Table?) Converts the table to a structured object. public static implicit operator StructuredObject?(Table? file) Parameters file Table The table to convert. Returns StructuredObject implicit operator Tables?(Table?) Converts the table to a tables object. public static implicit operator Tables?(Table? file) Parameters file Table The table to convert. Returns Tables The tables representation of the table. implicit operator Text?(Table?) Converts the table to a text object. public static implicit operator Text?(Table? file) Parameters file Table The table to convert. Returns Text The text representation of the table. operator !=(Table?, Table?) Determines whether two table objects are not equal. public static bool operator !=(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the two table objects are not equal; otherwise, false. operator <(Table?, Table?) Determines whether the first table object is less than the second table object. public static bool operator <(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the first table object is less than the second table object; otherwise, false. operator <=(Table?, Table?) Determines whether the first table object is less than or equal to the second table object. public static bool operator <=(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the first table object is less than or equal to the second table object; otherwise, false. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.TableCell.html": {
    "href": "api/Archivist.DataTypes.TableCell.html",
    "title": "Class TableCell | Archivist API Reference",
    "keywords": "Class TableCell Namespace Archivist.DataTypes Assembly Archivist.dll Represents a cell in a table. public class TableCell : IComparable<TableCell>, IEquatable<TableCell>, IObjectConvertable Inheritance object TableCell Implements IComparable<TableCell> IEquatable<TableCell> IObjectConvertable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TableCell(string?) Initializes a new instance of the TableCell class with the specified content. public TableCell(string? content) Parameters content string The content of the cell. Properties Content Gets or sets the content of the cell. public string? Content { get; set; } Property Value string Methods CompareTo(TableCell?) Compares the current TableCell with another TableCell. public int CompareTo(TableCell? other) Parameters other TableCell The TableCell to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. ConvertFrom<TObject>(TObject) Converts the object to a string and sets the content of the cell. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject Object to convert Type Parameters TObject Object type ConvertTo<TObject>() Converts the content of the TableCell to the specified type. public TObject? ConvertTo<TObject>() Returns TObject The converted content of the TableCell. Type Parameters TObject The type to convert the content to. Equals(TableCell?) Determines whether the current TableCell is equal to another TableCell. public bool Equals(TableCell? other) Parameters other TableCell The TableCell to compare with this instance. Returns bool true if the current TableCell is equal to the other TableCell; otherwise, false. Equals(object?) Determines whether the current TableCell is equal to another TableCell. public override bool Equals(object? obj) Parameters obj object The TableCell to compare with this instance. Returns bool true if the current TableCell is equal to the other TableCell; otherwise, false. GetHashCode() Returns the hash code for the current TableCell. public override int GetHashCode() Returns int A 32-bit signed integer hash code. ToString() Returns a string that represents the current TableCell. public override string? ToString() Returns string A string that represents the current TableCell. Operators operator ==(TableCell?, TableCell?) Determines whether two TableCell objects are equal. public static bool operator ==(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the two TableCell objects are equal; otherwise, false. operator >(TableCell?, TableCell?) Determines whether the first TableCell is greater than the second TableCell. public static bool operator >(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the first TableCell is greater than the second TableCell; otherwise, false. operator >=(TableCell?, TableCell?) Determines whether the first TableCell is greater than or equal to the second TableCell. public static bool operator >=(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the first TableCell is greater than or equal to the second TableCell; otherwise, false. operator !=(TableCell?, TableCell?) Determines whether two TableCell objects are not equal. public static bool operator !=(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the two TableCell objects are not equal; otherwise, false. operator <(TableCell?, TableCell?) Determines whether the first TableCell is less than the second TableCell. public static bool operator <(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the first TableCell is less than the second TableCell; otherwise, false. operator <=(TableCell?, TableCell?) Determines whether the first TableCell is less than or equal to the second TableCell. public static bool operator <=(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the first TableCell is less than or equal to the second TableCell; otherwise, false."
  },
  "api/Archivist.DataTypes.TableRow.html": {
    "href": "api/Archivist.DataTypes.TableRow.html",
    "title": "Class TableRow | Archivist API Reference",
    "keywords": "Class TableRow Namespace Archivist.DataTypes Assembly Archivist.dll Represents a table row. public class TableRow : IComparable<TableRow>, IEquatable<TableRow>, IObjectConvertable, IList<TableCell>, ICollection<TableCell>, IEnumerable<TableCell>, IEnumerable Inheritance object TableRow Implements IComparable<TableRow> IEquatable<TableRow> IObjectConvertable IList<TableCell> ICollection<TableCell> IEnumerable<TableCell> IEnumerable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TableRow(List<string>?) Initializes a new instance of the TableRow class with the specified columns. public TableRow(List<string>? columns) Parameters columns List<string> The list of column names. Properties Count Gets the number of cells in the row. public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the row is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the cell at the specified index. public TableCell this[int index] { get; set; } Parameters index int The index of the cell. Property Value TableCell The cell at the specified index. this[string] Gets or sets the cell with the specified column name. public TableCell this[string column] { get; set; } Parameters column string The name of the column. Property Value TableCell The cell with the specified column name. Methods Add(TableCell?) Adds a cell to the row. public void Add(TableCell? item) Parameters item TableCell The cell to add. Add(string?) Adds a cell to the row with the specified content. public void Add(string? item) Parameters item string The content of the cell to add. AddRange(IEnumerable<TableCell>) Adds a list of cells to the row. public void AddRange(IEnumerable<TableCell> collection) Parameters collection IEnumerable<TableCell> The list of cells to add. AddRange(IEnumerable<string>) Adds a list of cells to the row with the specified content. public void AddRange(IEnumerable<string> collection) Parameters collection IEnumerable<string> The list of content to add. Clear() Removes all cells from the row. public void Clear() CompareTo(TableRow?) Compares the current TableRow with another TableRow and returns an integer that indicates whether the current TableRow precedes, follows, or occurs in the same position in the sort order as the other TableRow. public int CompareTo(TableRow? other) Parameters other TableRow The TableRow to compare with the current TableRow. Returns int A value that indicates the relative order of the objects being compared. Contains(TableCell?) Determines whether the row contains a specific cell. public bool Contains(TableCell? item) Parameters item TableCell The cell to locate in the row. Returns bool true if the cell is found in the row; otherwise, false. ConvertFrom<TObject>(TObject) Copies the object to the row. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to copy. Type Parameters TObject The object type ConvertTo<TObject>() Converts the current TableRow to an object array of the specified type. public TObject ConvertTo<TObject>() Returns TObject The resulting array. Type Parameters TObject The type of the object. CopyTo(TableCell[]?, int) Copies the elements of the row to an array, starting at a particular array index. public void CopyTo(TableCell[]? array, int arrayIndex) Parameters array TableCell[] The one-dimensional array that is the destination of the elements copied from the row. arrayIndex int The zero-based index in array at which copying begins. Equals(TableRow?) Determines whether the current TableRow is equal to another TableRow. public bool Equals(TableRow? other) Parameters other TableRow The TableRow to compare with the current TableRow. Returns bool true if the two TableRow objects are equal; otherwise, false. Equals(object?) Determines whether the current TableRow is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current TableRow. Returns bool true if the object is a TableRow and is equal to the current TableRow; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the cells in the row. public IEnumerator GetEnumerator() Returns IEnumerator An enumerator that can be used to iterate through the cells in the row. GetHashCode() Returns the hash code for the row. public override int GetHashCode() Returns int A 32-bit signed integer hash code. IndexOf(TableCell?) Searches for the specified cell and returns the zero-based index of the first occurrence within the entire row. public int IndexOf(TableCell? item) Parameters item TableCell The cell to locate in the row. Returns int The zero-based index of the first occurrence of the cell within the entire row, if found; otherwise, -1. Insert(int, TableCell?) Inserts a cell into the row at the specified index. public void Insert(int index, TableCell? item) Parameters index int The zero-based index at which the cell should be inserted. item TableCell The cell to insert into the row. Remove(TableCell?) Removes the first occurrence of a specific cell from the row. public bool Remove(TableCell? item) Parameters item TableCell The cell to remove from the row. Returns bool true if the cell is successfully removed; otherwise, false. RemoveAt(int) Removes the cell at the specified index from the row. public void RemoveAt(int index) Parameters index int The zero-based index of the cell to remove. ToString() Returns a string that represents the row. public override string ToString() Returns string A string that represents the row. Operators operator ==(TableRow?, TableRow?) Determines whether two TableRow objects are equal. public static bool operator ==(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the two TableRow objects are equal; otherwise, false. operator >(TableRow?, TableRow?) Determines whether the first TableRow is greater than the second TableRow. public static bool operator >(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the first TableRow is greater than the second TableRow; otherwise, false. operator >=(TableRow?, TableRow?) Determines whether the first TableRow is greater than or equal to the second TableRow. public static bool operator >=(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the first TableRow is greater than or equal to the second TableRow; otherwise, false. operator !=(TableRow?, TableRow?) Determines whether two TableRow objects are not equal. public static bool operator !=(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the two TableRow objects are not equal; otherwise, false. operator <(TableRow?, TableRow?) Determines whether the first TableRow is less than the second TableRow. public static bool operator <(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the first TableRow is less than the second TableRow; otherwise, false. operator <=(TableRow?, TableRow?) Determines whether the first TableRow is less than or equal to the second TableRow. public static bool operator <=(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the first TableRow is less than or equal to the second TableRow; otherwise, false."
  },
  "api/Archivist.DataTypes.Tables.html": {
    "href": "api/Archivist.DataTypes.Tables.html",
    "title": "Class Tables | Archivist API Reference",
    "keywords": "Class Tables Namespace Archivist.DataTypes Assembly Archivist.dll Represents a collection of tables. public class Tables : FileBaseClass<Tables>, IGenericFile, IComparable<Tables>, IEquatable<Tables>, IListConvertable, IList<Table>, ICollection<Table>, IEnumerable<Table>, IEnumerable Inheritance object FileBaseClass<Tables> Tables Implements IGenericFile IComparable<Tables> IEquatable<Tables> IListConvertable IList<Table> ICollection<Table> IEnumerable<Table> IEnumerable Inherited Members FileBaseClass<Tables>.Metadata FileBaseClass<Tables>.Title FileBaseClass<Tables>.CompareTo(object) FileBaseClass<Tables>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Count The number of tables in the file. public int Count { get; } Property Value int IsReadOnly Is this file read only? public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the table at the specified index. public Table this[int index] { get; set; } Parameters index int The index of the table to get or set. Property Value Table The table at the specified index. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. Methods Add(Table?) Adds a new table to the Table collection. public void Add(Table? item) Parameters item Table The table to add to the collection. AddTable() Adds a new row to the Tables. public Table AddTable() Returns Table The new row. Clear() Clears the tables. public void Clear() CompareTo(Tables?) Compares the current Tables object with another Tables object. public override int CompareTo(Tables? other) Parameters other Tables The Tables object to compare with this Tables object. Returns int A value that indicates the relative order of the Tables objects being compared. Contains(Table?) Determines whether the Tables contains a specific table. public bool Contains(Table? item) Parameters item Table The table to locate in the Tables. Returns bool true if the table is found in the Tables; otherwise, false. ConvertFrom<TObject>(List<TObject?>?) Copies the list object to the Tables. public void ConvertFrom<TObject>(List<TObject?>? obj) Parameters obj List<TObject> The list object to copy to the Tables. Type Parameters TObject The type of the object. ConvertTo<TObject>() Converts this instance into the object array of the type specified. public List<TObject?> ConvertTo<TObject>() Returns List<TObject> The resulting array. Type Parameters TObject The type of the object. CopyTo(Table[]?, int) Copies the elements of the Tables to an array, starting at a particular array index. public void CopyTo(Table[]? array, int arrayIndex) Parameters array Table[] The one-dimensional array that is the destination of the elements copied from the Tables. arrayIndex int The zero-based index in the array at which copying begins. Exceptions ArgumentNullException Thrown when the array is null. Equals(Tables?) Determines whether the current Tables object is equal to another Tables object. public override bool Equals(Tables? other) Parameters other Tables The Tables object to compare with this Tables object. Returns bool true if the current Tables object is equal to the other Tables object; otherwise, false. Equals(object?) Determines whether the current Tables object is equal to another Tables object. public override bool Equals(object? obj) Parameters obj object The Tables object to compare with this Tables object. Returns bool true if the current Tables object is equal to the other Tables object; otherwise, false. GetContent() Gets the content of the Tables. public override string? GetContent() Returns string The content of the Tables. GetEnumerator() Returns an enumerator that iterates through the Tables. public IEnumerator<Table> GetEnumerator() Returns IEnumerator<Table> An enumerator that can be used to iterate through the Tables. GetHashCode() Returns the hash code for the current Tables object. public override int GetHashCode() Returns int A hash code for the current Tables object. IndexOf(Table?) Gets the index of the specified table. public int IndexOf(Table? item) Parameters item Table The table to locate in the Tables. Returns int The index of the table if found; otherwise, -1. Insert(int, Table?) Inserts a new table at the specified index. public void Insert(int index, Table? item) Parameters index int The index to insert the table at. item Table The table to insert. Remove(Table?) Removes the first occurrence of a specific table from the Tables. public bool Remove(Table? item) Parameters item Table The table to remove from the Tables. Returns bool true if the table was successfully removed; otherwise, false. RemoveAt(int) Removes the table at the specified index. public void RemoveAt(int index) Parameters index int The index of the table to remove. ToFileType<TFile>() Converts the Tables to the specified file type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The file of the specified type. Type Parameters TFile The type of the file. Operators operator ==(Tables?, Tables?) Determines whether two Tables objects are equal. public static bool operator ==(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the two Tables objects are equal; otherwise, false. operator >(Tables?, Tables?) Determines whether the first Tables object is greater than the second Tables object. public static bool operator >(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the first Tables object is greater than the second Tables object; otherwise, false. operator >=(Tables?, Tables?) Determines whether the first Tables object is greater than or equal to the second Tables object. public static bool operator >=(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the first Tables object is greater than or equal to the second Tables object; otherwise, false. implicit operator Card?(Tables?) Converts the Tables to a Card. public static implicit operator Card?(Tables? file) Parameters file Tables The Tables to convert. Returns Card The Card converted from the Tables. implicit operator StructuredObject?(Tables?) Converts the Tables to a StructuredObject. public static implicit operator StructuredObject?(Tables? file) Parameters file Tables The Tables to convert. Returns StructuredObject implicit operator Table?(Tables?) Converts the Tables to a Table. public static implicit operator Table?(Tables? file) Parameters file Tables The Tables to convert. Returns Table The Table converted from the Tables. implicit operator Text?(Tables?) Converts the Tables to a Text. public static implicit operator Text?(Tables? file) Parameters file Tables The Tables to convert. Returns Text The Text converted from the Tables. operator !=(Tables?, Tables?) Determines whether two Tables objects are not equal. public static bool operator !=(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the two Tables objects are not equal; otherwise, false. operator <(Tables?, Tables?) Determines whether the first Tables object is less than the second Tables object. public static bool operator <(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the first Tables object is less than the second Tables object; otherwise, false. operator <=(Tables?, Tables?) Determines whether the first Tables object is less than or equal to the second Tables object. public static bool operator <=(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the first Tables object is less than or equal to the second Tables object; otherwise, false. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.Text.html": {
    "href": "api/Archivist.DataTypes.Text.html",
    "title": "Class Text | Archivist API Reference",
    "keywords": "Class Text Namespace Archivist.DataTypes Assembly Archivist.dll Represents a text file. public class Text : FileBaseClass<Text>, IGenericFile Inheritance object FileBaseClass<Text> Text Implements IGenericFile Inherited Members FileBaseClass<Text>.Metadata FileBaseClass<Text>.Title FileBaseClass<Text>.CompareTo(object) FileBaseClass<Text>.Equals(object) FileBaseClass<Text>.GetHashCode() FileBaseClass<Text>.ToFileType<TFile>() FileBaseClass<Text>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Text(string?, string?) Initializes a new instance of the Text class. public Text(string? content, string? title) Parameters content string The content of the text file. title string The title of the text file. Properties Content Gets or sets the content of the text file. public string? Content { get; set; } Property Value string Methods CompareTo(Text?) Compares the current text file with another text file. public override int CompareTo(Text? other) Parameters other Text The text file to compare with. Returns int An integer that indicates the relative order of the text files. Equals(Text?) Determines whether the current text file is equal to another text file. public override bool Equals(Text? other) Parameters other Text The text file to compare with. Returns bool True if the text files are equal; otherwise, false. GetContent() Gets the content of the text file. public override string? GetContent() Returns string The content of the text file. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.html": {
    "href": "api/Archivist.DataTypes.html",
    "title": "Namespace Archivist.DataTypes | Archivist API Reference",
    "keywords": "Namespace Archivist.DataTypes Classes Card Represents a card (vCard, etc.) file. CardField Represents a field in a card. CardFieldParameter Represents a parameter for a card field. FixedLengthField Represents a fixed-length field. FixedLengthFile Represents a fixed-length file. FixedLengthRecord Represents a fixed-length record. StructuredObject Represents a structured object. Table Represents a table in the Archivist system. TableCell Represents a cell in a table. TableRow Represents a table row. Tables Represents a collection of tables. Text Represents a text file."
  },
  "api/Archivist.Enums.CommonCardFields.html": {
    "href": "api/Archivist.Enums.CommonCardFields.html",
    "title": "Class CommonCardFields | Archivist API Reference",
    "keywords": "Class CommonCardFields Namespace Archivist.Enums Assembly Archivist.dll Represents the common fields for a card. public static class CommonCardFields Inheritance object CommonCardFields Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Address Gets the address field. public static string Address { get; } Property Value string Anniversary Gets the anniversary field. public static string Anniversary { get; } Property Value string Birthday Gets the birthday field. public static string Birthday { get; } Property Value string Birthplace Gets the birthplace field. public static string Birthplace { get; } Property Value string Deathdate Gets the death date field. public static string Deathdate { get; } Property Value string Deathplace Gets the death place field. public static string Deathplace { get; } Property Value string Email Gets the email field. public static string Email { get; } Property Value string Expertise Gets the expertise field. public static string Expertise { get; } Property Value string FullName Gets the full name field. public static string FullName { get; } Property Value string Gender Gets the gender field. public static string Gender { get; } Property Value string Geo Gets the geo field. public static string Geo { get; } Property Value string Hobby Gets the hobby field. public static string Hobby { get; } Property Value string IMPP Gets the IMPP field. public static string IMPP { get; } Property Value string Interest Gets the interest field. public static string Interest { get; } Property Value string Key Gets the key field. public static string Key { get; } Property Value string Label Gets the label field. public static string Label { get; } Property Value string Language Gets the language field. public static string Language { get; } Property Value string Logo Gets the logo field. public static string Logo { get; } Property Value string Name Gets the name field. public static string Name { get; } Property Value string Nickname Gets the nickname field. public static string Nickname { get; } Property Value string Note Gets the note field. public static string Note { get; } Property Value string Organization Gets the organization field. public static string Organization { get; } Property Value string Phone Gets the phone field. public static string Phone { get; } Property Value string Photo Gets the photo field. public static string Photo { get; } Property Value string Role Gets the role field. public static string Role { get; } Property Value string Sound Gets the sound field. public static string Sound { get; } Property Value string TimeZone Gets the time zone field. public static string TimeZone { get; } Property Value string Title Gets the title field. public static string Title { get; } Property Value string URL Gets the URL field. public static string URL { get; } Property Value string"
  },
  "api/Archivist.Enums.html": {
    "href": "api/Archivist.Enums.html",
    "title": "Namespace Archivist.Enums | Archivist API Reference",
    "keywords": "Namespace Archivist.Enums Classes CommonCardFields Represents the common fields for a card."
  },
  "api/Archivist.ExtensionMethods.InternalExtensionMethods.html": {
    "href": "api/Archivist.ExtensionMethods.InternalExtensionMethods.html",
    "title": "Class InternalExtensionMethods | Archivist API Reference",
    "keywords": "Class InternalExtensionMethods Namespace Archivist.ExtensionMethods Assembly Archivist.dll Internal extension methods. public static class InternalExtensionMethods Inheritance object InternalExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSpaces(string?) Adds spaces before each capital letter in the input string. public static string AddSpaces(this string? input) Parameters input string Input string Returns string String with spaces before each capital letter Left(string?, int) Gets the first x number of characters from the left hand side public static string Left(this string? input, int length) Parameters input string Input string length int x number of characters to return Returns string The resulting string ReadAllAsync(Stream?, Encoding?) Takes all of the data in the stream and returns it as a string public static Task<string> ReadAllAsync(this Stream? input, Encoding? encodingUsing = null) Parameters input Stream Input stream encodingUsing Encoding Encoding that the string should be in (defaults to UTF8) Returns Task<string> A string containing the content of the stream ReadAllBinaryAsync(Stream?) Takes all of the data in the stream and returns it as an array of bytes public static Task<byte[]> ReadAllBinaryAsync(this Stream? input) Parameters input Stream Input stream Returns Task<byte[]> A byte array ToString(byte[]?, Encoding?, int, int) Converts a byte array to a string public static string ToString(this byte[]? input, Encoding? encodingUsing, int index = 0, int count = -1) Parameters input byte[] Input byte array encodingUsing Encoding Encoding that the string should be in (defaults to UTF8) index int Index to start at count int Number of bytes to convert Returns string A string containing the content of the byte array"
  },
  "api/Archivist.ExtensionMethods.html": {
    "href": "api/Archivist.ExtensionMethods.html",
    "title": "Namespace Archivist.ExtensionMethods | Archivist API Reference",
    "keywords": "Namespace Archivist.ExtensionMethods Classes InternalExtensionMethods Internal extension methods."
  },
  "api/Archivist.FormatManager.html": {
    "href": "api/Archivist.FormatManager.html",
    "title": "Class FormatManager | Archivist API Reference",
    "keywords": "Class FormatManager Namespace Archivist Assembly Archivist.dll Represents a manager for handling different file formats. public class FormatManager Inheritance object FormatManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FormatManager(IEnumerable<IFormat>?) Initializes a new instance of the FormatManager class. public FormatManager(IEnumerable<IFormat>? formats) Parameters formats IEnumerable<IFormat> The collection of formats to be managed."
  },
  "api/Archivist.Formats.Delimited.DelimitedFormat.html": {
    "href": "api/Archivist.Formats.Delimited.DelimitedFormat.html",
    "title": "Class DelimitedFormat | Archivist API Reference",
    "keywords": "Class DelimitedFormat Namespace Archivist.Formats.Delimited Assembly Archivist.dll Delimited file format public class DelimitedFormat : FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>, IFormat Inheritance object FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter> DelimitedFormat Implements IFormat Inherited Members FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.DisplayName FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.Extensions FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.HeaderInfo FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.MimeTypes FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.Order FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.Reader FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.Writer FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.CanRead(string) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.CanRead(Stream) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.CanWrite(string) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.CanWrite(IGenericFile) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.ReadAsync(Stream) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DelimitedFormat(IOptions<DelimitedOptions>?) Initializes a new instance of the DelimitedFormat class. public DelimitedFormat(IOptions<DelimitedOptions>? options) Parameters options IOptions<DelimitedOptions> Properties Extensions Gets the extensions associated with the format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the content types. public override string[] MimeTypes { get; } Property Value string[] The content types. See Also FormatBaseClass<TFormat, TFileReader, TFileWriter>"
  },
  "api/Archivist.Formats.Delimited.DelimitedReader.html": {
    "href": "api/Archivist.Formats.Delimited.DelimitedReader.html",
    "title": "Class DelimitedReader | Archivist API Reference",
    "keywords": "Class DelimitedReader Namespace Archivist.Formats.Delimited Assembly Archivist.dll Delimited file reader public class DelimitedReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass DelimitedReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DelimitedReader(DelimitedOptions) Initializes a new instance of the DelimitedReader class. public DelimitedReader(DelimitedOptions options) Parameters options DelimitedOptions Properties HeaderInfo Gets the header information. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream. Returns Task<IGenericFile> The table read from the stream See Also ReaderBaseClass"
  },
  "api/Archivist.Formats.Delimited.DelimitedWriter.html": {
    "href": "api/Archivist.Formats.Delimited.DelimitedWriter.html",
    "title": "Class DelimitedWriter | Archivist API Reference",
    "keywords": "Class DelimitedWriter Namespace Archivist.Formats.Delimited Assembly Archivist.dll Delimited file writer public class DelimitedWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass DelimitedWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DelimitedWriter(DelimitedOptions) Initializes a new instance of the DelimitedWriter class. public DelimitedWriter(DelimitedOptions options) Parameters options DelimitedOptions The options for the delimited writer. Methods WriteAsync(IGenericFile?, Stream?) Writes the content of the file to the specified stream asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to write. stream Stream The stream to write to. Returns Task<bool> A task representing the asynchronous write operation. The task result is true if the write operation is successful; otherwise, false. See Also WriterBaseClass"
  },
  "api/Archivist.Formats.Delimited.html": {
    "href": "api/Archivist.Formats.Delimited.html",
    "title": "Namespace Archivist.Formats.Delimited | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.Delimited Classes DelimitedFormat Delimited file format DelimitedReader Delimited file reader DelimitedWriter Delimited file writer"
  },
  "api/Archivist.Formats.Excel.ExcelFormat.html": {
    "href": "api/Archivist.Formats.Excel.ExcelFormat.html",
    "title": "Class ExcelFormat | Archivist API Reference",
    "keywords": "Class ExcelFormat Namespace Archivist.Formats.Excel Assembly Archivist.dll Represents the Excel format in the Archivist library. public class ExcelFormat : FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>, IFormat Inheritance object FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter> ExcelFormat Implements IFormat Inherited Members FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.DisplayName FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.Extensions FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.HeaderInfo FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.MimeTypes FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.Order FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.Reader FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.Writer FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.CanRead(string) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.CanRead(Stream) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.CanWrite(string) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.CanWrite(IGenericFile) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.ReadAsync(Stream) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExcelFormat(IOptions<ExcelOptions>?) Initializes a new instance of the ExcelFormat class. public ExcelFormat(IOptions<ExcelOptions>? options) Parameters options IOptions<ExcelOptions> Properties Extensions Gets the file extensions associated with the Excel format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the Excel format. public override string[] MimeTypes { get; } Property Value string[] See Also FormatBaseClass<TFormat, TFileReader, TFileWriter>"
  },
  "api/Archivist.Formats.Excel.ExcelReader.html": {
    "href": "api/Archivist.Formats.Excel.ExcelReader.html",
    "title": "Class ExcelReader | Archivist API Reference",
    "keywords": "Class ExcelReader Namespace Archivist.Formats.Excel Assembly Archivist.dll Represents a reader for Excel files. public class ExcelReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass ExcelReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExcelReader(ExcelOptions) Initializes a new instance of the ExcelReader class. public ExcelReader(ExcelOptions options) Parameters options ExcelOptions The Excel options. Properties HeaderInfo Gets the header information for Excel files. public override byte[] HeaderInfo { get; } Property Value byte[] Options Gets the Excel options. public ExcelOptions Options { get; } Property Value ExcelOptions Methods InternalCanRead(Stream?) Determines if the reader can read the given stream as an Excel file. public override bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool True if the reader can read the file, false otherwise. ReadAsync(Stream?) Reads the Excel file asynchronously and returns the data as a generic file. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result is the generic file data. See Also ReaderBaseClass"
  },
  "api/Archivist.Formats.Excel.ExcelWriter.html": {
    "href": "api/Archivist.Formats.Excel.ExcelWriter.html",
    "title": "Class ExcelWriter | Archivist API Reference",
    "keywords": "Class ExcelWriter Namespace Archivist.Formats.Excel Assembly Archivist.dll Writes an Excel file. public class ExcelWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass ExcelWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExcelWriter() Initializes a new instance of the ExcelWriter class. public ExcelWriter() Methods WriteAsync(IGenericFile?, Stream?) Writes the file to the stream public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file object to write. stream Stream The stream to write to. Returns Task<bool> True if it is written succesfully, false otherwise. See Also WriterBaseClass"
  },
  "api/Archivist.Formats.Excel.html": {
    "href": "api/Archivist.Formats.Excel.html",
    "title": "Namespace Archivist.Formats.Excel | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.Excel Classes ExcelFormat Represents the Excel format in the Archivist library. ExcelReader Represents a reader for Excel files. ExcelWriter Writes an Excel file."
  },
  "api/Archivist.Formats.FixedLength.FixedLengthWriter.html": {
    "href": "api/Archivist.Formats.FixedLength.FixedLengthWriter.html",
    "title": "Class FixedLengthWriter | Archivist API Reference",
    "keywords": "Class FixedLengthWriter Namespace Archivist.Formats.FixedLength Assembly Archivist.dll Represents a writer for fixed-length files. public class FixedLengthWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass FixedLengthWriter Implements IFormatWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanWrite(IGenericFile?) Determines if the writer can write the specified file. public override bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to be written. Returns bool true if the writer can write the file; otherwise, false. WriteAsync(IGenericFile?, Stream?) Writes the specified file to the provided stream asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file to. Returns Task<bool> true if the file was written successfully; otherwise, false."
  },
  "api/Archivist.Formats.FixedLength.html": {
    "href": "api/Archivist.Formats.FixedLength.html",
    "title": "Namespace Archivist.Formats.FixedLength | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.FixedLength Classes FixedLengthWriter Represents a writer for fixed-length files."
  },
  "api/Archivist.Formats.JSON.JsonFormat.html": {
    "href": "api/Archivist.Formats.JSON.JsonFormat.html",
    "title": "Class JsonFormat | Archivist API Reference",
    "keywords": "Class JsonFormat Namespace Archivist.Formats.JSON Assembly Archivist.dll Represents the JSON format. public class JsonFormat : FormatBaseClass<JsonFormat, JsonReader, JsonWriter>, IFormat Inheritance object FormatBaseClass<JsonFormat, JsonReader, JsonWriter> JsonFormat Implements IFormat Inherited Members FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.DisplayName FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.Extensions FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.HeaderInfo FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.MimeTypes FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.Order FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.Reader FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.Writer FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.CanRead(string) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.CanRead(Stream) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.CanWrite(string) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.CanWrite(IGenericFile) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.ReadAsync(Stream) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonFormat(JsonSerializerOptions?) Initializes a new instance of the JsonFormat class. public JsonFormat(JsonSerializerOptions? options) Parameters options JsonSerializerOptions Properties Extensions Gets the file extensions associated with the JSON format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the Excel format. public override string[] MimeTypes { get; } Property Value string[] See Also FormatBaseClass<TFormat, TFileReader, TFileWriter>"
  },
  "api/Archivist.Formats.JSON.JsonReader.html": {
    "href": "api/Archivist.Formats.JSON.JsonReader.html",
    "title": "Class JsonReader | Archivist API Reference",
    "keywords": "Class JsonReader Namespace Archivist.Formats.JSON Assembly Archivist.dll Represents a reader for JSON files. public class JsonReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass JsonReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonReader(JsonSerializerOptions?) Initializes a new instance of the JsonReader class. public JsonReader(JsonSerializerOptions? options) Parameters options JsonSerializerOptions The options to use when deserializing JSON. Properties HeaderInfo Gets the header information for the JSON format. public override byte[] HeaderInfo { get; } Property Value byte[] Methods InternalCanRead(Stream?) Determines if the reader can read the specified stream. public override bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the stream; otherwise, false. ReadAsync(Stream?) Reads a JSON file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the JSON file from. Returns Task<IGenericFile> The parsed JSON file."
  },
  "api/Archivist.Formats.JSON.JsonWriter.html": {
    "href": "api/Archivist.Formats.JSON.JsonWriter.html",
    "title": "Class JsonWriter | Archivist API Reference",
    "keywords": "Class JsonWriter Namespace Archivist.Formats.JSON Assembly Archivist.dll Represents a JSON writer for serializing structured objects. public class JsonWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass JsonWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonWriter(JsonSerializerOptions?) Initializes a new instance of the JsonWriter class. public JsonWriter(JsonSerializerOptions? options) Parameters options JsonSerializerOptions The options to use when serializing JSON. Methods WriteAsync(IGenericFile?, Stream?) Writes the structured object to the specified stream as JSON. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The structured object to write. stream Stream The stream to write the JSON to. Returns Task<bool> A task representing the asynchronous operation. The task result is a boolean indicating whether the write operation was successful."
  },
  "api/Archivist.Formats.JSON.html": {
    "href": "api/Archivist.Formats.JSON.html",
    "title": "Namespace Archivist.Formats.JSON | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.JSON Classes JsonFormat Represents the JSON format. JsonReader Represents a reader for JSON files. JsonWriter Represents a JSON writer for serializing structured objects."
  },
  "api/Archivist.Formats.Txt.TextFormat.html": {
    "href": "api/Archivist.Formats.Txt.TextFormat.html",
    "title": "Class TextFormat | Archivist API Reference",
    "keywords": "Class TextFormat Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text format for archiving. public class TextFormat : FormatBaseClass<TextFormat, TextReader, TextWriter>, IFormat Inheritance object FormatBaseClass<TextFormat, TextReader, TextWriter> TextFormat Implements IFormat Inherited Members FormatBaseClass<TextFormat, TextReader, TextWriter>.DisplayName FormatBaseClass<TextFormat, TextReader, TextWriter>.Extensions FormatBaseClass<TextFormat, TextReader, TextWriter>.HeaderInfo FormatBaseClass<TextFormat, TextReader, TextWriter>.MimeTypes FormatBaseClass<TextFormat, TextReader, TextWriter>.Order FormatBaseClass<TextFormat, TextReader, TextWriter>.Reader FormatBaseClass<TextFormat, TextReader, TextWriter>.Writer FormatBaseClass<TextFormat, TextReader, TextWriter>.CanRead(string) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanRead(Stream) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanWrite(string) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanWrite(IGenericFile) FormatBaseClass<TextFormat, TextReader, TextWriter>.ReadAsync(Stream) FormatBaseClass<TextFormat, TextReader, TextWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextFormat() Initializes a new instance of the TextFormat class. public TextFormat() Properties Extensions Gets the file extensions associated with the text format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the text format. public override string[] MimeTypes { get; } Property Value string[] Order Text format is format of last resort. public override int Order { get; } Property Value int"
  },
  "api/Archivist.Formats.Txt.TextReader.html": {
    "href": "api/Archivist.Formats.Txt.TextReader.html",
    "title": "Class TextReader | Archivist API Reference",
    "keywords": "Class TextReader Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text reader for reading text files. public class TextReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass TextReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderInfo Gets the header information of the text file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads the text file asynchronously. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the text file from. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result contains the generic file representation of the text file."
  },
  "api/Archivist.Formats.Txt.TextWriter.html": {
    "href": "api/Archivist.Formats.Txt.TextWriter.html",
    "title": "Class TextWriter | Archivist API Reference",
    "keywords": "Class TextWriter Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text writer for the Txt format. public class TextWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass TextWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the content of the specified file to the provided stream asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file content to. Returns Task<bool> True if the file was written successfully; otherwise, false."
  },
  "api/Archivist.Formats.Txt.html": {
    "href": "api/Archivist.Formats.Txt.html",
    "title": "Namespace Archivist.Formats.Txt | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.Txt Classes TextFormat Represents a text format for archiving. TextReader Represents a text reader for reading text files. TextWriter Represents a text writer for the Txt format."
  },
  "api/Archivist.Formats.VCard.VCardFormat.html": {
    "href": "api/Archivist.Formats.VCard.VCardFormat.html",
    "title": "Class VCardFormat | Archivist API Reference",
    "keywords": "Class VCardFormat Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a VCard format for storing contact information. public class VCardFormat : FormatBaseClass<VCardFormat, VCardReader, VCardWriter>, IFormat Inheritance object FormatBaseClass<VCardFormat, VCardReader, VCardWriter> VCardFormat Implements IFormat Inherited Members FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.DisplayName FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Extensions FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.HeaderInfo FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.MimeTypes FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Order FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Reader FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Writer FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanRead(string) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanRead(Stream) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanWrite(string) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanWrite(IGenericFile) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.ReadAsync(Stream) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VCardFormat() Initializes a new instance of the VCardFormat class. public VCardFormat() Properties Extensions Gets the file extensions associated with the VCard format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the VCard format. public override string[] MimeTypes { get; } Property Value string[]"
  },
  "api/Archivist.Formats.VCard.VCardReader.html": {
    "href": "api/Archivist.Formats.VCard.VCardReader.html",
    "title": "Class VCardReader | Archivist API Reference",
    "keywords": "Class VCardReader Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a reader for VCard files. public class VCardReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass VCardReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderInfo Gets the header information of the VCard file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads a VCard file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the VCard file from. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result contains the parsed VCard file."
  },
  "api/Archivist.Formats.VCard.VCardWriter.html": {
    "href": "api/Archivist.Formats.VCard.VCardWriter.html",
    "title": "Class VCardWriter | Archivist API Reference",
    "keywords": "Class VCardWriter Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a writer for VCard files. public class VCardWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass VCardWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the VCard file asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The IGenericFile object representing the VCard file. stream Stream The Stream object to write the VCard file to. Returns Task<bool> A task representing the asynchronous write operation. The task result is a boolean value indicating whether the write operation was successful."
  },
  "api/Archivist.Formats.VCard.html": {
    "href": "api/Archivist.Formats.VCard.html",
    "title": "Namespace Archivist.Formats.VCard | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.VCard Classes VCardFormat Represents a VCard format for storing contact information. VCardReader Represents a reader for VCard files. VCardWriter Represents a writer for VCard files."
  },
  "api/Archivist.Interfaces.IFormat.html": {
    "href": "api/Archivist.Interfaces.IFormat.html",
    "title": "Interface IFormat | Archivist API Reference",
    "keywords": "Interface IFormat Namespace Archivist.Interfaces Assembly Archivist.dll Represents a file format. public interface IFormat Properties DisplayName Gets the display name of this file format. string DisplayName { get; } Property Value string Extensions Gets the file extensions associated with this file format. string[] Extensions { get; } Property Value string[] HeaderInfo Gets the header information of this file format. byte[] HeaderInfo { get; } Property Value byte[] MimeTypes Gets the content types supported by this file format. string[] MimeTypes { get; } Property Value string[] Order Gets the order that the file format should be checked. The lower the value, the higher the priority. Note that the order is only relevant when multiple file formats have the same HeaderInfo length. The system uses HeaderInfo to determine the order to check first, with longer headers checked first. int Order { get; } Property Value int Methods CanRead(Stream?) Determines whether this file format can read the specified stream. bool CanRead(Stream? stream) Parameters stream Stream The stream to check. Returns bool true if this file format can read the specified stream; otherwise, false. CanRead(string?) Determines whether this file format can read the specified file. bool CanRead(string? fileName) Parameters fileName string The name of the file to check. Returns bool true if this file format can read the specified file; otherwise, false. CanWrite(IGenericFile?) Determines whether this file format can write the specified file. bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to check. Returns bool true if this file format can write the specified file; otherwise, false. CanWrite(string?) Determines whether this file format can write the specified file. bool CanWrite(string? fileName) Parameters fileName string The name of the file to check. Returns bool true if this file format can write the specified file; otherwise, false. ReadAsync(Stream?) Asynchronously reads the specified stream and returns an instance of IGenericFile. Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous operation. The task result contains an instance of IGenericFile. WriteAsync(Stream?, IGenericFile?) Asynchronously writes the specified IGenericFile to the specified stream. Task<bool> WriteAsync(Stream? writer, IGenericFile? file) Parameters writer Stream The stream to write to. file IGenericFile The file to write. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean value indicating whether the write operation is successful."
  },
  "api/Archivist.Interfaces.IFormatReader.html": {
    "href": "api/Archivist.Interfaces.IFormatReader.html",
    "title": "Interface IFormatReader | Archivist API Reference",
    "keywords": "Interface IFormatReader Namespace Archivist.Interfaces Assembly Archivist.dll Represents a format reader. public interface IFormatReader Properties HeaderInfo Gets the header information of the format. byte[] HeaderInfo { get; } Property Value byte[] Methods CanRead(Stream?) Determines whether the format reader can read the specified stream. bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the format reader can read the stream; otherwise, false. ReadAsync(Stream?) Asynchronously reads the specified stream and returns the generic file. Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous operation. The task result contains the generic file read from the stream."
  },
  "api/Archivist.Interfaces.IFormatWriter.html": {
    "href": "api/Archivist.Interfaces.IFormatWriter.html",
    "title": "Interface IFormatWriter | Archivist API Reference",
    "keywords": "Interface IFormatWriter Namespace Archivist.Interfaces Assembly Archivist.dll Represents a format writer. public interface IFormatWriter Methods CanWrite(IGenericFile?) Determines whether the format writer can write the specified file. bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to write. Returns bool true if the format writer can write the file; otherwise, false. WriteAsync(IGenericFile?, Stream?) Asynchronously writes the specified file to the stream. Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to write. stream Stream The stream to write to. Returns Task<bool> A task that represents the asynchronous operation."
  },
  "api/Archivist.Interfaces.IGenericFile.html": {
    "href": "api/Archivist.Interfaces.IGenericFile.html",
    "title": "Interface IGenericFile | Archivist API Reference",
    "keywords": "Interface IGenericFile Namespace Archivist.Interfaces Assembly Archivist.dll Represents a generic file. public interface IGenericFile Properties Metadata Gets or sets the metadata associated with the file. Dictionary<string, string> Metadata { get; } Property Value Dictionary<string, string> Title Gets or sets the title of the file. string? Title { get; set; } Property Value string Methods GetContent() Gets the content of the file. string? GetContent() Returns string The content of the file. ToFileType<TFile>() Sets the content of the file in the specified format. TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The content of the file in the specified format. Type Parameters TFile"
  },
  "api/Archivist.Interfaces.IListConvertable.html": {
    "href": "api/Archivist.Interfaces.IListConvertable.html",
    "title": "Interface IListConvertable | Archivist API Reference",
    "keywords": "Interface IListConvertable Namespace Archivist.Interfaces Assembly Archivist.dll Represents a list convertable object. public interface IListConvertable Methods ConvertFrom<TObject>(List<TObject?>) Imports the list into the current object. void ConvertFrom<TObject>(List<TObject?> obj) Parameters obj List<TObject> The list to import. Type Parameters TObject Type of the object importing. ConvertTo<TObject>() Converts the object to a list of the specified type. List<TObject?> ConvertTo<TObject>() Returns List<TObject> The resulting list. Type Parameters TObject The type of the object."
  },
  "api/Archivist.Interfaces.IObjectConvertable.html": {
    "href": "api/Archivist.Interfaces.IObjectConvertable.html",
    "title": "Interface IObjectConvertable | Archivist API Reference",
    "keywords": "Interface IObjectConvertable Namespace Archivist.Interfaces Assembly Archivist.dll Represents an object that can be converted to another type. public interface IObjectConvertable Methods ConvertFrom<TObject>(TObject) Imports the object into the current object. void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to import. Type Parameters TObject Type of the object importing. ConvertTo<TObject>() Converts the object to the specified type. TObject? ConvertTo<TObject>() Returns TObject The resulting object. Type Parameters TObject The type of the object."
  },
  "api/Archivist.Interfaces.html": {
    "href": "api/Archivist.Interfaces.html",
    "title": "Namespace Archivist.Interfaces | Archivist API Reference",
    "keywords": "Namespace Archivist.Interfaces Interfaces IFormat Represents a file format. IFormatReader Represents a format reader. IFormatWriter Represents a format writer. IGenericFile Represents a generic file. IListConvertable Represents a list convertable object. IObjectConvertable Represents an object that can be converted to another type."
  },
  "api/Archivist.Options.DelimitedOptions.html": {
    "href": "api/Archivist.Options.DelimitedOptions.html",
    "title": "Class DelimitedOptions | Archivist API Reference",
    "keywords": "Class DelimitedOptions Namespace Archivist.Options Assembly Archivist.dll Represents the options for handling delimited data. public class DelimitedOptions Inheritance object DelimitedOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Default The default delimited options if none are specified. public static DelimitedOptions Default { get; } Property Value DelimitedOptions DefaultSeparator Gets or sets the default separator used to delimit the data. public string? DefaultSeparator { get; set; } Property Value string FirstRowIsColumnHeaders Gets or sets a value indicating whether the first row of the data is treated as column headers. public bool FirstRowIsColumnHeaders { get; set; } Property Value bool Quote Gets or sets the quote character to use (use an empty string is quotes are not desired). public string? Quote { get; set; } Property Value string"
  },
  "api/Archivist.Options.ExcelOptions.html": {
    "href": "api/Archivist.Options.ExcelOptions.html",
    "title": "Class ExcelOptions | Archivist API Reference",
    "keywords": "Class ExcelOptions Namespace Archivist.Options Assembly Archivist.dll Represents the options for Excel files. public class ExcelOptions Inheritance object ExcelOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Default Gets the default Excel options. public static ExcelOptions Default { get; } Property Value ExcelOptions FirstRowIsColumnHeaders Gets or sets a value indicating whether the first row in the Excel file is treated as column headers. public bool FirstRowIsColumnHeaders { get; set; } Property Value bool"
  },
  "api/Archivist.Options.html": {
    "href": "api/Archivist.Options.html",
    "title": "Namespace Archivist.Options | Archivist API Reference",
    "keywords": "Namespace Archivist.Options Classes DelimitedOptions Represents the options for handling delimited data. ExcelOptions Represents the options for Excel files."
  },
  "api/Archivist.html": {
    "href": "api/Archivist.html",
    "title": "Namespace Archivist | Archivist API Reference",
    "keywords": "Namespace Archivist Classes FormatManager Represents a manager for handling different file formats."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Archivist API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Archivist API Reference",
    "keywords": "Code namespace Archivist.Example { internal static class Program { private static void Main(string[] args) => Console.WriteLine(\"Hello, World!\"); } } Output"
  },
  "index.html": {
    "href": "index.html",
    "title": "Archivist | Archivist API Reference",
    "keywords": "Archivist Archivist is a C# open-source library designed to simplify file loading tasks by providing a unified interface for accessing files of various formats."
  }
}