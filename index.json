{
  "api/Archivist.BaseClasses.FileBaseClass-1.html": {
    "href": "api/Archivist.BaseClasses.FileBaseClass-1.html",
    "title": "Class FileBaseClass<TFileType> | Archivist API Reference",
    "keywords": "Class FileBaseClass<TFileType> Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for file types in the Archivist library. public abstract class FileBaseClass<TFileType> : IGenericFile where TFileType : FileBaseClass<TFileType> Type Parameters TFileType The specific file type derived from this base class. Inheritance object FileBaseClass<TFileType> Implements IGenericFile Derived Calendar Card Feed FixedLengthFile Image StructuredObject Table Tables Text Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FileBaseClass(Convertinator?) Initializes a new instance of the FileBaseClass class. protected FileBaseClass(Convertinator? converter) Parameters converter Convertinator The type converter. Properties Converter Gets the type converter. protected Convertinator? Converter { get; } Property Value Convertinator Metadata Gets or sets the metadata associated with the file. public Dictionary<string, string> Metadata { get; } Property Value Dictionary<string, string> Title Gets or sets the title of the file. public string? Title { get; set; } Property Value string Methods CompareTo(object?) Compares the file object to another object. public int CompareTo(object? obj) Parameters obj object The object to compare to. Returns int 0 if the objects are equal, -1 if this is smaller, 1 if it is larger. CompareTo(TFileType?) Compares the file object to another file object. public abstract int CompareTo(TFileType? other) Parameters other TFileType The file object to compare to. Returns int 0 if the file objects are equal, -1 if this is smaller, 1 if it is larger. Equals(object?) Determines if the file object is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare to. Returns bool True if the file objects are equal, false otherwise. Equals(TFileType?) Determines if the file object is equal to another file object. public abstract bool Equals(TFileType? other) Parameters other TFileType The file object to compare to. Returns bool True if the file objects are equal, false otherwise. GetContent() Gets the content of the file. public abstract string? GetContent() Returns string The content of the file. GetHashCode() Gets the hash code for the file object. public override int GetHashCode() Returns int The hash code for the file object. ToFileType<TFile>() Converts the file object to a specific file type. public virtual TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The converted file object. Type Parameters TFile The file type to convert to. ToString() Converts the file object to a string. public override string ToString() Returns string The content of the file object. Operators operator ==(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the two file objects are equal. public static bool operator ==(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the file objects are equal, false otherwise. operator >(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is greater than the second file object. public static bool operator >(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is greater than the second file object, false otherwise. operator >=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is greater than or equal to the second file object. public static bool operator >=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is greater than or equal to the second file object, false otherwise. operator !=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the two file objects are not equal. public static bool operator !=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the file objects are not equal, false otherwise. operator <(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is less than the second file object. public static bool operator <(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is less than the second file object, false otherwise. operator <=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is less than or equal to the second file object. public static bool operator <=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is less than or equal to the second file object, false otherwise."
  },
  "api/Archivist.BaseClasses.FixedLengthFormatBaseClass-2.html": {
    "href": "api/Archivist.BaseClasses.FixedLengthFormatBaseClass-2.html",
    "title": "Class FixedLengthFormatBaseClass<TFormat, TFileReader> | Archivist API Reference",
    "keywords": "Class FixedLengthFormatBaseClass<TFormat, TFileReader> Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for fixed-length format classes. public abstract class FixedLengthFormatBaseClass<TFormat, TFileReader> : FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>, IFormat where TFormat : FixedLengthFormatBaseClass<TFormat, TFileReader> where TFileReader : IFormatReader Type Parameters TFormat The type of the derived fixed-length format class. TFileReader The type of the file reader. Inheritance object FormatBaseClass<TFormat, TFileReader, FixedLengthWriter> FixedLengthFormatBaseClass<TFormat, TFileReader> Implements IFormat Inherited Members FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.DisplayName FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.Extensions FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.HeaderInfo FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.MimeTypes FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.Order FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.Reader FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.Writer FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.CanRead(string) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.CanRead(Stream) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.CanWrite(string) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.CanWrite(IGenericFile) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.ReadAsync(Stream) FormatBaseClass<TFormat, TFileReader, FixedLengthWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FixedLengthFormatBaseClass(TFileReader) Initializes a new instance of the FixedLengthFormatBaseClass<TFormat, TFileReader> class. protected FixedLengthFormatBaseClass(TFileReader reader) Parameters reader TFileReader The file reader."
  },
  "api/Archivist.BaseClasses.FormatBaseClass-3.html": {
    "href": "api/Archivist.BaseClasses.FormatBaseClass-3.html",
    "title": "Class FormatBaseClass<TFormat, TFileReader, TFileWriter> | Archivist API Reference",
    "keywords": "Class FormatBaseClass<TFormat, TFileReader, TFileWriter> Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for file formats. public abstract class FormatBaseClass<TFormat, TFileReader, TFileWriter> : IFormat where TFormat : FormatBaseClass<TFormat, TFileReader, TFileWriter> where TFileReader : IFormatReader where TFileWriter : IFormatWriter Type Parameters TFormat The derived format class. TFileReader The file reader class. TFileWriter The file writer class. Inheritance object FormatBaseClass<TFormat, TFileReader, TFileWriter> Implements IFormat Derived FixedLengthFormatBaseClass<TFormat, TFileReader> DelimitedFormat ExcelFormat ICalFormat ImageFormat JsonFormat RSSFormat TextFormat VCardFormat XMLFormat YAMLFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FormatBaseClass(TFileReader, TFileWriter) Initializes a new instance of the FormatBaseClass<TFormat, TFileReader, TFileWriter> class. protected FormatBaseClass(TFileReader reader, TFileWriter writer) Parameters reader TFileReader The file reader instance. writer TFileWriter The file writer instance. Properties DisplayName Gets the display name of the format. public virtual string DisplayName { get; } Property Value string Extensions Gets the file extensions associated with the format. public abstract string[] Extensions { get; } Property Value string[] HeaderInfo Gets the header information of the format. public byte[] HeaderInfo { get; } Property Value byte[] MimeTypes Gets the content types supported by the format. public abstract string[] MimeTypes { get; } Property Value string[] Order Gets the order that the file format should be checked. The lower the value, the higher the priority. Note that the order is only relevant when multiple file formats have the same HeaderInfo length. The system uses HeaderInfo to determine the order to check first, with longer headers checked first. public virtual int Order { get; } Property Value int Reader Gets the file reader instance. protected TFileReader Reader { get; } Property Value TFileReader Writer Gets the file writer instance. protected TFileWriter Writer { get; } Property Value TFileWriter Methods CanRead(Stream?) Determines whether the format can read the specified stream. public bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the format can read the stream; otherwise, false. CanRead(string?) Determines whether the format can read the specified file. public bool CanRead(string? fileName) Parameters fileName string The name of the file. Returns bool true if the format can read the file; otherwise, false. CanWrite(IGenericFile?) Determines whether the format can write the specified file. public bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to write. Returns bool true if the format can write the file; otherwise, false. CanWrite(string?) Determines whether the format can write the specified file. public bool CanWrite(string? fileName) Parameters fileName string The name of the file. Returns bool true if the format can write the file; otherwise, false. ReadAsync(Stream?) Reads the file asynchronously from the specified stream. public Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous read operation. The task result contains the generic file. WriteAsync(Stream?, IGenericFile?) Writes the file asynchronously to the specified stream. public Task<bool> WriteAsync(Stream? writer, IGenericFile? file) Parameters writer Stream The stream to write. file IGenericFile The file to write. Returns Task<bool> A task that represents the asynchronous write operation. The task result contains a value indicating whether the write operation was successful. See Also IFormat"
  },
  "api/Archivist.BaseClasses.ReaderBaseClass.html": {
    "href": "api/Archivist.BaseClasses.ReaderBaseClass.html",
    "title": "Class ReaderBaseClass | Archivist API Reference",
    "keywords": "Class ReaderBaseClass Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for format readers. public abstract class ReaderBaseClass : IFormatReader Inheritance object ReaderBaseClass Implements IFormatReader Derived DelimitedReader ExcelReader ICalReader ImageReader JsonReader RSSReader TextReader VCardReader XMLReader YAMLReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderInfo Gets the header information for the format. public abstract byte[] HeaderInfo { get; } Property Value byte[] Methods CanRead(Stream?) Determines whether the reader can read the specified stream. public bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the stream; otherwise, false. InternalCanRead(Stream?) Used to determine if a reader can actually read the file. public virtual bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the file; otherwise, false. IsValidStream(Stream?) Validates if the provided stream is readable, has a non-zero length, and supports seeking. protected static bool IsValidStream(Stream? stream) Parameters stream Stream The stream to validate. Returns bool true if the stream is valid; otherwise, false. ReadAsync(Stream?) Reads the file asynchronously. public abstract Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task representing the asynchronous operation that returns the generic file. See Also IFormatReader"
  },
  "api/Archivist.BaseClasses.WriterBaseClass.html": {
    "href": "api/Archivist.BaseClasses.WriterBaseClass.html",
    "title": "Class WriterBaseClass | Archivist API Reference",
    "keywords": "Class WriterBaseClass Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for format writers. public abstract class WriterBaseClass : IFormatWriter Inheritance object WriterBaseClass Implements IFormatWriter Derived DelimitedWriter ExcelWriter FixedLengthWriter ICalWriter ImageWriter JsonWriter RSSWriter TextWriter VCardWriter XMLWriter YAMLWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanWrite(IGenericFile?) Determines if the writer can write the specified file. public virtual bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to be written. Returns bool true if the writer can write the file; otherwise, false. WriteAsync(IGenericFile?, Stream?) Writes the specified file to the provided stream asynchronously. public abstract Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file to. Returns Task<bool> A task representing the asynchronous write operation. The task result is true if the write operation is successful; otherwise, false."
  },
  "api/Archivist.BaseClasses.html": {
    "href": "api/Archivist.BaseClasses.html",
    "title": "Namespace Archivist.BaseClasses | Archivist API Reference",
    "keywords": "Namespace Archivist.BaseClasses Classes FileBaseClass<TFileType> Base class for file types in the Archivist library. FixedLengthFormatBaseClass<TFormat, TFileReader> Base class for fixed-length format classes. FormatBaseClass<TFormat, TFileReader, TFileWriter> Base class for file formats. ReaderBaseClass Base class for format readers. WriterBaseClass Base class for format writers."
  },
  "api/Archivist.Converters.AnythingToImageConverter.html": {
    "href": "api/Archivist.Converters.AnythingToImageConverter.html",
    "title": "Class AnythingToImageConverter | Archivist API Reference",
    "keywords": "Class AnythingToImageConverter Namespace Archivist.Converters Assembly Archivist.dll Converts any object to Image type. public class AnythingToImageConverter : IDataConverter Inheritance object AnythingToImageConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the converter can convert from the specified source type to the specified destination type. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool true if the converter can convert the types; otherwise, false. Convert(IGenericFile?) Converts the specified IGenericFile object to Image. public static Image? Convert(IGenericFile? file) Parameters file IGenericFile The IGenericFile object to convert. Returns Image The converted Image object. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.AnythingToTextConverter.html": {
    "href": "api/Archivist.Converters.AnythingToTextConverter.html",
    "title": "Class AnythingToTextConverter | Archivist API Reference",
    "keywords": "Class AnythingToTextConverter Namespace Archivist.Converters Assembly Archivist.dll Converts any object to Text type. public class AnythingToTextConverter : IDataConverter Inheritance object AnythingToTextConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the converter can convert from the specified source type to the specified destination type. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool true if the converter can convert the types; otherwise, false. Convert(IGenericFile?) Converts the specified IGenericFile object to Text. public static Text? Convert(IGenericFile? file) Parameters file IGenericFile The IGenericFile object to convert. Returns Text The converted Text object. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.CalendarToCardConverter.html": {
    "href": "api/Archivist.Converters.CalendarToCardConverter.html",
    "title": "Class CalendarToCardConverter | Archivist API Reference",
    "keywords": "Class CalendarToCardConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a CalendarComponent object to a Card object. public class CalendarToCardConverter : IDataConverter Inheritance object CalendarToCardConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines whether this converter can convert from the specified source type to the specified destination type. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool true if this converter can convert from the specified source type to the specified destination type; otherwise, false. Convert(Calendar?) Converts a CalendarComponent object to a Card object. public static Card? Convert(Calendar? file) Parameters file Calendar The CalendarComponent object to convert. Returns Card The converted Card object. Convert(object?, Type?) Converts the specified object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.CalendarToFeedConverter.html": {
    "href": "api/Archivist.Converters.CalendarToFeedConverter.html",
    "title": "Class CalendarToFeedConverter | Archivist API Reference",
    "keywords": "Class CalendarToFeedConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a CalendarComponent object to a Feed object. public class CalendarToFeedConverter : IDataConverter Inheritance object CalendarToFeedConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines whether this converter can convert from the specified source type to the specified destination type. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool true if this converter can convert from the specified source type to the specified destination type; otherwise, false. Convert(Calendar?) Converts a CalendarComponent object to a Feed object. public static Feed? Convert(Calendar? file) Parameters file Calendar The CalendarComponent object to convert. Returns Feed The converted Feed object. Convert(object?, Type?) Converts the specified object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.CalendarToStructuredObjectConverter.html": {
    "href": "api/Archivist.Converters.CalendarToStructuredObjectConverter.html",
    "title": "Class CalendarToStructuredObjectConverter | Archivist API Reference",
    "keywords": "Class CalendarToStructuredObjectConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Calendar object to a StructuredObject object. public class CalendarToStructuredObjectConverter : IDataConverter Inheritance object CalendarToStructuredObjectConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Calendar?) Converts a Calendar object to a StructuredObject object. public static StructuredObject? Convert(Calendar? file) Parameters file Calendar The Calendar object to convert. Returns StructuredObject The converted StructuredObject object. Convert(object?, Type?) Converts the source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.CalendarToTableConverter.html": {
    "href": "api/Archivist.Converters.CalendarToTableConverter.html",
    "title": "Class CalendarToTableConverter | Archivist API Reference",
    "keywords": "Class CalendarToTableConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Calendar object to a Table object. public class CalendarToTableConverter : IDataConverter Inheritance object CalendarToTableConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the converter can convert from the specified source type to the specified destination type. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Calendar?) Converts a Calendar object to a Table object. public static Table? Convert(Calendar? file) Parameters file Calendar The Calendar object to convert. Returns Table The converted Table object, or null if the Calendar object is null. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object, or null if the conversion is not possible."
  },
  "api/Archivist.Converters.CalendarToTablesConverter.html": {
    "href": "api/Archivist.Converters.CalendarToTablesConverter.html",
    "title": "Class CalendarToTablesConverter | Archivist API Reference",
    "keywords": "Class CalendarToTablesConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Calendar object to Tables object. public class CalendarToTablesConverter : IDataConverter Inheritance object CalendarToTablesConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Calendar?) Converts a Calendar object to Tables object. public static Tables? Convert(Calendar? file) Parameters file Calendar The Calendar object to convert. Returns Tables The converted Tables object. Convert(object?, Type?) Converts the specified object to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.CardToCalendarConverter.html": {
    "href": "api/Archivist.Converters.CardToCalendarConverter.html",
    "title": "Class CardToCalendarConverter | Archivist API Reference",
    "keywords": "Class CardToCalendarConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Card object to a Calendar object. public class CardToCalendarConverter : IDataConverter Inheritance object CardToCalendarConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Card?) Converts a Card object to a Calendar object. public static Calendar? Convert(Card? file) Parameters file Card The Card object to convert. Returns Calendar The converted Calendar object. Convert(object?, Type?) Converts an object from the source type to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.CardToFeedConverter.html": {
    "href": "api/Archivist.Converters.CardToFeedConverter.html",
    "title": "Class CardToFeedConverter | Archivist API Reference",
    "keywords": "Class CardToFeedConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Card object to a Feed object. public class CardToFeedConverter : IDataConverter Inheritance object CardToFeedConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Card?) Converts a Card object to a Feed object. public static Feed? Convert(Card? file) Parameters file Card The Card object to convert. Returns Feed The converted Feed object. Convert(object?, Type?) Converts an object from the source type to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.CardToStructuredObjectConverter.html": {
    "href": "api/Archivist.Converters.CardToStructuredObjectConverter.html",
    "title": "Class CardToStructuredObjectConverter | Archivist API Reference",
    "keywords": "Class CardToStructuredObjectConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Card object to a StructuredObject object. public class CardToStructuredObjectConverter : IDataConverter Inheritance object CardToStructuredObjectConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Card?) Converts a Card object to a StructuredObject object. public static StructuredObject? Convert(Card? file) Parameters file Card The Card object to convert. Returns StructuredObject The converted StructuredObject object. Convert(object?, Type?) Converts the source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.CardToTableConverter.html": {
    "href": "api/Archivist.Converters.CardToTableConverter.html",
    "title": "Class CardToTableConverter | Archivist API Reference",
    "keywords": "Class CardToTableConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Card object to a Table object. public class CardToTableConverter : IDataConverter Inheritance object CardToTableConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the converter can convert from the specified source type to the specified destination type. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Card?) Converts a Card object to a Table object. public static Table? Convert(Card? file) Parameters file Card The Card object to convert. Returns Table The converted Table object, or null if the Card object is null. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object, or null if the conversion is not possible."
  },
  "api/Archivist.Converters.CardToTablesConverter.html": {
    "href": "api/Archivist.Converters.CardToTablesConverter.html",
    "title": "Class CardToTablesConverter | Archivist API Reference",
    "keywords": "Class CardToTablesConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Card object to Tables object. public class CardToTablesConverter : IDataConverter Inheritance object CardToTablesConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Card?) Converts a Card object to Tables object. public static Tables? Convert(Card? file) Parameters file Card The Card object to convert. Returns Tables The converted Tables object. Convert(object?, Type?) Converts the specified object to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.Convertinator.html": {
    "href": "api/Archivist.Converters.Convertinator.html",
    "title": "Class Convertinator | Archivist API Reference",
    "keywords": "Class Convertinator Namespace Archivist.Converters Assembly Archivist.dll Converts data from one type to another using a collection of IDataConverter implementations. public class Convertinator Inheritance object Convertinator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Convertinator(IEnumerable<IDataConverter>?) Initializes a new instance of the Convertinator class. public Convertinator(IEnumerable<IDataConverter>? converters) Parameters converters IEnumerable<IDataConverter> The collection of IDataConverter implementations. Methods Convert(object?, Type?) Converts the given source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type to convert to. Returns object The converted object of the destination type."
  },
  "api/Archivist.Converters.FeedToCalendarConverter.html": {
    "href": "api/Archivist.Converters.FeedToCalendarConverter.html",
    "title": "Class FeedToCalendarConverter | Archivist API Reference",
    "keywords": "Class FeedToCalendarConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Feed object to a Calendar object. public class FeedToCalendarConverter : IDataConverter Inheritance object FeedToCalendarConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Feed?) Converts a Feed object to a Calendar object. public static Calendar? Convert(Feed? file) Parameters file Feed The Feed object to convert. Returns Calendar The converted Calendar object. Convert(object?, Type?) Converts an object from the source type to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.FeedToCardConverter.html": {
    "href": "api/Archivist.Converters.FeedToCardConverter.html",
    "title": "Class FeedToCardConverter | Archivist API Reference",
    "keywords": "Class FeedToCardConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Feed object to a Card object. public class FeedToCardConverter : IDataConverter Inheritance object FeedToCardConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines whether this converter can convert from the specified source type to the specified destination type. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool true if this converter can convert from the specified source type to the specified destination type; otherwise, false. Convert(Feed?) Converts a Feed object to a Card object. public static Card? Convert(Feed? file) Parameters file Feed The Feed object to convert. Returns Card The converted Card object. Convert(object?, Type?) Converts the specified object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.FeedToStructuredObjectConverter.html": {
    "href": "api/Archivist.Converters.FeedToStructuredObjectConverter.html",
    "title": "Class FeedToStructuredObjectConverter | Archivist API Reference",
    "keywords": "Class FeedToStructuredObjectConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Feed object to a StructuredObject object. public class FeedToStructuredObjectConverter : IDataConverter Inheritance object FeedToStructuredObjectConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Feed?) Converts a Feed object to a StructuredObject object. public static StructuredObject? Convert(Feed? file) Parameters file Feed The Feed object to convert. Returns StructuredObject The converted StructuredObject object. Convert(object?, Type?) Converts the source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.FeedToTableConverter.html": {
    "href": "api/Archivist.Converters.FeedToTableConverter.html",
    "title": "Class FeedToTableConverter | Archivist API Reference",
    "keywords": "Class FeedToTableConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Feed object to a Table object. public class FeedToTableConverter : IDataConverter Inheritance object FeedToTableConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the converter can convert from the specified source type to the specified destination type. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Feed?) Converts a Feed object to a Table object. public static Table? Convert(Feed? file) Parameters file Feed The Feed object to convert. Returns Table The converted Table object, or null if the Feed object is null. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object, or null if the conversion is not possible."
  },
  "api/Archivist.Converters.FeedToTablesConverter.html": {
    "href": "api/Archivist.Converters.FeedToTablesConverter.html",
    "title": "Class FeedToTablesConverter | Archivist API Reference",
    "keywords": "Class FeedToTablesConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Feed object to Tables object. public class FeedToTablesConverter : IDataConverter Inheritance object FeedToTablesConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Feed?) Converts a Feed object to Tables object. public static Tables? Convert(Feed? file) Parameters file Feed The Feed object to convert. Returns Tables The converted Tables object. Convert(object?, Type?) Converts the specified object to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.ImageToAnythingConverter.html": {
    "href": "api/Archivist.Converters.ImageToAnythingConverter.html",
    "title": "Class ImageToAnythingConverter | Archivist API Reference",
    "keywords": "Class ImageToAnythingConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Image object to a Anything object. public class ImageToAnythingConverter : IDataConverter Inheritance object ImageToAnythingConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Image?, Type?) Converts a Image object to a Anything object. public static IGenericFile? Convert(Image? file, Type? destination) Parameters file Image The Image object to convert. destination Type The destination type. Returns IGenericFile The converted Anything object. Convert(object?, Type?) Converts an object from the source type to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.StructuredObjectToCalendarConverter.html": {
    "href": "api/Archivist.Converters.StructuredObjectToCalendarConverter.html",
    "title": "Class StructuredObjectToCalendarConverter | Archivist API Reference",
    "keywords": "Class StructuredObjectToCalendarConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a StructuredObject to a Calendar. public class StructuredObjectToCalendarConverter : IDataConverter Inheritance object StructuredObjectToCalendarConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the source and destination types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(StructuredObject?) Converts a StructuredObject to a Calendar. public static Calendar? Convert(StructuredObject? file) Parameters file StructuredObject The StructuredObject to convert. Returns Calendar The converted Calendar. Convert(object?, Type?) Converts an object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.StructuredObjectToCardConverter.html": {
    "href": "api/Archivist.Converters.StructuredObjectToCardConverter.html",
    "title": "Class StructuredObjectToCardConverter | Archivist API Reference",
    "keywords": "Class StructuredObjectToCardConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a StructuredObject to a Card. public class StructuredObjectToCardConverter : IDataConverter Inheritance object StructuredObjectToCardConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the source and destination types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(StructuredObject?) Converts a StructuredObject to a Card. public static Card? Convert(StructuredObject? file) Parameters file StructuredObject The StructuredObject to convert. Returns Card The converted Card. Convert(object?, Type?) Converts an object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.StructuredObjectToFeedConverter.html": {
    "href": "api/Archivist.Converters.StructuredObjectToFeedConverter.html",
    "title": "Class StructuredObjectToFeedConverter | Archivist API Reference",
    "keywords": "Class StructuredObjectToFeedConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a StructuredObject to a Feed. public class StructuredObjectToFeedConverter : IDataConverter Inheritance object StructuredObjectToFeedConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the source and destination types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(StructuredObject?) Converts a StructuredObject to a Feed. public static Feed? Convert(StructuredObject? file) Parameters file StructuredObject The StructuredObject to convert. Returns Feed The converted Feed. Convert(object?, Type?) Converts an object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.StructuredObjectToTableConverter.html": {
    "href": "api/Archivist.Converters.StructuredObjectToTableConverter.html",
    "title": "Class StructuredObjectToTableConverter | Archivist API Reference",
    "keywords": "Class StructuredObjectToTableConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a StructuredObject to a Table. public class StructuredObjectToTableConverter : IDataConverter Inheritance object StructuredObjectToTableConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the source and destination types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(StructuredObject?) Converts a StructuredObject to a Table. public static Table? Convert(StructuredObject? file) Parameters file StructuredObject The StructuredObject to convert. Returns Table The converted Table. Convert(object?, Type?) Converts an object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.StructuredObjectToTablesConverter.html": {
    "href": "api/Archivist.Converters.StructuredObjectToTablesConverter.html",
    "title": "Class StructuredObjectToTablesConverter | Archivist API Reference",
    "keywords": "Class StructuredObjectToTablesConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a StructuredObject to Tables. public class StructuredObjectToTablesConverter : IDataConverter Inheritance object StructuredObjectToTablesConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(StructuredObject?) Converts a StructuredObject to Tables. public static Tables? Convert(StructuredObject? file) Parameters file StructuredObject The StructuredObject to convert. Returns Tables The converted Tables object. Convert(object?, Type?) Converts the source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TableToCalendarConverter.html": {
    "href": "api/Archivist.Converters.TableToCalendarConverter.html",
    "title": "Class TableToCalendarConverter | Archivist API Reference",
    "keywords": "Class TableToCalendarConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Table object to a Calendar object. public class TableToCalendarConverter : IDataConverter Inheritance object TableToCalendarConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Checks if the conversion is possible between the specified source and destination types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Table?) Converts a Table object to a Calendar object. public static Calendar? Convert(Table? file) Parameters file Table The Table object to convert. Returns Calendar The converted Calendar object. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TableToCardConverter.html": {
    "href": "api/Archivist.Converters.TableToCardConverter.html",
    "title": "Class TableToCardConverter | Archivist API Reference",
    "keywords": "Class TableToCardConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Table object to a Card object. public class TableToCardConverter : IDataConverter Inheritance object TableToCardConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Checks if the conversion is possible between the specified source and destination types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Table?) Converts a Table object to a Card object. public static Card? Convert(Table? file) Parameters file Table The Table object to convert. Returns Card The converted Card object. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TableToFeedConverter.html": {
    "href": "api/Archivist.Converters.TableToFeedConverter.html",
    "title": "Class TableToFeedConverter | Archivist API Reference",
    "keywords": "Class TableToFeedConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Table object to a Feed object. public class TableToFeedConverter : IDataConverter Inheritance object TableToFeedConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Checks if the conversion is possible between the specified source and destination types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Table?) Converts a Table object to a Feed object. public static Feed? Convert(Table? file) Parameters file Table The Table object to convert. Returns Feed The converted Feed object. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TableToStructuredObjectConverter.html": {
    "href": "api/Archivist.Converters.TableToStructuredObjectConverter.html",
    "title": "Class TableToStructuredObjectConverter | Archivist API Reference",
    "keywords": "Class TableToStructuredObjectConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a Table object to a StructuredObject object. public class TableToStructuredObjectConverter : IDataConverter Inheritance object TableToStructuredObjectConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified source and destination types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Table?) Converts a Table object to a StructuredObject object. public static StructuredObject? Convert(Table? file) Parameters file Table The Table object to convert. Returns StructuredObject The converted StructuredObject object. Convert(object?, Type?) Converts the specified source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TableToTablesConverter.html": {
    "href": "api/Archivist.Converters.TableToTablesConverter.html",
    "title": "Class TableToTablesConverter | Archivist API Reference",
    "keywords": "Class TableToTablesConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a single Table object to a collection of Tables objects. public class TableToTablesConverter : IDataConverter Inheritance object TableToTablesConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines whether the conversion from the source type to the destination type is supported. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool true if the conversion is supported; otherwise, false. Convert(Table?) Converts a Table object to a Tables object. public static Tables? Convert(Table? file) Parameters file Table The Table object to convert. Returns Tables The converted Tables object. Convert(object?, Type?) Converts an object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TablesToCalendarConverter.html": {
    "href": "api/Archivist.Converters.TablesToCalendarConverter.html",
    "title": "Class TablesToCalendarConverter | Archivist API Reference",
    "keywords": "Class TablesToCalendarConverter Namespace Archivist.Converters Assembly Archivist.dll Converts Tables to Calendar. public class TablesToCalendarConverter : IDataConverter Inheritance object TablesToCalendarConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Checks if conversion is possible from Tables to Calendar. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if conversion is possible, otherwise false. Convert(Tables?) Converts Tables to Calendar. public static Calendar? Convert(Tables? file) Parameters file Tables The Tables object to convert. Returns Calendar The converted Calendar object. Convert(object?, Type?) Converts the source object to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TablesToCardConverter.html": {
    "href": "api/Archivist.Converters.TablesToCardConverter.html",
    "title": "Class TablesToCardConverter | Archivist API Reference",
    "keywords": "Class TablesToCardConverter Namespace Archivist.Converters Assembly Archivist.dll Converts Tables to Card. public class TablesToCardConverter : IDataConverter Inheritance object TablesToCardConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Checks if conversion is possible from Tables to Card. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if conversion is possible, otherwise false. Convert(Tables?) Converts Tables to Card. public static Card? Convert(Tables? file) Parameters file Tables The Tables object to convert. Returns Card The converted Card object. Convert(object?, Type?) Converts the source object to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TablesToFeedConverter.html": {
    "href": "api/Archivist.Converters.TablesToFeedConverter.html",
    "title": "Class TablesToFeedConverter | Archivist API Reference",
    "keywords": "Class TablesToFeedConverter Namespace Archivist.Converters Assembly Archivist.dll Converts Tables to Feed. public class TablesToFeedConverter : IDataConverter Inheritance object TablesToFeedConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Checks if conversion is possible from Tables to Feed. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if conversion is possible, otherwise false. Convert(Tables?) Converts Tables to Feed. public static Feed? Convert(Tables? file) Parameters file Tables The Tables object to convert. Returns Feed The converted Feed object. Convert(object?, Type?) Converts the source object to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TablesToStructuredObjectConverter.html": {
    "href": "api/Archivist.Converters.TablesToStructuredObjectConverter.html",
    "title": "Class TablesToStructuredObjectConverter | Archivist API Reference",
    "keywords": "Class TablesToStructuredObjectConverter Namespace Archivist.Converters Assembly Archivist.dll Converts Tables to StructuredObject. public class TablesToStructuredObjectConverter : IDataConverter Inheritance object TablesToStructuredObjectConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between Tables and StructuredObject. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Tables?) Converts Tables to StructuredObject. public static StructuredObject? Convert(Tables? file) Parameters file Tables The Tables object to convert. Returns StructuredObject The converted StructuredObject. Convert(object?, Type?) Converts the source object to the destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.TablesToTableConverter.html": {
    "href": "api/Archivist.Converters.TablesToTableConverter.html",
    "title": "Class TablesToTableConverter | Archivist API Reference",
    "keywords": "Class TablesToTableConverter Namespace Archivist.Converters Assembly Archivist.dll Converts a collection of Tables to a single Table. public class TablesToTableConverter : IDataConverter Inheritance object TablesToTableConverter Implements IDataConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanConvert(Type?, Type?) Determines if the conversion is possible between the specified types. public bool CanConvert(Type? source, Type? destination) Parameters source Type The source type. destination Type The destination type. Returns bool True if the conversion is possible, otherwise false. Convert(Tables?) Converts a collection of Tables to a single Table. public static Table? Convert(Tables? file) Parameters file Tables The collection of Tables to convert. Returns Table The converted Table. Convert(object?, Type?) Converts the source object to the specified destination type. public object? Convert(object? source, Type? destination) Parameters source object The source object to convert. destination Type The destination type. Returns object The converted object."
  },
  "api/Archivist.Converters.html": {
    "href": "api/Archivist.Converters.html",
    "title": "Namespace Archivist.Converters | Archivist API Reference",
    "keywords": "Namespace Archivist.Converters Classes AnythingToImageConverter Converts any object to Image type. AnythingToTextConverter Converts any object to Text type. CalendarToCardConverter Converts a CalendarComponent object to a Card object. CalendarToFeedConverter Converts a CalendarComponent object to a Feed object. CalendarToStructuredObjectConverter Converts a Calendar object to a StructuredObject object. CalendarToTableConverter Converts a Calendar object to a Table object. CalendarToTablesConverter Converts a Calendar object to Tables object. CardToCalendarConverter Converts a Card object to a Calendar object. CardToFeedConverter Converts a Card object to a Feed object. CardToStructuredObjectConverter Converts a Card object to a StructuredObject object. CardToTableConverter Converts a Card object to a Table object. CardToTablesConverter Converts a Card object to Tables object. Convertinator Converts data from one type to another using a collection of IDataConverter implementations. FeedToCalendarConverter Converts a Feed object to a Calendar object. FeedToCardConverter Converts a Feed object to a Card object. FeedToStructuredObjectConverter Converts a Feed object to a StructuredObject object. FeedToTableConverter Converts a Feed object to a Table object. FeedToTablesConverter Converts a Feed object to Tables object. ImageToAnythingConverter Converts a Image object to a Anything object. StructuredObjectToCalendarConverter Converts a StructuredObject to a Calendar. StructuredObjectToCardConverter Converts a StructuredObject to a Card. StructuredObjectToFeedConverter Converts a StructuredObject to a Feed. StructuredObjectToTableConverter Converts a StructuredObject to a Table. StructuredObjectToTablesConverter Converts a StructuredObject to Tables. TableToCalendarConverter Converts a Table object to a Calendar object. TableToCardConverter Converts a Table object to a Card object. TableToFeedConverter Converts a Table object to a Feed object. TableToStructuredObjectConverter Converts a Table object to a StructuredObject object. TableToTablesConverter Converts a single Table object to a collection of Tables objects. TablesToCalendarConverter Converts Tables to Calendar. TablesToCardConverter Converts Tables to Card. TablesToFeedConverter Converts Tables to Feed. TablesToStructuredObjectConverter Converts Tables to StructuredObject. TablesToTableConverter Converts a collection of Tables to a single Table."
  },
  "api/Archivist.DataTypes.Calendar.html": {
    "href": "api/Archivist.DataTypes.Calendar.html",
    "title": "Class Calendar | Archivist API Reference",
    "keywords": "Class Calendar Namespace Archivist.DataTypes Assembly Archivist.dll Represents a calendar object. public class Calendar : FileBaseClass<Calendar>, IGenericFile, IComparable<Calendar>, IEquatable<Calendar>, IObjectConvertable Inheritance object FileBaseClass<Calendar> Calendar Implements IGenericFile IComparable<Calendar> IEquatable<Calendar> IObjectConvertable Inherited Members FileBaseClass<Calendar>.Metadata FileBaseClass<Calendar>.Title FileBaseClass<Calendar>.Converter FileBaseClass<Calendar>.CompareTo(object) FileBaseClass<Calendar>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Calendar() Initializes a new instance of the Calendar class. public Calendar() Calendar(Convertinator?) Initializes a new instance of the Calendar class with the specified converter. public Calendar(Convertinator? converter) Parameters converter Convertinator The converter to use. Properties Alarms Gets the list of alarms in the calendar. public List<CalendarComponent> Alarms { get; } Property Value List<CalendarComponent> Components Gets the list of all components in the calendar. public IEnumerable<CalendarComponent> Components { get; } Property Value IEnumerable<CalendarComponent> CurrentTimeZone Gets or sets the current time zone. public TimeZoneInfo CurrentTimeZone { get; set; } Property Value TimeZoneInfo Events Gets the list of events in the calendar. public List<CalendarComponent> Events { get; } Property Value List<CalendarComponent> FreeBusy Gets the list of free/busy time slots in the calendar. public List<CalendarComponent> FreeBusy { get; } Property Value List<CalendarComponent> IsCancelled Gets a value indicating whether the calendar item is a cancellation. public bool IsCancelled { get; } Property Value bool Journals Gets the list of journals in the calendar. public List<CalendarComponent> Journals { get; } Property Value List<CalendarComponent> Method Gets or sets the method of the calendar item. public string Method { get; set; } Property Value string ProductId Gets or sets the product identifier. public string ProductId { get; set; } Property Value string TimeZones Gets the list of time zones in the calendar. public List<CalendarComponent> TimeZones { get; } Property Value List<CalendarComponent> ToDos Gets the list of to-do items in the calendar. public List<CalendarComponent> ToDos { get; } Property Value List<CalendarComponent> Version Gets or sets the version of the calendar item. public string Version { get; set; } Property Value string Methods AddAlarm(string?, string?, string?) Adds an alarm to the Calendar item. public CalendarComponent AddAlarm(string? action, string? trigger, string? description) Parameters action string Action taken by the alarm trigger string Trigger for the alarm (ex: \"-P2D\" = 2 days before the event, \"-PT30M\" = 30 minutes before the event, see https://icalendar.org/iCalendar-RFC-5545/3-6-6-alarm-component.html) description string Description of the alarm Returns CalendarComponent The alarm that was added. AddEvent(string?, string?, string?, DateTime, DateTime) Adds a new event to the calendar. public CalendarComponent AddEvent(string? summary, string? description, string? location, DateTime start, DateTime end) Parameters summary string The summary of the event. description string The description of the event. location string The location of the event. start DateTime The start date and time of the event. end DateTime The end date and time of the event. Returns CalendarComponent The newly added calendar component representing the event. AddFreeBusy() Adds a new free/busy time slot to the calendar. public CalendarComponent AddFreeBusy() Returns CalendarComponent The newly added calendar component representing the free/busy time slot. AddJournal() Adds a new journal to the calendar. public CalendarComponent AddJournal() Returns CalendarComponent The newly added calendar component representing the journal. AddTimeZone() Adds a new time zone to the calendar. public CalendarComponent AddTimeZone() Returns CalendarComponent The newly added calendar component representing the time zone. AddToDo() Adds a new to-do item to the calendar. public CalendarComponent AddToDo() Returns CalendarComponent The newly added calendar component representing the to-do item. CompareTo(Calendar?) Compares the Calendar to another Calendar based on their content. public override int CompareTo(Calendar? other) Parameters other Calendar The other Calendar to compare. Returns int An integer that indicates the relative order of the Calendars. ConvertFrom<TObject>(TObject) Converts the object to the Calendar. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to convert. Type Parameters TObject The type of object to convert. ConvertTo<TObject>() Converts the Calendar to the specified object type. public TObject? ConvertTo<TObject>() Returns TObject The converted Calendar. Type Parameters TObject The type to convert the Calendar to. Equals(Calendar?) Determines whether the Calendar is equal to another Calendar based on their content. public override bool Equals(Calendar? other) Parameters other Calendar The other Calendar to compare. Returns bool True if the Calendars are equal; otherwise, false. Equals(object?) Determines whether the Calendar is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the Calendar is equal to the object; otherwise, false. GetContent() Gets the content of the Calendar. public override string? GetContent() Returns string The content of the Calendar. GetHashCode() Gets the hash code of the Calendar based on its content. public override int GetHashCode() Returns int The hash code of the Calendar. ToFileType<TFile>() Converts the Calendar to the specified object type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The converted Calendar. Type Parameters TFile The type to convert the Calendar to. Operators implicit operator Card?(Calendar?) Converts the Calendar to a Card. public static implicit operator Card?(Calendar? file) Parameters file Calendar The Calendar to convert. Returns Card The Card representation of the Calendar. implicit operator Feed?(Calendar?) Converts the Calendar to a Feed. public static implicit operator Feed?(Calendar? file) Parameters file Calendar The Calendar to convert. Returns Feed The Feed representation of the Calendar. implicit operator Image?(Calendar?) Converts the Calendar to an image. public static implicit operator Image?(Calendar? file) Parameters file Calendar The Calendar to convert. Returns Image The image representation of the Calendar. implicit operator StructuredObject?(Calendar?) Converts the Calendar to a structured object. public static implicit operator StructuredObject?(Calendar? file) Parameters file Calendar The Calendar to convert. Returns StructuredObject The structured object representation of the Calendar. implicit operator Table?(Calendar?) Converts the Calendar to a table. public static implicit operator Table?(Calendar? file) Parameters file Calendar The Calendar to convert. Returns Table The table representation of the Calendar. implicit operator Tables?(Calendar?) Converts the Calendar to a Tables file. public static implicit operator Tables?(Calendar? file) Parameters file Calendar The Calendar to convert. Returns Tables The Tables representation of the Calendar. implicit operator Text?(Calendar?) Converts the Calendar to text. public static implicit operator Text?(Calendar? file) Parameters file Calendar The Calendar to convert. Returns Text The text representation of the Calendar."
  },
  "api/Archivist.DataTypes.CalendarComponent.html": {
    "href": "api/Archivist.DataTypes.CalendarComponent.html",
    "title": "Class CalendarComponent | Archivist API Reference",
    "keywords": "Class CalendarComponent Namespace Archivist.DataTypes Assembly Archivist.dll Represents a Calendar (vCalendar, etc.) file. public class CalendarComponent : IComparable<CalendarComponent>, IEquatable<CalendarComponent>, IEnumerable<KeyValueField?>, IEnumerable, IObjectConvertable Inheritance object CalendarComponent Implements IComparable<CalendarComponent> IEquatable<CalendarComponent> IEnumerable<KeyValueField> IEnumerable IObjectConvertable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CalendarComponent(Calendar?) Initializes a new instance of the CalendarComponent class. public CalendarComponent(Calendar? parent) Parameters parent Calendar The parent Calendar. Properties Action Gets or sets the action of the Calendar item. public string Action { get; set; } Property Value string Actions Gets the action fields of the Calendar item. public IEnumerable<KeyValueField?> Actions { get; } Property Value IEnumerable<KeyValueField> Attachments Gets the attachments of the Calendar item. public IEnumerable<KeyValueField?> Attachments { get; } Property Value IEnumerable<KeyValueField> Attendees Gets the attendees of the Calendar item. public IEnumerable<KeyValueField?> Attendees { get; } Property Value IEnumerable<KeyValueField> Categories Gets the categories of the Calendar item. public IEnumerable<KeyValueField?> Categories { get; } Property Value IEnumerable<KeyValueField> Class Gets the class of the Calendar item. public string Class { get; set; } Property Value string Classes Gets the classes of the Calendar item. public IEnumerable<KeyValueField?> Classes { get; } Property Value IEnumerable<KeyValueField> Comments Gets the comments of the Calendar item. public IEnumerable<KeyValueField?> Comments { get; } Property Value IEnumerable<KeyValueField> Completeds Gets the completed fields of the Calendar item. public IEnumerable<KeyValueField?> Completeds { get; } Property Value IEnumerable<KeyValueField> Contacts Gets the contacts of the Calendar item. public IEnumerable<KeyValueField?> Contacts { get; } Property Value IEnumerable<KeyValueField> Count Gets the number of fields in the Calendar. public int Count { get; } Property Value int Created Gets or sets the creation date of the Calendar item. public DateTime Created { get; set; } Property Value DateTime CreatedUtc Gets or sets the creation date of the Calendar item in Coordinated Universal Time (UTC). public DateTime CreatedUtc { get; } Property Value DateTime Createds Gets the created fields of the Calendar item. public IEnumerable<KeyValueField?> Createds { get; } Property Value IEnumerable<KeyValueField> DateStamp Gets or sets the date stamp of the Calendar item. public DateTime DateStamp { get; set; } Property Value DateTime DateStampUtc Gets the date stamp of the Calendar item in Coordinated Universal Time (UTC). public DateTime DateStampUtc { get; } Property Value DateTime DateStamps Gets the date stamps of the Calendar item. public IEnumerable<KeyValueField?> DateStamps { get; } Property Value IEnumerable<KeyValueField> Description Gets or sets the description of the Calendar item. public string Description { get; set; } Property Value string Descriptions Gets the descriptions of the Calendar item. public IEnumerable<KeyValueField?> Descriptions { get; } Property Value IEnumerable<KeyValueField> Dues Gets the due dates of the Calendar item. public IEnumerable<KeyValueField?> Dues { get; } Property Value IEnumerable<KeyValueField> Durations Gets the durations of the Calendar item. public IEnumerable<KeyValueField?> Durations { get; } Property Value IEnumerable<KeyValueField> EndDate Gets or sets the end date of the Calendar item. public DateTime EndDate { get; set; } Property Value DateTime EndDateUtc Gets the end date of the Calendar item in Coordinated Universal Time (UTC). public DateTime EndDateUtc { get; } Property Value DateTime EndDates Gets the end dates of the Calendar item. public IEnumerable<KeyValueField?> EndDates { get; } Property Value IEnumerable<KeyValueField> ExcludeDates Gets the exceptions of the Calendar item. public IEnumerable<KeyValueField?> ExcludeDates { get; } Property Value IEnumerable<KeyValueField> ExcludeRules Gets the exclude rules of the Calendar item. public IEnumerable<KeyValueField?> ExcludeRules { get; } Property Value IEnumerable<KeyValueField> Fields Gets or sets the fields of the Calendar. public List<KeyValueField?> Fields { get; } Property Value List<KeyValueField> FreeBusys Gets the free/busy fields of the Calendar item. public IEnumerable<KeyValueField?> FreeBusys { get; } Property Value IEnumerable<KeyValueField> GeoLocations Gets the geo locations of the Calendar item. public IEnumerable<KeyValueField?> GeoLocations { get; } Property Value IEnumerable<KeyValueField> this[int] Gets or sets the field at the specified index. public KeyValueField? this[int index] { get; set; } Parameters index int The index of the field. Property Value KeyValueField The field at the specified index. this[string] Gets the fields with the specified property name. public IEnumerable<KeyValueField?> this[string property] { get; } Parameters property string The property name of the fields. Property Value IEnumerable<KeyValueField> The fields with the specified property name. this[string, string?] Gets the fields with the specified property name and parameter. public IEnumerable<KeyValueField?> this[string property, string? parameter] { get; } Parameters property string The property name of the fields. parameter string The parameter of the fields. Property Value IEnumerable<KeyValueField> The fields with the specified property name and parameter. LastModified Gets or sets the last modified date of the Calendar item. public DateTime LastModified { get; set; } Property Value DateTime LastModifiedUtc Gets the last modified field of the Calendar item in Coordinated Universal Time (UTC). public DateTime LastModifiedUtc { get; } Property Value DateTime LastModifieds Gets the last modified fields of the Calendar item. public IEnumerable<KeyValueField?> LastModifieds { get; } Property Value IEnumerable<KeyValueField> Location Gets the location of the Calendar item. public string Location { get; set; } Property Value string Locations Gets the locations of the Calendar item. public IEnumerable<KeyValueField?> Locations { get; } Property Value IEnumerable<KeyValueField> Organizers Gets the organizers of the Calendar. public IEnumerable<KeyValueField?> Organizers { get; } Property Value IEnumerable<KeyValueField> Priorities Gets the priorities of the Calendar item. public IEnumerable<KeyValueField?> Priorities { get; } Property Value IEnumerable<KeyValueField> Priority Gets or sets the priority of the Calendar item. public string Priority { get; set; } Property Value string RecurrenceIds Gets the recurrence IDs of the Calendar item. public IEnumerable<KeyValueField?> RecurrenceIds { get; } Property Value IEnumerable<KeyValueField> RelatedTos Gets the related to fields of the Calendar item. public IEnumerable<KeyValueField?> RelatedTos { get; } Property Value IEnumerable<KeyValueField> ReoccurDates Gets the reoccur dates of the Calendar item. public IEnumerable<KeyValueField?> ReoccurDates { get; } Property Value IEnumerable<KeyValueField> ReoccurRules Gets the reoccur rules of the Calendar item. public IEnumerable<KeyValueField?> ReoccurRules { get; } Property Value IEnumerable<KeyValueField> RepeatCounts Gets the repeat counts of the Calendar item. public IEnumerable<KeyValueField?> RepeatCounts { get; } Property Value IEnumerable<KeyValueField> Resources Gets the resources of the Calendar item. public IEnumerable<KeyValueField?> Resources { get; } Property Value IEnumerable<KeyValueField> Sequence Gets or sets the sequence of the Calendar item. public string Sequence { get; set; } Property Value string Sequences Gets the sequence fields of the Calendar item. public IEnumerable<KeyValueField?> Sequences { get; } Property Value IEnumerable<KeyValueField> StartDate Gets or sets the start date of the Calendar item. public DateTime StartDate { get; set; } Property Value DateTime StartDateUtc Gets the start date of the Calendar item in Coordinated Universal Time (UTC). public DateTime StartDateUtc { get; } Property Value DateTime StartDates Gets the start dates of the Calendar item. public IEnumerable<KeyValueField?> StartDates { get; } Property Value IEnumerable<KeyValueField> Status Gets or sets the status of the Calendar item. public string? Status { get; set; } Property Value string Statuses Gets the statuses of the Calendar item. public IEnumerable<KeyValueField?> Statuses { get; } Property Value IEnumerable<KeyValueField> Summaries Gets the summaries of the Calendar item. public IEnumerable<KeyValueField?> Summaries { get; } Property Value IEnumerable<KeyValueField> Summary Gets or sets the summary of the Calendar item. public string Summary { get; set; } Property Value string TimeZones Gets the time zones of the Calendar item. public IEnumerable<KeyValueField?> TimeZones { get; } Property Value IEnumerable<KeyValueField> TimezoneNames Gets the time zone names of the Calendar item. public IEnumerable<KeyValueField?> TimezoneNames { get; } Property Value IEnumerable<KeyValueField> TimezoneOffsetFroms Gets the time zone offsets from of the Calendar item. public IEnumerable<KeyValueField?> TimezoneOffsetFroms { get; } Property Value IEnumerable<KeyValueField> TimezoneOffsetTos Gets the time zone offsets to of the Calendar item. public IEnumerable<KeyValueField?> TimezoneOffsetTos { get; } Property Value IEnumerable<KeyValueField> TimezoneUrls Gets the time zone URLs of the Calendar item. public IEnumerable<KeyValueField?> TimezoneUrls { get; } Property Value IEnumerable<KeyValueField> Transp Gets or sets the transparency of the Calendar item. public string Transp { get; set; } Property Value string Transps Gets the TRANSP fields of the Calendar item. public IEnumerable<KeyValueField?> Transps { get; } Property Value IEnumerable<KeyValueField> Trigger Gets the triggers of the Calendar item. public string Trigger { get; set; } Property Value string Triggers Gets the triggers of the Calendar item. public IEnumerable<KeyValueField?> Triggers { get; } Property Value IEnumerable<KeyValueField> UID Gets or sets the unique identifier of the Calendar item. public string UID { get; set; } Property Value string UIDs Gets the unique identifiers of the Calendar item. public IEnumerable<KeyValueField?> UIDs { get; } Property Value IEnumerable<KeyValueField> URLs Gets the URLs of the Calendar item. public IEnumerable<KeyValueField?> URLs { get; } Property Value IEnumerable<KeyValueField> Methods CompareTo(CalendarComponent?) Compares the Calendar to another Calendar based on their content. public int CompareTo(CalendarComponent? other) Parameters other CalendarComponent The other Calendar to compare. Returns int An integer that indicates the relative order of the Calendars. ConvertFrom<TObject>(TObject) Converts the object to the Calendar. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to convert. Type Parameters TObject The type of object to convert. ConvertTo<TObject>() Converts the Calendar to the specified object type. public TObject? ConvertTo<TObject>() Returns TObject The converted Calendar. Type Parameters TObject The type to convert the Calendar to. Equals(CalendarComponent?) Determines whether the Calendar is equal to another Calendar based on their content. public bool Equals(CalendarComponent? other) Parameters other CalendarComponent The other Calendar to compare. Returns bool True if the Calendars are equal; otherwise, false. Equals(object?) Determines whether the Calendar is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the Calendar is equal to the object; otherwise, false. GetContent() Gets the content of the Calendar. public string? GetContent() Returns string The content of the Calendar. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValueField?> GetEnumerator() Returns IEnumerator<KeyValueField> An enumerator that can be used to iterate through the collection. GetHashCode() Gets the hash code of the Calendar based on its content. public override int GetHashCode() Returns int The hash code of the Calendar. Operators operator ==(CalendarComponent?, CalendarComponent?) Determines whether two Calendar objects are equal. public static bool operator ==(CalendarComponent? left, CalendarComponent? right) Parameters left CalendarComponent The first Calendar object to compare. right CalendarComponent The second Calendar object to compare. Returns bool True if the two Calendar objects are equal; otherwise, false. operator >(CalendarComponent?, CalendarComponent?) Determines whether one Calendar object is greater than another Calendar object. public static bool operator >(CalendarComponent? left, CalendarComponent? right) Parameters left CalendarComponent The first Calendar object to compare. right CalendarComponent The second Calendar object to compare. Returns bool True if the first Calendar object is greater than the second Calendar object; otherwise, false. operator >=(CalendarComponent?, CalendarComponent?) Determines whether one Calendar object is greater than or equal to another Calendar object. public static bool operator >=(CalendarComponent? left, CalendarComponent? right) Parameters left CalendarComponent The first Calendar object to compare. right CalendarComponent The second Calendar object to compare. Returns bool True if the first Calendar object is greater than or equal to the second Calendar object; otherwise, false. operator !=(CalendarComponent?, CalendarComponent?) Determines whether two Calendar objects are not equal. public static bool operator !=(CalendarComponent? left, CalendarComponent? right) Parameters left CalendarComponent The first Calendar object to compare. right CalendarComponent The second Calendar object to compare. Returns bool True if the two Calendar objects are not equal; otherwise, false. operator <(CalendarComponent?, CalendarComponent?) Determines whether one Calendar object is less than another Calendar object. public static bool operator <(CalendarComponent? left, CalendarComponent? right) Parameters left CalendarComponent The first Calendar object to compare. right CalendarComponent The second Calendar object to compare. Returns bool True if the first Calendar object is less than the second Calendar object; otherwise, false. operator <=(CalendarComponent?, CalendarComponent?) Determines whether one Calendar object is less than or equal to another Calendar object. public static bool operator <=(CalendarComponent? left, CalendarComponent? right) Parameters left CalendarComponent The first Calendar object to compare. right CalendarComponent The second Calendar object to compare. Returns bool True if the first Calendar object is less than or equal to the second Calendar object; otherwise, false. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.Card.html": {
    "href": "api/Archivist.DataTypes.Card.html",
    "title": "Class Card | Archivist API Reference",
    "keywords": "Class Card Namespace Archivist.DataTypes Assembly Archivist.dll Represents a card (vCard, etc.) file. public class Card : FileBaseClass<Card>, IGenericFile, IComparable<Card>, IEquatable<Card>, IEnumerable<KeyValueField?>, IEnumerable, IObjectConvertable Inheritance object FileBaseClass<Card> Card Implements IGenericFile IComparable<Card> IEquatable<Card> IEnumerable<KeyValueField> IEnumerable IObjectConvertable Inherited Members FileBaseClass<Card>.Metadata FileBaseClass<Card>.Title FileBaseClass<Card>.Converter FileBaseClass<Card>.CompareTo(object) FileBaseClass<Card>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Card() Initializes a new instance of the Card class. public Card() Card(Convertinator?) Initializes a new instance of the Card class. public Card(Convertinator? converter) Parameters converter Convertinator The type converter. Properties Addresses Gets the addresses for the card. public IEnumerable<KeyValueField?> Addresses { get; } Property Value IEnumerable<KeyValueField> Anniversaries Gets the anniversaries for the card. public IEnumerable<KeyValueField?> Anniversaries { get; } Property Value IEnumerable<KeyValueField> Birthdays Gets the birthdays for the card. public IEnumerable<KeyValueField?> Birthdays { get; } Property Value IEnumerable<KeyValueField> Count Gets the number of fields in the card. public int Count { get; } Property Value int Emails Gets the emails for the card. public IEnumerable<KeyValueField?> Emails { get; } Property Value IEnumerable<KeyValueField> Fields Gets or sets the fields of the card. public List<KeyValueField?> Fields { get; } Property Value List<KeyValueField> FirstName Gets the first name from the card. public string FirstName { get; set; } Property Value string FullName Gets the full name for the card. public KeyValueField? FullName { get; } Property Value KeyValueField InstantMessengers Gets the IM entries from the card. public IEnumerable<KeyValueField?> InstantMessengers { get; } Property Value IEnumerable<KeyValueField> this[int] Gets or sets the field at the specified index. public KeyValueField? this[int index] { get; set; } Parameters index int The index of the field. Property Value KeyValueField The field at the specified index. this[string] Gets the fields with the specified property name. public IEnumerable<KeyValueField?> this[string property] { get; } Parameters property string The property name of the fields. Property Value IEnumerable<KeyValueField> The fields with the specified property name. this[string, string?] Gets the fields with the specified property name and parameter. public IEnumerable<KeyValueField?> this[string property, string? parameter] { get; } Parameters property string The property name of the fields. parameter string The parameter of the fields. Property Value IEnumerable<KeyValueField> The fields with the specified property name and parameter. Languages Gets the languages from the card. public IEnumerable<KeyValueField?> Languages { get; } Property Value IEnumerable<KeyValueField> LastName Gets the last name from the card. public string LastName { get; set; } Property Value string Logos Gets the logos from the card. public IEnumerable<KeyValueField?> Logos { get; } Property Value IEnumerable<KeyValueField> MiddleName Gets the middle name from the card. public string MiddleName { get; set; } Property Value string Name Gets the name for the card. public KeyValueField? Name { get; } Property Value KeyValueField Nicknames Gets the nicknames from the card. public IEnumerable<KeyValueField?> Nicknames { get; } Property Value IEnumerable<KeyValueField> Notes Gets the notes from the card. public IEnumerable<KeyValueField?> Notes { get; } Property Value IEnumerable<KeyValueField> Organizations Gets the organizations from the card. public IEnumerable<KeyValueField?> Organizations { get; } Property Value IEnumerable<KeyValueField> PhoneNumbers Gets the phone numbers from the card. public IEnumerable<KeyValueField?> PhoneNumbers { get; } Property Value IEnumerable<KeyValueField> Photos Gets the photos from the card. public IEnumerable<KeyValueField?> Photos { get; } Property Value IEnumerable<KeyValueField> Prefix Gets the prefix from the card. public string Prefix { get; set; } Property Value string Roles Gets the roles of the card. public IEnumerable<KeyValueField?> Roles { get; } Property Value IEnumerable<KeyValueField> Sounds Gets the sounds from the card. public IEnumerable<KeyValueField?> Sounds { get; } Property Value IEnumerable<KeyValueField> Suffix Gets the suffix from the card. public string Suffix { get; set; } Property Value string TimeZones Gets the time zones from the card. public IEnumerable<KeyValueField?> TimeZones { get; } Property Value IEnumerable<KeyValueField> Titles Gets the titles from the card. public IEnumerable<KeyValueField?> Titles { get; } Property Value IEnumerable<KeyValueField> Websites Gets the URLs from the card. public IEnumerable<KeyValueField?> Websites { get; } Property Value IEnumerable<KeyValueField> Methods CompareTo(Card?) Compares the card to another card based on their content. public override int CompareTo(Card? other) Parameters other Card The other card to compare. Returns int An integer that indicates the relative order of the cards. ConvertFrom<TObject>(TObject) Converts the object to the card. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to convert. Type Parameters TObject The type of object to convert. ConvertTo<TObject>() Converts the card to the specified object type. public TObject? ConvertTo<TObject>() Returns TObject The converted card. Type Parameters TObject The type to convert the card to. Equals(Card?) Determines whether the card is equal to another card based on their content. public override bool Equals(Card? other) Parameters other Card The other card to compare. Returns bool True if the cards are equal; otherwise, false. Equals(object?) Determines whether the card is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the card is equal to the object; otherwise, false. GetContent() Gets the content of the card. public override string? GetContent() Returns string The content of the card. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValueField?> GetEnumerator() Returns IEnumerator<KeyValueField> An enumerator that can be used to iterate through the collection. GetHashCode() Gets the hash code of the card based on its content. public override int GetHashCode() Returns int The hash code of the card. ToFileType<TFile>() Converts the card to the specified object type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The converted card. Type Parameters TFile The type to convert the card to. Operators operator ==(Card?, Card?) Determines whether two card objects are equal. public static bool operator ==(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the two card objects are equal; otherwise, false. operator >(Card?, Card?) Determines whether one card object is greater than another card object. public static bool operator >(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is greater than the second card object; otherwise, false. operator >=(Card?, Card?) Determines whether one card object is greater than or equal to another card object. public static bool operator >=(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is greater than or equal to the second card object; otherwise, false. implicit operator Calendar?(Card?) Converts the card to a calendar. public static implicit operator Calendar?(Card? file) Parameters file Card The card to convert. Returns Calendar implicit operator Feed?(Card?) Converts the card to a feed file. public static implicit operator Feed?(Card? file) Parameters file Card The card to convert. Returns Feed The feed representation of the card. implicit operator Image?(Card?) Converts the card to an image. public static implicit operator Image?(Card? file) Parameters file Card The card to convert. Returns Image The image representation of the card. implicit operator StructuredObject?(Card?) Converts the card to a structured object. public static implicit operator StructuredObject?(Card? file) Parameters file Card The card to convert. Returns StructuredObject implicit operator Table?(Card?) Converts the card to a table. public static implicit operator Table?(Card? file) Parameters file Card The card to convert. Returns Table The table representation of the card. implicit operator Tables?(Card?) Converts the card to a Tables file. public static implicit operator Tables?(Card? file) Parameters file Card The card to convert. Returns Tables The Tables representation of the card. implicit operator Text?(Card?) Converts the card to text. public static implicit operator Text?(Card? file) Parameters file Card The card to convert. Returns Text The text representation of the card. operator !=(Card?, Card?) Determines whether two card objects are not equal. public static bool operator !=(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the two card objects are not equal; otherwise, false. operator <(Card?, Card?) Determines whether one card object is less than another card object. public static bool operator <(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is less than the second card object; otherwise, false. operator <=(Card?, Card?) Determines whether one card object is less than or equal to another card object. public static bool operator <=(Card? left, Card? right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is less than or equal to the second card object; otherwise, false. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.Feed.html": {
    "href": "api/Archivist.DataTypes.Feed.html",
    "title": "Class Feed | Archivist API Reference",
    "keywords": "Class Feed Namespace Archivist.DataTypes Assembly Archivist.dll Represents a Feed object. public class Feed : FileBaseClass<Feed>, IGenericFile, IComparable<Feed>, IEquatable<Feed>, IList<Channel>, ICollection<Channel>, IEnumerable<Channel>, IEnumerable Inheritance object FileBaseClass<Feed> Feed Implements IGenericFile IComparable<Feed> IEquatable<Feed> IList<Channel> ICollection<Channel> IEnumerable<Channel> IEnumerable Inherited Members FileBaseClass<Feed>.Metadata FileBaseClass<Feed>.Title FileBaseClass<Feed>.Converter FileBaseClass<Feed>.CompareTo(object) FileBaseClass<Feed>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Feed() Initializes a new instance of the Feed class. public Feed() Feed(Convertinator?) Initializes a new instance of the Feed class with the specified converter. public Feed(Convertinator? converter) Parameters converter Convertinator The converter to use. Properties Channels Gets the channels. public List<Channel> Channels { get; } Property Value List<Channel> The channels. Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[int] Gets or sets the element at the specified index. public Channel this[int index] { get; set; } Parameters index int The zero-based index of the element to get or set. Property Value Channel The element at the specified index. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The property is set and the IList<T> is read-only. Methods Add(Channel?) Adds an item to the ICollection<T>. public void Add(Channel? item) Parameters item Channel The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. CompareTo(Feed?) Compares the Feed to another Feed based on their content. public override int CompareTo(Feed? other) Parameters other Feed The other Feed to compare. Returns int An integer that indicates the relative order of the Feeds. Contains(Channel?) Determines whether the ICollection<T> contains a specific value. public bool Contains(Channel? item) Parameters item Channel The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(Channel[]?, int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(Channel[]? array, int arrayIndex) Parameters array Channel[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. Equals(Feed?) Determines whether the Feed is equal to another Feed based on their content. public override bool Equals(Feed? other) Parameters other Feed The other Feed to compare. Returns bool True if the Feeds are equal; otherwise, false. Equals(object?) Determines whether the Feed is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the Feed is equal to the object; otherwise, false. GetContent() Gets the content of the Feed. public override string? GetContent() Returns string The content of the Feed. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Channel> GetEnumerator() Returns IEnumerator<Channel> An enumerator that can be used to iterate through the collection. GetHashCode() Gets the hash code of the Feed based on its content. public override int GetHashCode() Returns int The hash code of the Feed. IndexOf(Channel?) Determines the index of a specific item in the IList<T>. public int IndexOf(Channel? item) Parameters item Channel The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, Channel?) Inserts an item to the IList<T> at the specified index. public void Insert(int index, Channel? item) Parameters index int The zero-based index at which item should be inserted. item Channel The object to insert into the IList<T>. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. Remove(Channel?) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(Channel? item) Parameters item Channel The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. Exceptions ArgumentOutOfRangeException index is not a valid index in the IList<T>. NotSupportedException The IList<T> is read-only. ToFileType<TFile>() Converts the Feed to the specified object type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The converted Feed. Type Parameters TFile The type to convert the Feed to. Operators operator ==(Feed?, Feed?) Determines whether two Feed objects are equal. public static bool operator ==(Feed? left, Feed? right) Parameters left Feed The first Feed to compare. right Feed The second Feed to compare. Returns bool True if the Feed objects are equal; otherwise, false. operator >(Feed?, Feed?) Determines whether one Feed object is greater than another Feed object. public static bool operator >(Feed? left, Feed? right) Parameters left Feed The first Feed to compare. right Feed The second Feed to compare. Returns bool True if the first Feed is greater than the second Feed; otherwise, false. operator >=(Feed?, Feed?) Determines whether one Feed object is greater than or equal to another Feed object. public static bool operator >=(Feed? left, Feed? right) Parameters left Feed The first Feed to compare. right Feed The second Feed to compare. Returns bool True if the first Feed is greater than or equal to the second Feed; otherwise, false. implicit operator Calendar?(Feed?) Converts the Feed to a Calendar. public static implicit operator Calendar?(Feed? file) Parameters file Feed The Feed to convert. Returns Calendar implicit operator Card?(Feed?) Converts the Feed to a Card. public static implicit operator Card?(Feed? file) Parameters file Feed The Feed to convert. Returns Card The Card representation of the Feed. implicit operator Image?(Feed?) Converts the Feed to an Image. public static implicit operator Image?(Feed? file) Parameters file Feed The Feed to convert. Returns Image The Image representation of the Feed. implicit operator StructuredObject?(Feed?) Converts the Feed to a structured object. public static implicit operator StructuredObject?(Feed? file) Parameters file Feed The Feed to convert. Returns StructuredObject The structured object representation of the Feed. implicit operator Table?(Feed?) Converts the Feed to a table. public static implicit operator Table?(Feed? file) Parameters file Feed The Feed to convert. Returns Table The table representation of the Feed. implicit operator Tables?(Feed?) Converts the Feed to a Tables file. public static implicit operator Tables?(Feed? file) Parameters file Feed The Feed to convert. Returns Tables The Tables representation of the Feed. implicit operator Text?(Feed?) Converts the Feed to text. public static implicit operator Text?(Feed? file) Parameters file Feed The Feed to convert. Returns Text The text representation of the Feed. operator !=(Feed?, Feed?) Determines whether two Feed objects are not equal. public static bool operator !=(Feed? left, Feed? right) Parameters left Feed The first Feed to compare. right Feed The second Feed to compare. Returns bool True if the Feed objects are not equal; otherwise, false. operator <(Feed?, Feed?) Determines whether one Feed object is less than another Feed object. public static bool operator <(Feed? left, Feed? right) Parameters left Feed The first Feed to compare. right Feed The second Feed to compare. Returns bool True if the first Feed is less than the second Feed; otherwise, false. operator <=(Feed?, Feed?) Determines whether one Feed object is less than or equal to another Feed object. public static bool operator <=(Feed? left, Feed? right) Parameters left Feed The first Feed to compare. right Feed The second Feed to compare. Returns bool True if the first Feed is less than or equal to the second Feed; otherwise, false. See Also FileBaseClass<TFileType> IComparable<T> IEquatable<T> IList<T>"
  },
  "api/Archivist.DataTypes.Feeds.Channel.html": {
    "href": "api/Archivist.DataTypes.Feeds.Channel.html",
    "title": "Class Channel | Archivist API Reference",
    "keywords": "Class Channel Namespace Archivist.DataTypes.Feeds Assembly Archivist.dll Channel public class Channel : IList<FeedItem>, ICollection<FeedItem>, IEnumerable<FeedItem>, IEnumerable, IComparable<Channel>, IEquatable<Channel> Inheritance object Channel Implements IList<FeedItem> ICollection<FeedItem> IEnumerable<FeedItem> IEnumerable IComparable<Channel> IEquatable<Channel> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Categories Gets the categories. public List<string> Categories { get; } Property Value List<string> The categories. Cloud Gets the cloud. public string? Cloud { get; set; } Property Value string The cloud. Copyright Gets the copyright. public string Copyright { get; set; } Property Value string The copyright. Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int Description Gets the description. public string? Description { get; set; } Property Value string The description. Docs Gets the docs. public string Docs { get; set; } Property Value string The docs. Explicit Gets or sets a value indicating whether this FileCurator.Formats.Data.Interfaces.IChannel is explicit. public bool Explicit { get; set; } Property Value bool true if explicit; otherwise, false. ImageUrl Gets or sets the image URL. public string? ImageUrl { get; set; } Property Value string The image URL. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the FeedItem at the specified index. public FeedItem this[int index] { get; set; } Parameters index int The index. Property Value FeedItem The FeedItem. Items Gets the items. public List<FeedItem> Items { get; } Property Value List<FeedItem> The items. Language Gets or sets the language. public string Language { get; set; } Property Value string The language. Link Gets or sets the link. public string? Link { get; set; } Property Value string The link. PubDate Gets the local publication date. public DateTime PubDate { get; } Property Value DateTime PubDateUtc Gets or sets the pub date. public DateTime PubDateUtc { get; set; } Property Value DateTime The pub date. TTL Gets or sets the TTL. public int TTL { get; set; } Property Value int The TTL. Title Gets or sets the title. public string? Title { get; set; } Property Value string The title. WebMaster Gets or sets the web master. public string? WebMaster { get; set; } Property Value string The web master. Methods Add(FeedItem?) Adds an item to the ICollection<T>. public void Add(FeedItem? item) Parameters item FeedItem The object to add to the ICollection<T>. AddRange(IEnumerable<FeedItem>?) Adds the list of items to the ICollection<T>. public void AddRange(IEnumerable<FeedItem>? items) Parameters items IEnumerable<FeedItem> The items to add. Clear() Removes all items from the ICollection<T>. public void Clear() CompareTo(Channel?) Compares the current Channel object with another Channel object. public int CompareTo(Channel? other) Parameters other Channel The Channel object to compare with the current Channel object. Returns int A value indicating the relative order of the objects being compared. The return value has the following meanings: Less than zero: The current object is less than the other object. Zero: The current object is equal to the other object. Greater than zero: The current object is greater than the other object. Contains(FeedItem?) Determines whether the ICollection<T> contains a specific value. public bool Contains(FeedItem? item) Parameters item FeedItem The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(FeedItem[]?, int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(FeedItem[]? array, int arrayIndex) Parameters array FeedItem[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Equals(Channel?) Determines whether the specified Channel object is equal to the current Channel object. public bool Equals(Channel? other) Parameters other Channel The Channel object to compare with the current Channel object. Returns bool true if the specified Channel object is equal to the current Channel object; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<FeedItem> GetEnumerator() Returns IEnumerator<FeedItem> An enumerator that can be used to iterate through the collection. GetHashCode() Computes the hash code for the current Channel object. public override int GetHashCode() Returns int The computed hash code. IndexOf(FeedItem?) Determines the index of a specific item in the IList<T>. public int IndexOf(FeedItem? item) Parameters item FeedItem The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, FeedItem?) Inserts an item to the IList<T> at the specified index. public void Insert(int index, FeedItem? item) Parameters index int The zero-based index at which item should be inserted. item FeedItem The object to insert into the IList<T>. Remove(FeedItem?) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(FeedItem? item) Parameters item FeedItem The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. ToString() Converts the Channel object to its string representation. public override string ToString() Returns string A string that represents the current Channel object. Operators operator ==(Channel?, Channel?) Are the two channels equal each other. public static bool operator ==(Channel? left, Channel? right) Parameters left Channel The first channel to compare. right Channel The second channel to compare. Returns bool True if the two channels are equal; otherwise, false. operator >(Channel?, Channel?) Is the first channel greater than the second channel. public static bool operator >(Channel? left, Channel? right) Parameters left Channel The first channel to compare. right Channel The second channel to compare. Returns bool True if the first channel is greater than the second channel; otherwise, false. operator >=(Channel?, Channel?) Is the first channel greater than or equal to the second channel. public static bool operator >=(Channel? left, Channel? right) Parameters left Channel The first channel to compare. right Channel The second channel to compare. Returns bool True if the first channel is greater than or equal to the second channel; otherwise, false. operator !=(Channel?, Channel?) Are the two channels not equal each other. public static bool operator !=(Channel? left, Channel? right) Parameters left Channel The first channel to compare. right Channel The second channel to compare. Returns bool True if the two channels are not equal; otherwise, false. operator <(Channel?, Channel?) Is the first channel less than the second channel. public static bool operator <(Channel? left, Channel? right) Parameters left Channel The first channel to compare. right Channel The second channel to compare. Returns bool True if the first channel is less than the second channel; otherwise, false. operator <=(Channel?, Channel?) Is the first channel less than or equal to the second channel. public static bool operator <=(Channel? left, Channel? right) Parameters left Channel The first channel to compare. right Channel The second channel to compare. Returns bool True if the first channel is less than or equal to the second channel; otherwise, false."
  },
  "api/Archivist.DataTypes.Feeds.Enclosure.html": {
    "href": "api/Archivist.DataTypes.Feeds.Enclosure.html",
    "title": "Class Enclosure | Archivist API Reference",
    "keywords": "Class Enclosure Namespace Archivist.DataTypes.Feeds Assembly Archivist.dll Enclosure public class Enclosure : IComparable<Enclosure>, IEquatable<Enclosure> Inheritance object Enclosure Implements IComparable<Enclosure> IEquatable<Enclosure> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Enclosure() Initializes a new instance of the Enclosure class. public Enclosure() Enclosure(string?, string?, int) Initializes a new instance of the Enclosure class. public Enclosure(string? type, string? url, int length) Parameters type string The file type. url string The location of the item. length int The size in bytes. Properties Length Gets or sets the size in bytes. public int Length { get; set; } Property Value int Type Gets or sets the file type. public string? Type { get; set; } Property Value string Url Gets or sets the location of the item. public string? Url { get; set; } Property Value string Methods CompareTo(Enclosure?) Compares the enclosure to another enclosure based on their content. public int CompareTo(Enclosure? other) Parameters other Enclosure The other enclosure to compare. Returns int An integer that indicates the relative order of the enclosures. Equals(Enclosure?) Determines whether two enclosures are equal. public bool Equals(Enclosure? other) Parameters other Enclosure The object to compare. Returns bool True if the two enclosures are equal; otherwise, false. Equals(object?) Determines whether two enclosures are equal. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the two enclosures are equal; otherwise, false. GetHashCode() Gets the hash code for the enclosure. public override int GetHashCode() Returns int The hash code for the enclosure. ToString() Returns a string that represents the current enclosure. public override string ToString() Returns string A string that represents the current enclosure. Operators operator ==(Enclosure?, Enclosure?) Determines whether two enclosures are equal. public static bool operator ==(Enclosure? left, Enclosure? right) Parameters left Enclosure The first enclosure to compare. right Enclosure The second enclosure to compare. Returns bool True if the two enclosures are equal; otherwise, false. operator >(Enclosure?, Enclosure?) Determines whether the first enclosure is greater than the second enclosure. public static bool operator >(Enclosure? left, Enclosure? right) Parameters left Enclosure The first enclosure to compare. right Enclosure The second enclosure to compare. Returns bool True if the first enclosure is greater than the second enclosure; otherwise, false. operator >=(Enclosure?, Enclosure?) Determines whether the first enclosure is greater than or equal to the second enclosure. public static bool operator >=(Enclosure? left, Enclosure? right) Parameters left Enclosure The first enclosure to compare. right Enclosure The second enclosure to compare. Returns bool True if the first enclosure is greater than or equal to the second enclosure; otherwise, false. operator !=(Enclosure?, Enclosure?) Determines whether two enclosures are not equal. public static bool operator !=(Enclosure? left, Enclosure? right) Parameters left Enclosure The first enclosure to compare. right Enclosure The second enclosure to compare. Returns bool True if the two enclosures are not equal; otherwise, false. operator <(Enclosure?, Enclosure?) Determines whether the first enclosure is less than the second enclosure. public static bool operator <(Enclosure? left, Enclosure? right) Parameters left Enclosure The first enclosure to compare. right Enclosure The second enclosure to compare. Returns bool True if the first enclosure is less than the second enclosure; otherwise, false. operator <=(Enclosure?, Enclosure?) Determines whether the first enclosure is less than or equal to the second enclosure. public static bool operator <=(Enclosure? left, Enclosure? right) Parameters left Enclosure The first enclosure to compare. right Enclosure The second enclosure to compare. Returns bool True if the first enclosure is less than or equal to the second enclosure; otherwise, false."
  },
  "api/Archivist.DataTypes.Feeds.FeedGuid.html": {
    "href": "api/Archivist.DataTypes.Feeds.FeedGuid.html",
    "title": "Class FeedGuid | Archivist API Reference",
    "keywords": "Class FeedGuid Namespace Archivist.DataTypes.Feeds Assembly Archivist.dll Feed GUID for RSS feeds. public class FeedGuid : IComparable<FeedGuid>, IEquatable<FeedGuid> Inheritance object FeedGuid Implements IComparable<FeedGuid> IEquatable<FeedGuid> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FeedGuid() Creates a new instance of FeedGuid. public FeedGuid() FeedGuid(string?, bool) Creates a new instance of FeedGuid. public FeedGuid(string? guidText, bool isPermaLink = false) Parameters guidText string The GUID text. isPermaLink bool Is this a perma link? Properties GuidText GUID Text public string? GuidText { get; set; } Property Value string IsPermaLink Is this a perma link? public bool IsPermaLink { get; set; } Property Value bool Methods CompareTo(FeedGuid?) Compares the current instance with another FeedGuid and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other FeedGuid. public int CompareTo(FeedGuid? other) Parameters other FeedGuid The FeedGuid to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. Equals(FeedGuid?) Determines whether the specified FeedGuid is equal to the current FeedGuid. public bool Equals(FeedGuid? other) Parameters other FeedGuid The FeedGuid to compare with the current FeedGuid. Returns bool True if the specified FeedGuid is equal to the current FeedGuid; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current FeedGuid. public override bool Equals(object? obj) Parameters obj object The object to compare with the current FeedGuid. Returns bool True if the specified object is equal to the current FeedGuid; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current FeedGuid. ToString() Returns a string that represents the current FeedGuid. public override string ToString() Returns string A string formatted for RSS output. Operators operator ==(FeedGuid?, FeedGuid?) Determines whether two guids are equal. public static bool operator ==(FeedGuid? left, FeedGuid? right) Parameters left FeedGuid The first guid to compare. right FeedGuid The second guid to compare. Returns bool True if the two guids are equal; otherwise, false. operator >(FeedGuid?, FeedGuid?) Determines whether the left FeedGuid is greater than the right FeedGuid. public static bool operator >(FeedGuid? left, FeedGuid? right) Parameters left FeedGuid The first FeedGuid to compare. right FeedGuid The second FeedGuid to compare. Returns bool True if the left FeedGuid is greater than the right FeedGuid; otherwise, false. operator >=(FeedGuid?, FeedGuid?) Determines whether the left FeedGuid is greater than or equal to the right FeedGuid. public static bool operator >=(FeedGuid? left, FeedGuid? right) Parameters left FeedGuid The first FeedGuid to compare. right FeedGuid The second FeedGuid to compare. Returns bool True if the left FeedGuid is greater than or equal to the right FeedGuid; otherwise, false. operator !=(FeedGuid?, FeedGuid?) Determines whether two guids are not equal. public static bool operator !=(FeedGuid? left, FeedGuid? right) Parameters left FeedGuid The first guid to compare. right FeedGuid The second guid to compare. Returns bool True if the two guids are not equal; otherwise, false. operator <(FeedGuid?, FeedGuid?) Determines whether the left FeedGuid is less than the right FeedGuid. public static bool operator <(FeedGuid? left, FeedGuid? right) Parameters left FeedGuid The first FeedGuid to compare. right FeedGuid The second FeedGuid to compare. Returns bool True if the left FeedGuid is less than the right FeedGuid; otherwise, false. operator <=(FeedGuid?, FeedGuid?) Determines whether the left FeedGuid is less than or equal to the right FeedGuid. public static bool operator <=(FeedGuid? left, FeedGuid? right) Parameters left FeedGuid The first FeedGuid to compare. right FeedGuid The second FeedGuid to compare. Returns bool True if the left FeedGuid is less than or equal to the right FeedGuid; otherwise, false. See Also IComparable<T> IEquatable<T>"
  },
  "api/Archivist.DataTypes.Feeds.FeedItem.html": {
    "href": "api/Archivist.DataTypes.Feeds.FeedItem.html",
    "title": "Class FeedItem | Archivist API Reference",
    "keywords": "Class FeedItem Namespace Archivist.DataTypes.Feeds Assembly Archivist.dll Feed item public class FeedItem : IComparable<FeedItem>, IEquatable<FeedItem> Inheritance object FeedItem Implements IComparable<FeedItem> IEquatable<FeedItem> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Author Author public string? Author { get; set; } Property Value string Categories Categories public List<string> Categories { get; } Property Value List<string> Description Description public string? Description { get; set; } Property Value string Enclosure Enclosure public Enclosure? Enclosure { get; set; } Property Value Enclosure GUID GUID for the item public FeedGuid? GUID { get; set; } Property Value FeedGuid Link Link public string? Link { get; set; } Property Value string PubDate Gets the local publication date. public DateTime PubDate { get; } Property Value DateTime PubDateUtc Publication date public DateTime PubDateUtc { get; set; } Property Value DateTime Thumbnail Thumbnail public Thumbnail? Thumbnail { get; set; } Property Value Thumbnail Title Title public string? Title { get; set; } Property Value string Methods CompareTo(FeedItem?) Compares the current instance with another FeedItem and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other FeedItem. public int CompareTo(FeedItem? other) Parameters other FeedItem The FeedItem to compare with the current instance. Returns int A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(FeedItem?) Determines whether the specified FeedItem is equal to the current FeedItem. public bool Equals(FeedItem? other) Parameters other FeedItem The object to compare with the current FeedItem. Returns bool true if the specified object is equal to the current FeedItem; otherwise, false. Equals(object?) Determines whether the specified FeedItem is equal to the current FeedItem. public override bool Equals(object? obj) Parameters obj object The object to compare with the current FeedItem. Returns bool true if the specified object is equal to the current FeedItem; otherwise, false. GetHashCode() Calculates the hash code for the current FeedItem instance. public override int GetHashCode() Returns int The calculated hash code. ToString() Outputs a string ready for RSS public override string ToString() Returns string A string formatted for RSS Operators operator ==(FeedItem?, FeedItem?) Determines whether two instances of FeedItem are equal. public static bool operator ==(FeedItem? left, FeedItem? right) Parameters left FeedItem The first FeedItem to compare. right FeedItem The second FeedItem to compare. Returns bool true if the two instances are equal; otherwise, false. operator >(FeedItem?, FeedItem?) Determines whether the specified FeedItem is greater than another specified FeedItem. public static bool operator >(FeedItem? left, FeedItem? right) Parameters left FeedItem The first FeedItem to compare. right FeedItem The second FeedItem to compare. Returns bool true if the first FeedItem is greater than the second FeedItem; otherwise, false. operator >=(FeedItem?, FeedItem?) Determines whether the specified FeedItem is greater than or equal to another specified FeedItem. public static bool operator >=(FeedItem? left, FeedItem? right) Parameters left FeedItem The first FeedItem to compare. right FeedItem The second FeedItem to compare. Returns bool true if the first FeedItem is greater than or equal to the second FeedItem; otherwise, false. operator !=(FeedItem?, FeedItem?) Determines whether two instances of FeedItem are not equal. public static bool operator !=(FeedItem? left, FeedItem? right) Parameters left FeedItem The first FeedItem to compare. right FeedItem The second FeedItem to compare. Returns bool true if the two instances are not equal; otherwise, false. operator <(FeedItem?, FeedItem?) Determines whether the specified FeedItem is less than another specified FeedItem. public static bool operator <(FeedItem? left, FeedItem? right) Parameters left FeedItem The first FeedItem to compare. right FeedItem The second FeedItem to compare. Returns bool true if the first FeedItem is less than the second FeedItem; otherwise, false. operator <=(FeedItem?, FeedItem?) Determines whether the specified FeedItem is less than or equal to another specified FeedItem. public static bool operator <=(FeedItem? left, FeedItem? right) Parameters left FeedItem The first FeedItem to compare. right FeedItem The second FeedItem to compare. Returns bool true if the first FeedItem is less than or equal to the second FeedItem; otherwise, false."
  },
  "api/Archivist.DataTypes.Feeds.Thumbnail.html": {
    "href": "api/Archivist.DataTypes.Feeds.Thumbnail.html",
    "title": "Class Thumbnail | Archivist API Reference",
    "keywords": "Class Thumbnail Namespace Archivist.DataTypes.Feeds Assembly Archivist.dll Thumbnail public class Thumbnail : IComparable<Thumbnail>, IEquatable<Thumbnail> Inheritance object Thumbnail Implements IComparable<Thumbnail> IEquatable<Thumbnail> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Thumbnail() Initializes a new instance of the Thumbnail class. public Thumbnail() Thumbnail(string?, int, int) Initializes a new instance of the Thumbnail class. public Thumbnail(string? url, int height = 0, int width = 0) Parameters url string The url height int The height width int The width Properties Height Image height public int Height { get; set; } Property Value int Url Location of the item public string? Url { get; set; } Property Value string Width Image width public int Width { get; set; } Property Value int Methods CompareTo(Thumbnail?) Compares the current Thumbnail object with another Thumbnail object. public int CompareTo(Thumbnail? other) Parameters other Thumbnail The Thumbnail object to compare with the current object. Returns int A value that indicates the relative order of the objects being compared. Equals(Thumbnail?) Determines whether the current Thumbnail object is equal to another Thumbnail object. public bool Equals(Thumbnail? other) Parameters other Thumbnail The Thumbnail object to compare with the current object. Returns bool true if the current Thumbnail object is equal to the other parameter; otherwise, false. Equals(object?) Determines whether the current Thumbnail object is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the current Thumbnail object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for the current Thumbnail object. public override int GetHashCode() Returns int A 32-bit signed integer hash code. ToString() Returns a string that represents the current Thumbnail object. public override string ToString() Returns string A string that represents the current Thumbnail object. Operators operator ==(Thumbnail?, Thumbnail?) Determines whether two Thumbnail objects are equal. public static bool operator ==(Thumbnail? left, Thumbnail? right) Parameters left Thumbnail The first Thumbnail object to compare. right Thumbnail The second Thumbnail object to compare. Returns bool true if the two Thumbnail objects are equal; otherwise, false. operator >(Thumbnail?, Thumbnail?) Determines whether the first Thumbnail object is greater than the second Thumbnail object. public static bool operator >(Thumbnail? left, Thumbnail? right) Parameters left Thumbnail The first Thumbnail object to compare. right Thumbnail The second Thumbnail object to compare. Returns bool true if the first Thumbnail object is greater than the second Thumbnail object; otherwise, false. operator >=(Thumbnail?, Thumbnail?) Determines whether the first Thumbnail object is greater than or equal to the second Thumbnail object. public static bool operator >=(Thumbnail? left, Thumbnail? right) Parameters left Thumbnail The first Thumbnail object to compare. right Thumbnail The second Thumbnail object to compare. Returns bool true if the first Thumbnail object is greater than or equal to the second Thumbnail object; otherwise, false. operator !=(Thumbnail?, Thumbnail?) Determines whether two Thumbnail objects are not equal. public static bool operator !=(Thumbnail? left, Thumbnail? right) Parameters left Thumbnail The first Thumbnail object to compare. right Thumbnail The second Thumbnail object to compare. Returns bool true if the two Thumbnail objects are not equal; otherwise, false. operator <(Thumbnail?, Thumbnail?) Determines whether the first Thumbnail object is less than the second Thumbnail object. public static bool operator <(Thumbnail? left, Thumbnail? right) Parameters left Thumbnail The first Thumbnail object to compare. right Thumbnail The second Thumbnail object to compare. Returns bool true if the first Thumbnail object is less than the second Thumbnail object; otherwise, false. operator <=(Thumbnail?, Thumbnail?) Determines whether the first Thumbnail object is less than or equal to the second Thumbnail object. public static bool operator <=(Thumbnail? left, Thumbnail? right) Parameters left Thumbnail The first Thumbnail object to compare. right Thumbnail The second Thumbnail object to compare. Returns bool true if the first Thumbnail object is less than or equal to the second Thumbnail object; otherwise, false."
  },
  "api/Archivist.DataTypes.Feeds.html": {
    "href": "api/Archivist.DataTypes.Feeds.html",
    "title": "Namespace Archivist.DataTypes.Feeds | Archivist API Reference",
    "keywords": "Namespace Archivist.DataTypes.Feeds Classes Channel Channel Enclosure Enclosure FeedGuid Feed GUID for RSS feeds. FeedItem Feed item Thumbnail Thumbnail"
  },
  "api/Archivist.DataTypes.FixedLengthField.html": {
    "href": "api/Archivist.DataTypes.FixedLengthField.html",
    "title": "Class FixedLengthField | Archivist API Reference",
    "keywords": "Class FixedLengthField Namespace Archivist.DataTypes Assembly Archivist.dll Represents a fixed-length field. public class FixedLengthField : IComparable<FixedLengthField>, IEquatable<FixedLengthField>, IObjectConvertable Inheritance object FixedLengthField Implements IComparable<FixedLengthField> IEquatable<FixedLengthField> IObjectConvertable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FixedLengthField(string?, int, char, bool) Initializes a new instance of the FixedLengthField class. public FixedLengthField(string? value, int maxLength, char fillerCharacter = ' ', bool leftAligned = true) Parameters value string The value of the field. maxLength int The maximum length of the field. fillerCharacter char The filler character used to pad the field. leftAligned bool Specifies whether the field is left-aligned or not. Properties FillerCharacter Gets the filler character used to pad the field. public char FillerCharacter { get; } Property Value char LeftAligned Gets a value indicating whether the field is left-aligned or not. public bool LeftAligned { get; } Property Value bool MaxLength Gets or sets the maximum length of the field. public int MaxLength { get; } Property Value int Value Gets or sets the value of the field. public string Value { get; set; } Property Value string Methods CompareTo(FixedLengthField?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(FixedLengthField? other) Parameters other FixedLengthField The other field. Returns int A value that indicates the relative order of the objects being compared. ConvertFrom<TObject>(TObject) Converts the content of the field from the specified type to a FixedLengthField. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to convert. Type Parameters TObject The type to convert the content from. ConvertTo<TObject>() Converts the content of the field to the specified type. public TObject? ConvertTo<TObject>() Returns TObject The converted content of the field. Type Parameters TObject The type to convert the content to. Equals(FixedLengthField?) Determines whether the specified object is equal to the current object. public bool Equals(FixedLengthField? other) Parameters other FixedLengthField The object to compare with the current object. Returns bool True if they are the same, otherwise false. Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool True if they are the same, otherwise false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int The hash code for this instance. ToString() Returns the string representation of the field. public override string ToString() Returns string The string representation of the field. Operators operator ==(FixedLengthField?, FixedLengthField?) Determines whether two FixedLengthField objects are equal. public static bool operator ==(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the two FixedLengthField objects are equal; otherwise, false. operator >(FixedLengthField?, FixedLengthField?) Determines whether the first FixedLengthField object is greater than the second FixedLengthField object. public static bool operator >(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the first FixedLengthField object is greater than the second FixedLengthField object; otherwise, false. operator >=(FixedLengthField?, FixedLengthField?) Determines whether the first FixedLengthField object is greater than or equal to the second FixedLengthField object. public static bool operator >=(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the first FixedLengthField object is greater than or equal to the second FixedLengthField object; otherwise, false. operator !=(FixedLengthField?, FixedLengthField?) Determines whether two FixedLengthField objects are not equal. public static bool operator !=(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the two FixedLengthField objects are not equal; otherwise, false. operator <(FixedLengthField?, FixedLengthField?) Determines whether the first FixedLengthField object is less than the second FixedLengthField object. public static bool operator <(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the first FixedLengthField object is less than the second FixedLengthField object; otherwise, false. operator <=(FixedLengthField?, FixedLengthField?) Determines whether the first FixedLengthField object is less than or equal to the second FixedLengthField object. public static bool operator <=(FixedLengthField? left, FixedLengthField? right) Parameters left FixedLengthField The first FixedLengthField to compare. right FixedLengthField The second FixedLengthField to compare. Returns bool true if the first FixedLengthField object is less than or equal to the second FixedLengthField object; otherwise, false."
  },
  "api/Archivist.DataTypes.FixedLengthFile.html": {
    "href": "api/Archivist.DataTypes.FixedLengthFile.html",
    "title": "Class FixedLengthFile | Archivist API Reference",
    "keywords": "Class FixedLengthFile Namespace Archivist.DataTypes Assembly Archivist.dll Represents a fixed-length file. public class FixedLengthFile : FileBaseClass<FixedLengthFile>, IGenericFile, IEquatable<FixedLengthFile>, IComparable<FixedLengthFile> Inheritance object FileBaseClass<FixedLengthFile> FixedLengthFile Implements IGenericFile IEquatable<FixedLengthFile> IComparable<FixedLengthFile> Inherited Members FileBaseClass<FixedLengthFile>.Metadata FileBaseClass<FixedLengthFile>.Title FileBaseClass<FixedLengthFile>.Converter FileBaseClass<FixedLengthFile>.CompareTo(object) FileBaseClass<FixedLengthFile>.ToFileType<TFile>() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FixedLengthFile() Initializes a new instance of the FixedLengthFile class with the default line separator. public FixedLengthFile() FixedLengthFile(Convertinator?, string) Initializes a new instance of the FixedLengthFile class with the specified line separator. public FixedLengthFile(Convertinator? converter, string lineSeparator = \"\\r\\n\") Parameters converter Convertinator The type converter. lineSeparator string The line separator to use. FixedLengthFile(string) Initializes a new instance of the FixedLengthFile class with the specified line separator. public FixedLengthFile(string lineSeparator) Parameters lineSeparator string The line separator to use. Properties LineSeparator Gets the line separator used in the fixed-length file. public string LineSeparator { get; } Property Value string Records Gets the list of fixed-length records in the file. public List<FixedLengthRecord> Records { get; } Property Value List<FixedLengthRecord> Methods CompareTo(FixedLengthFile?) Compares the current fixed-length file with another fixed-length file. public override int CompareTo(FixedLengthFile? other) Parameters other FixedLengthFile The other fixed-length file to compare. Returns int An integer that indicates the relative order of the objects being compared. Equals(FixedLengthFile?) Determines whether the current fixed-length file is equal to another fixed-length file. public override bool Equals(FixedLengthFile? other) Parameters other FixedLengthFile The other fixed-length file to compare. Returns bool True if the current fixed-length file is equal to the other fixed-length file; otherwise, false. Equals(object?) Determines whether the current fixed-length file is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current fixed-length file. Returns bool True if the current fixed-length file is equal to the other object; otherwise, false. GetContent() Gets the content of the fixed-length file as a string. public override string? GetContent() Returns string A string that represents the content of the fixed-length file. GetHashCode() Gets the hash code for the fixed-length file. public override int GetHashCode() Returns int An integer representing the hash code. ToString() Returns a string that represents the current fixed-length file. public override string ToString() Returns string A string that represents the current fixed-length file. Operators operator ==(FixedLengthFile?, FixedLengthFile?) Determines whether two fixed-length files are equal. public static bool operator ==(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the two fixed-length files are equal; otherwise, false. operator >(FixedLengthFile?, FixedLengthFile?) Determines whether the first fixed-length file is greater than the second fixed-length file. public static bool operator >(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the first fixed-length file is greater than the second fixed-length file; otherwise, false. operator >=(FixedLengthFile?, FixedLengthFile?) Determines whether the first fixed-length file is greater than or equal to the second fixed-length file. public static bool operator >=(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the first fixed-length file is greater than or equal to the second fixed-length file; otherwise, false. operator !=(FixedLengthFile?, FixedLengthFile?) Determines whether two fixed-length files are not equal. public static bool operator !=(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the two fixed-length files are not equal; otherwise, false. operator <(FixedLengthFile?, FixedLengthFile?) Determines whether the first fixed-length file is less than the second fixed-length file. public static bool operator <(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the first fixed-length file is less than the second fixed-length file; otherwise, false. operator <=(FixedLengthFile?, FixedLengthFile?) Determines whether the first fixed-length file is less than or equal to the second fixed-length file. public static bool operator <=(FixedLengthFile? left, FixedLengthFile? right) Parameters left FixedLengthFile The first fixed-length file to compare. right FixedLengthFile The second fixed-length file to compare. Returns bool True if the first fixed-length file is less than or equal to the second fixed-length file; otherwise, false."
  },
  "api/Archivist.DataTypes.FixedLengthRecord.html": {
    "href": "api/Archivist.DataTypes.FixedLengthRecord.html",
    "title": "Class FixedLengthRecord | Archivist API Reference",
    "keywords": "Class FixedLengthRecord Namespace Archivist.DataTypes Assembly Archivist.dll Represents a fixed-length record. public class FixedLengthRecord : IEnumerable<FixedLengthField>, IEnumerable, IComparable<FixedLengthRecord>, IEquatable<FixedLengthRecord> Inheritance object FixedLengthRecord Implements IEnumerable<FixedLengthField> IEnumerable IComparable<FixedLengthRecord> IEquatable<FixedLengthRecord> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Count Gets the number of fields in the record. public int Count { get; } Property Value int Fields Gets the list of fields in the record. public List<FixedLengthField> Fields { get; } Property Value List<FixedLengthField> Length Gets the total length of the record. public int Length { get; } Property Value int Methods CompareTo(FixedLengthRecord?) Compares the current fixed-length record with another fixed-length record and returns an integer that indicates whether the current record is shorter, equal to, or longer than the other record. public int CompareTo(FixedLengthRecord? other) Parameters other FixedLengthRecord The fixed-length record to compare with the current record. Returns int A positive integer if the current record is longer than the other record, zero if they are of equal length, or a negative integer if the current record is shorter than the other record. Equals(FixedLengthRecord?) Determines whether the current fixed-length record is equal to another fixed-length record. public bool Equals(FixedLengthRecord? other) Parameters other FixedLengthRecord The fixed-length record to compare with the current record. Returns bool true if the current fixed-length record is equal to the other record; otherwise, false. Equals(object?) Determines whether the current fixed-length record is equal to the specified object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current fixed-length record. Returns bool true if the current fixed-length record is equal to the specified object; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the fields in the record. public IEnumerator<FixedLengthField> GetEnumerator() Returns IEnumerator<FixedLengthField> An enumerator that can be used to iterate through the fields in the record. GetHashCode() Returns the hash code for the current fixed-length record. public override int GetHashCode() Returns int A 32-bit signed integer hash code. ToString() The string representation of the fixed-length record. public override string ToString() Returns string The string representation of the fixed-length record. Operators operator ==(FixedLengthRecord?, FixedLengthRecord?) Determines whether two fixed-length records are equal. public static bool operator ==(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the two fixed-length records are equal; otherwise, false. operator >(FixedLengthRecord?, FixedLengthRecord?) Determines whether the first fixed-length record is greater than the second fixed-length record. public static bool operator >(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the first fixed-length record is greater than the second fixed-length record; otherwise, false. operator >=(FixedLengthRecord?, FixedLengthRecord?) Determines whether the first fixed-length record is greater than or equal to the second fixed-length record. public static bool operator >=(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the first fixed-length record is greater than or equal to the second fixed-length record; otherwise, false. operator !=(FixedLengthRecord?, FixedLengthRecord?) Determines whether two fixed-length records are not equal. public static bool operator !=(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the two fixed-length records are not equal; otherwise, false. operator <(FixedLengthRecord?, FixedLengthRecord?) Determines whether the first fixed-length record is less than the second fixed-length record. public static bool operator <(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the first fixed-length record is less than the second fixed-length record; otherwise, false. operator <=(FixedLengthRecord?, FixedLengthRecord?) Determines whether the first fixed-length record is less than or equal to the second fixed-length record. public static bool operator <=(FixedLengthRecord? left, FixedLengthRecord? right) Parameters left FixedLengthRecord The first fixed-length record to compare. right FixedLengthRecord The second fixed-length record to compare. Returns bool true if the first fixed-length record is less than or equal to the second fixed-length record; otherwise, false."
  },
  "api/Archivist.DataTypes.Image.html": {
    "href": "api/Archivist.DataTypes.Image.html",
    "title": "Class Image | Archivist API Reference",
    "keywords": "Class Image Namespace Archivist.DataTypes Assembly Archivist.dll Image data type. public class Image : FileBaseClass<Image>, IGenericFile, IComparable<Image>, IEquatable<Image> Inheritance object FileBaseClass<Image> Image Implements IGenericFile IComparable<Image> IEquatable<Image> Inherited Members FileBaseClass<Image>.Metadata FileBaseClass<Image>.Title FileBaseClass<Image>.Converter FileBaseClass<Image>.CompareTo(object) FileBaseClass<Image>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Image() Initializes a new instance of the Image class. public Image() Image(Convertinator?) Initializes a new instance of the Image class with the specified converter. public Image(Convertinator? converter) Parameters converter Convertinator The converter to use. Properties BytesPerPixel Gets or sets the number of bytes per pixel. public int BytesPerPixel { get; set; } Property Value int Data Gets or sets the data of the image. public byte[] Data { get; set; } Property Value byte[] Description The description of the image (if using OCR/LLM processor, that information will be stored here). public string Description { get; set; } Property Value string Height Gets or sets the height of the image. public int Height { get; set; } Property Value int ImageType Gets or sets the type of the image. public string ImageType { get; set; } Property Value string Width Gets or sets the width of the image. public int Width { get; set; } Property Value int Methods CompareTo(Image?) Compares the Image to another Image based on their content. public override int CompareTo(Image? other) Parameters other Image The other Image to compare. Returns int An integer that indicates the relative order of the Images. Equals(Image?) Determines whether the Image is equal to another Image based on their content. public override bool Equals(Image? other) Parameters other Image The other Image to compare. Returns bool True if the Images are equal; otherwise, false. Equals(object?) Determines whether the Image is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the Image is equal to the object; otherwise, false. GetContent() Gets the content of the Image. public override string? GetContent() Returns string The content of the Image. GetHashCode() Gets the hash code of the Image based on its content. public override int GetHashCode() Returns int The hash code of the Image. ToFileType<TFile>() Converts the Image to the specified object type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The converted Image. Type Parameters TFile The type to convert the Image to. Operators operator ==(Image?, Image?) Determines whether two Image objects are equal. public static bool operator ==(Image? left, Image? right) Parameters left Image The first Image to compare. right Image The second Image to compare. Returns bool True if the Image objects are equal; otherwise, false. operator >(Image?, Image?) Determines whether one Image object is greater than another Image object. public static bool operator >(Image? left, Image? right) Parameters left Image The first Image to compare. right Image The second Image to compare. Returns bool True if the first Image is greater than the second Image; otherwise, false. operator >=(Image?, Image?) Determines whether one Image object is greater than or equal to another Image object. public static bool operator >=(Image? left, Image? right) Parameters left Image The first Image to compare. right Image The second Image to compare. Returns bool True if the first Image is greater than or equal to the second Image; otherwise, false. implicit operator Calendar?(Image?) Converts the Image to a Calendar. public static implicit operator Calendar?(Image? file) Parameters file Image The Image to convert. Returns Calendar implicit operator Card?(Image?) Converts the Image to a Card. public static implicit operator Card?(Image? file) Parameters file Image The Image to convert. Returns Card The Card representation of the Image. implicit operator Feed?(Image?) Converts the Image to a Feed. public static implicit operator Feed?(Image? file) Parameters file Image The Image to convert. Returns Feed The Feed representation of the Image. implicit operator StructuredObject?(Image?) Converts the Image to a structured object. public static implicit operator StructuredObject?(Image? file) Parameters file Image The Image to convert. Returns StructuredObject The structured object representation of the Image. implicit operator Table?(Image?) Converts the Image to a table. public static implicit operator Table?(Image? file) Parameters file Image The Image to convert. Returns Table The table representation of the Image. implicit operator Tables?(Image?) Converts the Image to a Tables file. public static implicit operator Tables?(Image? file) Parameters file Image The Image to convert. Returns Tables The Tables representation of the Image. implicit operator Text?(Image?) Converts the Image to text. public static implicit operator Text?(Image? file) Parameters file Image The Image to convert. Returns Text The text representation of the Image. operator !=(Image?, Image?) Determines whether two Image objects are not equal. public static bool operator !=(Image? left, Image? right) Parameters left Image The first Image to compare. right Image The second Image to compare. Returns bool True if the Image objects are not equal; otherwise, false. operator <(Image?, Image?) Determines whether one Image object is less than another Image object. public static bool operator <(Image? left, Image? right) Parameters left Image The first Image to compare. right Image The second Image to compare. Returns bool True if the first Image is less than the second Image; otherwise, false. operator <=(Image?, Image?) Determines whether one Image object is less than or equal to another Image object. public static bool operator <=(Image? left, Image? right) Parameters left Image The first Image to compare. right Image The second Image to compare. Returns bool True if the first Image is less than or equal to the second Image; otherwise, false. See Also FileBaseClass<TFileType> IComparable<T> IEquatable<T>"
  },
  "api/Archivist.DataTypes.KeyValueField.html": {
    "href": "api/Archivist.DataTypes.KeyValueField.html",
    "title": "Class KeyValueField | Archivist API Reference",
    "keywords": "Class KeyValueField Namespace Archivist.DataTypes Assembly Archivist.dll Represents a field in a card. public class KeyValueField : IEquatable<KeyValueField>, IComparable<KeyValueField>, IObjectConvertable Inheritance object KeyValueField Implements IEquatable<KeyValueField> IComparable<KeyValueField> IObjectConvertable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors KeyValueField(KeyValueField?) Initializes a new instance of the KeyValueField class. public KeyValueField(KeyValueField? field) Parameters field KeyValueField The field to copy. KeyValueField(string?, IEnumerable<KeyValueParameter>?, string?) Initializes a new instance of the KeyValueField class. public KeyValueField(string? property, IEnumerable<KeyValueParameter>? parameters, string? value) Parameters property string The property of the field. parameters IEnumerable<KeyValueParameter> The parameters of the field. value string The value of the field. Properties Parameters Gets or sets the parameter of the field (sub type). public List<KeyValueParameter> Parameters { get; } Property Value List<KeyValueParameter> Property Gets or sets the property of the field (the type). public string Property { get; set; } Property Value string Value Gets or sets the value of the field. public string? Value { get; set; } Property Value string Methods CompareTo(KeyValueField?) Compares the current KeyValueField object with another KeyValueField object and returns an integer that indicates whether the current object precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(KeyValueField? other) Parameters other KeyValueField The KeyValueField object to compare with the current object. Returns int A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter. Zero This object is equal to other. Greater than zero This object is greater than other. ConvertFrom<TObject>(TObject) Converts the object to a string and sets the content of the field. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject Object to convert Type Parameters TObject Object type ConvertTo<TObject>() Converts the content of the field to the specified type. public TObject? ConvertTo<TObject>() Returns TObject The converted content of the field. Type Parameters TObject The type to convert the content to. Equals(KeyValueField?) Determines whether the specified KeyValueField object is equal to the current KeyValueField object. public bool Equals(KeyValueField? other) Parameters other KeyValueField The KeyValueField object to compare with the current object. Returns bool true if the specified KeyValueField object is equal to the current object; otherwise, false. Equals(object?) Determines whether the specified object is equal to the current KeyValueField object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Returns the hash code for the current KeyValueField object. public override int GetHashCode() Returns int A 32-bit signed integer hash code. ToString() Returns a string representation of the card field. public override string ToString() Returns string A string representation of the card field. Operators operator ==(KeyValueField?, KeyValueField?) Determines whether two KeyValueField objects are equal. public static bool operator ==(KeyValueField? left, KeyValueField? right) Parameters left KeyValueField The first KeyValueField to compare. right KeyValueField The second KeyValueField to compare. Returns bool true if the two KeyValueField objects are equal; otherwise, false. operator >(KeyValueField?, KeyValueField?) Compares two KeyValueField objects and determines whether the first one is greater than the second one. public static bool operator >(KeyValueField? left, KeyValueField? right) Parameters left KeyValueField The first KeyValueField to compare. right KeyValueField The second KeyValueField to compare. Returns bool true if the first KeyValueField is greater than the second one; otherwise, false. operator >=(KeyValueField?, KeyValueField?) Compares two KeyValueField objects and determines whether the first one is greater than or equal to the second one. public static bool operator >=(KeyValueField? left, KeyValueField? right) Parameters left KeyValueField The first KeyValueField to compare. right KeyValueField The second KeyValueField to compare. Returns bool true if the first KeyValueField is greater than or equal to the second one; otherwise, false. operator !=(KeyValueField?, KeyValueField?) Determines whether two KeyValueField objects are not equal. public static bool operator !=(KeyValueField? left, KeyValueField? right) Parameters left KeyValueField The first KeyValueField to compare. right KeyValueField The second KeyValueField to compare. Returns bool true if the two KeyValueField objects are not equal; otherwise, false. operator <(KeyValueField?, KeyValueField?) Compares two KeyValueField objects and determines whether the first one is less than the second one. public static bool operator <(KeyValueField? left, KeyValueField? right) Parameters left KeyValueField The first KeyValueField to compare. right KeyValueField The second KeyValueField to compare. Returns bool true if the first KeyValueField is less than the second one; otherwise, false. operator <=(KeyValueField?, KeyValueField?) Compares two KeyValueField objects and determines whether the first one is less than or equal to the second one. public static bool operator <=(KeyValueField? left, KeyValueField? right) Parameters left KeyValueField The first KeyValueField to compare. right KeyValueField The second KeyValueField to compare. Returns bool true if the first KeyValueField is less than or equal to the second one; otherwise, false."
  },
  "api/Archivist.DataTypes.KeyValueParameter.html": {
    "href": "api/Archivist.DataTypes.KeyValueParameter.html",
    "title": "Class KeyValueParameter | Archivist API Reference",
    "keywords": "Class KeyValueParameter Namespace Archivist.DataTypes Assembly Archivist.dll Represents a parameter for a card field. public class KeyValueParameter : IEquatable<KeyValueParameter>, IComparable<KeyValueParameter> Inheritance object KeyValueParameter Implements IEquatable<KeyValueParameter> IComparable<KeyValueParameter> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors KeyValueParameter(string?, string?) Initializes a new instance of the KeyValueParameter class. public KeyValueParameter(string? name, string? value) Parameters name string The name of the parameter. value string The value of the parameter. Properties Name Gets or sets the name of the parameter. public string? Name { get; set; } Property Value string Value Gets or sets the value of the parameter. public string? Value { get; set; } Property Value string Methods CompareTo(KeyValueParameter?) Compares the card field parameter to another card field parameter to determine the relative ordering of the two objects. public int CompareTo(KeyValueParameter? other) Parameters other KeyValueParameter The card field parameter to compare to this card field parameter. Returns int A value that indicates the relative ordering of the two objects. Equals(KeyValueParameter?) Compares the card field parameter to another card field parameter to determine if they are equal. public bool Equals(KeyValueParameter? other) Parameters other KeyValueParameter The card field parameter to compare to this card field parameter. Returns bool true if the card field parameter is equal to the other card field parameter; otherwise, false. Equals(object?) Determines whether the card field parameter is equal to the specified object. public override bool Equals(object? obj) Parameters obj object The object to compare with the card field parameter. Returns bool true if the card field parameter is equal to the object; otherwise, false. GetHashCode() Gets a hash code for the card field parameter. public override int GetHashCode() Returns int A hash code for the card field parameter. ToString() Returns a string representation of the card field parameter. public override string ToString() Returns string A string representation of the card field parameter. Operators operator ==(KeyValueParameter?, KeyValueParameter?) Determines whether the card field parameter is equal to the specified card field parameter. public static bool operator ==(KeyValueParameter? left, KeyValueParameter? right) Parameters left KeyValueParameter The card field parameter to compare with the card field parameter. right KeyValueParameter The card field parameter to compare with the card field parameter. Returns bool true if the card field parameter is equal to the other card field parameter; otherwise, false. operator >(KeyValueParameter?, KeyValueParameter?) Determines if the card field parameter is greater than another card field parameter. public static bool operator >(KeyValueParameter? left, KeyValueParameter? right) Parameters left KeyValueParameter The first card field parameter to compare. right KeyValueParameter The second card field parameter to compare. Returns bool true if the card field parameter is greater than the other card field parameter; otherwise, false. operator >=(KeyValueParameter?, KeyValueParameter?) Determines if the card field parameter is greater than or equal to another card field parameter. public static bool operator >=(KeyValueParameter? left, KeyValueParameter? right) Parameters left KeyValueParameter The first card field parameter to compare. right KeyValueParameter The second card field parameter to compare. Returns bool true if the card field parameter is greater than or equal to the other card field parameter; otherwise, false. operator !=(KeyValueParameter?, KeyValueParameter?) Determines whether two card field parameters are not equal. public static bool operator !=(KeyValueParameter? left, KeyValueParameter? right) Parameters left KeyValueParameter The first card field parameter to compare. right KeyValueParameter The second card field parameter to compare. Returns bool true if the card field parameters are not equal; otherwise, false. operator <(KeyValueParameter?, KeyValueParameter?) Determines if the card field parameter is less than another card field parameter. public static bool operator <(KeyValueParameter? left, KeyValueParameter? right) Parameters left KeyValueParameter The first card field parameter to compare. right KeyValueParameter The second card field parameter to compare. Returns bool true if the card field parameter is less than the other card field parameter; otherwise, false. operator <=(KeyValueParameter?, KeyValueParameter?) Determines if the card field parameter is less than or equal to another card field parameter. public static bool operator <=(KeyValueParameter? left, KeyValueParameter? right) Parameters left KeyValueParameter The first card field parameter to compare. right KeyValueParameter The second card field parameter to compare. Returns bool true if the card field parameter is less than or equal to the other card field parameter; otherwise, false."
  },
  "api/Archivist.DataTypes.StructuredObject.html": {
    "href": "api/Archivist.DataTypes.StructuredObject.html",
    "title": "Class StructuredObject | Archivist API Reference",
    "keywords": "Class StructuredObject Namespace Archivist.DataTypes Assembly Archivist.dll Represents a structured object. public class StructuredObject : FileBaseClass<StructuredObject>, IGenericFile, IComparable<StructuredObject>, IEquatable<StructuredObject>, IObjectConvertable, IDictionary<string, object?>, ICollection<KeyValuePair<string, object?>>, IEnumerable<KeyValuePair<string, object?>>, IEnumerable Inheritance object FileBaseClass<StructuredObject> StructuredObject Implements IGenericFile IComparable<StructuredObject> IEquatable<StructuredObject> IObjectConvertable IDictionary<string, object> ICollection<KeyValuePair<string, object>> IEnumerable<KeyValuePair<string, object>> IEnumerable Inherited Members FileBaseClass<StructuredObject>.Metadata FileBaseClass<StructuredObject>.Title FileBaseClass<StructuredObject>.Converter FileBaseClass<StructuredObject>.CompareTo(object) FileBaseClass<StructuredObject>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StructuredObject() Initializes a new instance of the StructuredObject class. public StructuredObject() StructuredObject(Convertinator?, IDictionary<string, object?>?) Initializes a new instance of the StructuredObject class with the specified content. public StructuredObject(Convertinator? converter, IDictionary<string, object?>? value) Parameters converter Convertinator The type converter. value IDictionary<string, object> The content of the structured object. StructuredObject(IDictionary<string, object?>?) Initializes a new instance of the StructuredObject class with the specified content. public StructuredObject(IDictionary<string, object?>? value) Parameters value IDictionary<string, object> The content of the structured object. Properties Count Gets the number of items in the structured object. public int Count { get; } Property Value int IsReadOnly Determines whether the structured object is read-only. public bool IsReadOnly { get; } Property Value bool this[string] Gets the value of the structured object with the specified key. public object? this[string key] { get; set; } Parameters key string The key of the value to get. Property Value object The value of the structured object with the specified key. Keys Keys in the structured object. public ICollection<string> Keys { get; } Property Value ICollection<string> Values Values in the structured object. public ICollection<object?> Values { get; } Property Value ICollection<object> Methods Add(KeyValuePair<string, object?>) Adds a key-value pair to the structured object. public void Add(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The key-value pair to add. Add(string, object?) Adds a key-value pair to the structured object. public void Add(string key, object? value) Parameters key string The key of the value to add. value object The value to add. Clear() Clears the structured object. public void Clear() CompareTo(StructuredObject?) Compares the current structured object with another structured object. public override int CompareTo(StructuredObject? other) Parameters other StructuredObject The structured object to compare with this structured object. Returns int A value indicating the relative order of the objects being compared. Contains(KeyValuePair<string, object?>) Determines whether the current structured object contains the specified key-value pair. public bool Contains(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The key-value pair to locate in the structured object. Returns bool True if the structured object contains the key-value pair; otherwise, false. ContainsKey(string) Determines whether the current structured object contains the specified key. public bool ContainsKey(string key) Parameters key string The key to locate in the structured object. Returns bool True if the structured object contains the key; otherwise, false. ConvertFrom<TObject>(TObject) Converts the structured object from the specified object. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to convert from. Type Parameters TObject The type of the object to convert from. ConvertTo<TObject>() Converts the structured object to the specified object type. public TObject? ConvertTo<TObject>() Returns TObject The converted object. Type Parameters TObject The type of the object to convert to. CopyTo(KeyValuePair<string, object?>[], int) Copies the key-value pairs of the structured object to an array. public void CopyTo(KeyValuePair<string, object?>[] array, int arrayIndex) Parameters array KeyValuePair<string, object>[] The array to copy the key-value pairs to. arrayIndex int The index in the array to start copying the key-value pairs to. Equals(StructuredObject?) Determines whether the current structured object is equal to another structured object. public override bool Equals(StructuredObject? other) Parameters other StructuredObject The structured object to compare with the current structured object. Returns bool true if the current structured object is equal to the other structured object; otherwise, false. Equals(object?) Determines whether the current structured object is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current structured object. Returns bool true if the current structured object is equal to the other object; otherwise, false. GetContent() Gets the content of the structured object as a string. public override string? GetContent() Returns string The content of the structured object as a string. GetEnumerator() Gets the enumerator for the structured object. public IEnumerator<KeyValuePair<string, object?>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, object>> The enumerator for the structured object. GetHashCode() Gets the hash code of the structured object. public override int GetHashCode() Returns int The hash code of the structured object. GetValue<TObject>(string) Gets the value of the structured object with the specified key. public TObject? GetValue<TObject>(string key) Parameters key string The key of the value to get. Returns TObject The value of the structured object with the specified key. Type Parameters TObject The type of the value to get. Remove(KeyValuePair<string, object?>) Removes the key-value pair with the specified key from the structured object. public bool Remove(KeyValuePair<string, object?> item) Parameters item KeyValuePair<string, object> The key-value pair to remove. Returns bool true if the key-value pair was removed; otherwise, false. Remove(string) Removes the key-value pair with the specified key from the structured object. public bool Remove(string key) Parameters key string The key of the key-value pair to remove. Returns bool true if the key-value pair was removed; otherwise, false. SetValue<TObject>(string, TObject) Sets the value of the structured object with the specified key. public StructuredObject SetValue<TObject>(string key, TObject value) Parameters key string The key of the value to set. value TObject Value to set Returns StructuredObject The structured object with the value set. Type Parameters TObject The type of the value to set. ToFileType<TFile>() Converts the structured object to the specified file type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The file of the specified type. Type Parameters TFile The type of the file. TryGetValue(string, out object?) Tries to get the value of the structured object with the specified key. public bool TryGetValue(string key, out object? value) Parameters key string The key of the value to get. value object The value of the structured object with the specified key. Returns bool true if the value was retrieved; otherwise, false. TryGetValue<TObject>(string, out TObject?) Tries to get the value of the structured object with the specified key. public bool TryGetValue<TObject>(string key, out TObject? value) Parameters key string The key of the value to get. value TObject The value of the structured object with the specified key. Returns bool true if the value was retrieved; otherwise, false. Type Parameters TObject The type of the value to get. Operators operator ==(StructuredObject?, StructuredObject?) Determines whether two structured objects are equal. public static bool operator ==(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the structured objects are equal; otherwise, false. operator >(StructuredObject?, StructuredObject?) Determines whether the left structured object is greater than the right structured object. public static bool operator >(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the left structured object is greater than the right structured object; otherwise, false. operator >=(StructuredObject?, StructuredObject?) Determines whether the left structured object is greater than or equal to the right structured object. public static bool operator >=(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the left structured object is greater than or equal to the right structured object; otherwise, false. implicit operator Calendar?(StructuredObject?) Converts the structured object to a calendar. public static implicit operator Calendar?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Calendar implicit operator Card?(StructuredObject?) Converts the structured object to a card. public static implicit operator Card?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Card implicit operator Feed?(StructuredObject?) Converts the structured object to a feed. public static implicit operator Feed?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Feed The feed representation of the structured object. implicit operator Image?(StructuredObject?) Converts the structured object to an image. public static implicit operator Image?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Image The image representation of the structured object. implicit operator Table?(StructuredObject?) Converts the structured object to a table. public static implicit operator Table?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Table implicit operator Tables?(StructuredObject?) Converts the structured object to a tables object. public static implicit operator Tables?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Tables implicit operator Text?(StructuredObject?) Converts the structured object to a text object. public static implicit operator Text?(StructuredObject? structuredObject) Parameters structuredObject StructuredObject The structured object to convert. Returns Text operator !=(StructuredObject?, StructuredObject?) Determines whether two structured objects are not equal. public static bool operator !=(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the structured objects are not equal; otherwise, false. operator <(StructuredObject?, StructuredObject?) Determines whether the left structured object is less than the right structured object. public static bool operator <(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the left structured object is less than the right structured object; otherwise, false. operator <=(StructuredObject?, StructuredObject?) Determines whether the left structured object is less than or equal to the right structured object. public static bool operator <=(StructuredObject? left, StructuredObject? right) Parameters left StructuredObject The left structured object. right StructuredObject The right structured object. Returns bool true if the left structured object is less than or equal to the right structured object; otherwise, false."
  },
  "api/Archivist.DataTypes.Table.html": {
    "href": "api/Archivist.DataTypes.Table.html",
    "title": "Class Table | Archivist API Reference",
    "keywords": "Class Table Namespace Archivist.DataTypes Assembly Archivist.dll Represents a table in the Archivist system. public class Table : FileBaseClass<Table>, IGenericFile, IComparable<Table>, IEquatable<Table>, IListConvertable, IList<TableRow>, ICollection<TableRow>, IEnumerable<TableRow>, IEnumerable Inheritance object FileBaseClass<Table> Table Implements IGenericFile IComparable<Table> IEquatable<Table> IListConvertable IList<TableRow> ICollection<TableRow> IEnumerable<TableRow> IEnumerable Inherited Members FileBaseClass<Table>.Metadata FileBaseClass<Table>.Title FileBaseClass<Table>.Converter FileBaseClass<Table>.CompareTo(object) FileBaseClass<Table>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Table() Initializes a new instance of the Table class. public Table() Table(Convertinator?, string) Initializes a new instance of the Table class. public Table(Convertinator? converter, string delimiter = \",\") Parameters converter Convertinator The type converter. delimiter string The delimiter used by the table. Table(string) Initializes a new instance of the Table class. public Table(string delimiter) Parameters delimiter string The delimiter used by the table. Properties Columns Gets the headers of the table. public List<string> Columns { get; } Property Value List<string> The headers. Count Gets the number of rows in the table. public int Count { get; } Property Value int Delimiter Gets or sets the delimiter used by the table. public string Delimiter { get; set; } Property Value string IsReadOnly Gets a value indicating whether the table is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the row at the specified index. public TableRow this[int index] { get; set; } Parameters index int The index of the table. Property Value TableRow The row at the specified index. Exceptions ArgumentOutOfRangeException The index is out of range. Methods Add(TableRow?) Adds a row to the table. public void Add(TableRow? item) Parameters item TableRow The row to add to the table. AddRow() Adds a new row to the table. public TableRow AddRow() Returns TableRow The new row. Clear() Clears the table. public void Clear() CompareTo(Table?) Compares the current table object with another table object. public override int CompareTo(Table? other) Parameters other Table The table object to compare with this table object. Returns int A value that indicates the relative order of the table objects being compared. Contains(TableRow?) Determines if the table contains the specified row. public bool Contains(TableRow? item) Parameters item TableRow The row to find in the table. Returns bool true if the table contains the row; otherwise, false>. ConvertFrom<TObject>(List<TObject?>) Copies the list object to the table. public void ConvertFrom<TObject>(List<TObject?> obj) Parameters obj List<TObject> The list object to copy to the table. Type Parameters TObject The type of the object. ConvertTo<TObject>() Converts this instance into the object array of the type specified. public List<TObject?> ConvertTo<TObject>() Returns List<TObject> The resulting array. Type Parameters TObject The type of the object. CopyTo(TableRow[]?, int) Copies the rows of the table to an array, starting at a particular array index. public void CopyTo(TableRow[]? array, int arrayIndex) Parameters array TableRow[] The array to copy the rows to. arrayIndex int The index in the array at which to start copying the rows. Equals(Table?) Determines whether the current table object is equal to another table object. public override bool Equals(Table? other) Parameters other Table The table object to compare with this table object. Returns bool true if the current table object is equal to the other table object; otherwise, false. Equals(object?) Determines whether the current table object is equal to another table object. public override bool Equals(object? obj) Parameters obj object The table object to compare with this table object. Returns bool true if the current table object is equal to the other table object; otherwise, false. GetContent() Gets the content of the table. public override string? GetContent() Returns string The content of the table. GetEnumerator() Returns an enumerator that iterates through the rows of the table. public IEnumerator<TableRow> GetEnumerator() Returns IEnumerator<TableRow> An enumerator that can be used to iterate through the rows of the table. GetHashCode() Returns the hash code for the current table object. public override int GetHashCode() Returns int A hash code for the current table object. IndexOf(TableRow?) Returns the index of the specified row in the table. public int IndexOf(TableRow? item) Parameters item TableRow The row to find in the table. Returns int The index of the row in the table. Insert(int, TableRow?) Inserts a row into the table at the specified index. public void Insert(int index, TableRow? item) Parameters index int The index at which to insert the row. item TableRow The row to insert into the table. Remove(TableRow?) Removes the first occurrence of a specific row from the table. public bool Remove(TableRow? item) Parameters item TableRow The row to remove from the table. Returns bool true if the row was successfully removed; otherwise, false>. RemoveAt(int) Removes the row at the specified index. public void RemoveAt(int index) Parameters index int The index of the row to remove. ToFileType<TFile>() Converts the table to the specified file type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The file of the specified type. Type Parameters TFile The type of the file. Operators operator ==(Table?, Table?) Determines whether two table objects are equal. public static bool operator ==(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the two table objects are equal; otherwise, false. operator >(Table?, Table?) Determines whether the first table object is greater than the second table object. public static bool operator >(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the first table object is greater than the second table object; otherwise, false. operator >=(Table?, Table?) Determines whether the first table object is greater than or equal to the second table object. public static bool operator >=(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the first table object is greater than or equal to the second table object; otherwise, false. implicit operator Calendar?(Table?) Converts the table to a calendar. public static implicit operator Calendar?(Table? file) Parameters file Table The table to convert. Returns Calendar implicit operator Card?(Table?) Converts the table to a card. public static implicit operator Card?(Table? file) Parameters file Table The table to convert. Returns Card The card representation of the table. implicit operator Feed?(Table?) Converts the table to a feed. public static implicit operator Feed?(Table? file) Parameters file Table The table to convert. Returns Feed The feed representation of the table. implicit operator Image?(Table?) Converts the table to an image. public static implicit operator Image?(Table? file) Parameters file Table The table to convert. Returns Image The image representation of the table. implicit operator StructuredObject?(Table?) Converts the table to a structured object. public static implicit operator StructuredObject?(Table? file) Parameters file Table The table to convert. Returns StructuredObject implicit operator Tables?(Table?) Converts the table to a tables object. public static implicit operator Tables?(Table? file) Parameters file Table The table to convert. Returns Tables The tables representation of the table. implicit operator Text?(Table?) Converts the table to a text object. public static implicit operator Text?(Table? file) Parameters file Table The table to convert. Returns Text The text representation of the table. operator !=(Table?, Table?) Determines whether two table objects are not equal. public static bool operator !=(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the two table objects are not equal; otherwise, false. operator <(Table?, Table?) Determines whether the first table object is less than the second table object. public static bool operator <(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the first table object is less than the second table object; otherwise, false. operator <=(Table?, Table?) Determines whether the first table object is less than or equal to the second table object. public static bool operator <=(Table? left, Table? right) Parameters left Table The first table object. right Table The second table object. Returns bool true if the first table object is less than or equal to the second table object; otherwise, false. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.TableCell.html": {
    "href": "api/Archivist.DataTypes.TableCell.html",
    "title": "Class TableCell | Archivist API Reference",
    "keywords": "Class TableCell Namespace Archivist.DataTypes Assembly Archivist.dll Represents a cell in a table. public class TableCell : IComparable<TableCell>, IEquatable<TableCell>, IObjectConvertable Inheritance object TableCell Implements IComparable<TableCell> IEquatable<TableCell> IObjectConvertable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TableCell(string?) Initializes a new instance of the TableCell class with the specified content. public TableCell(string? content) Parameters content string The content of the cell. Properties Content Gets or sets the content of the cell. public string? Content { get; set; } Property Value string Methods CompareTo(TableCell?) Compares the current TableCell with another TableCell. public int CompareTo(TableCell? other) Parameters other TableCell The TableCell to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. ConvertFrom<TObject>(TObject) Converts the object to a string and sets the content of the cell. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject Object to convert Type Parameters TObject Object type ConvertTo<TObject>() Converts the content of the TableCell to the specified type. public TObject? ConvertTo<TObject>() Returns TObject The converted content of the TableCell. Type Parameters TObject The type to convert the content to. Equals(TableCell?) Determines whether the current TableCell is equal to another TableCell. public bool Equals(TableCell? other) Parameters other TableCell The TableCell to compare with this instance. Returns bool true if the current TableCell is equal to the other TableCell; otherwise, false. Equals(object?) Determines whether the current TableCell is equal to another TableCell. public override bool Equals(object? obj) Parameters obj object The TableCell to compare with this instance. Returns bool true if the current TableCell is equal to the other TableCell; otherwise, false. GetHashCode() Returns the hash code for the current TableCell. public override int GetHashCode() Returns int A 32-bit signed integer hash code. ToString() Returns a string that represents the current TableCell. public override string? ToString() Returns string A string that represents the current TableCell. Operators operator ==(TableCell?, TableCell?) Determines whether two TableCell objects are equal. public static bool operator ==(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the two TableCell objects are equal; otherwise, false. operator >(TableCell?, TableCell?) Determines whether the first TableCell is greater than the second TableCell. public static bool operator >(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the first TableCell is greater than the second TableCell; otherwise, false. operator >=(TableCell?, TableCell?) Determines whether the first TableCell is greater than or equal to the second TableCell. public static bool operator >=(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the first TableCell is greater than or equal to the second TableCell; otherwise, false. operator !=(TableCell?, TableCell?) Determines whether two TableCell objects are not equal. public static bool operator !=(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the two TableCell objects are not equal; otherwise, false. operator <(TableCell?, TableCell?) Determines whether the first TableCell is less than the second TableCell. public static bool operator <(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the first TableCell is less than the second TableCell; otherwise, false. operator <=(TableCell?, TableCell?) Determines whether the first TableCell is less than or equal to the second TableCell. public static bool operator <=(TableCell? left, TableCell? right) Parameters left TableCell The first TableCell to compare. right TableCell The second TableCell to compare. Returns bool true if the first TableCell is less than or equal to the second TableCell; otherwise, false."
  },
  "api/Archivist.DataTypes.TableRow.html": {
    "href": "api/Archivist.DataTypes.TableRow.html",
    "title": "Class TableRow | Archivist API Reference",
    "keywords": "Class TableRow Namespace Archivist.DataTypes Assembly Archivist.dll Represents a table row. public class TableRow : IComparable<TableRow>, IEquatable<TableRow>, IObjectConvertable, IList<TableCell>, ICollection<TableCell>, IEnumerable<TableCell>, IEnumerable Inheritance object TableRow Implements IComparable<TableRow> IEquatable<TableRow> IObjectConvertable IList<TableCell> ICollection<TableCell> IEnumerable<TableCell> IEnumerable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TableRow(List<string>?) Initializes a new instance of the TableRow class with the specified columns. public TableRow(List<string>? columns) Parameters columns List<string> The list of column names. Properties Count Gets the number of cells in the row. public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the row is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the cell at the specified index. public TableCell this[int index] { get; set; } Parameters index int The index of the cell. Property Value TableCell The cell at the specified index. this[string] Gets or sets the cell with the specified column name. public TableCell this[string column] { get; set; } Parameters column string The name of the column. Property Value TableCell The cell with the specified column name. Methods Add(TableCell?) Adds a cell to the row. public void Add(TableCell? item) Parameters item TableCell The cell to add. Add(string?) Adds a cell to the row with the specified content. public void Add(string? item) Parameters item string The content of the cell to add. AddRange(IEnumerable<TableCell>) Adds a list of cells to the row. public void AddRange(IEnumerable<TableCell> collection) Parameters collection IEnumerable<TableCell> The list of cells to add. AddRange(IEnumerable<string>) Adds a list of cells to the row with the specified content. public void AddRange(IEnumerable<string> collection) Parameters collection IEnumerable<string> The list of content to add. Clear() Removes all cells from the row. public void Clear() CompareTo(TableRow?) Compares the current TableRow with another TableRow and returns an integer that indicates whether the current TableRow precedes, follows, or occurs in the same position in the sort order as the other TableRow. public int CompareTo(TableRow? other) Parameters other TableRow The TableRow to compare with the current TableRow. Returns int A value that indicates the relative order of the objects being compared. Contains(TableCell?) Determines whether the row contains a specific cell. public bool Contains(TableCell? item) Parameters item TableCell The cell to locate in the row. Returns bool true if the cell is found in the row; otherwise, false. ConvertFrom<TObject>(TObject) Copies the object to the row. public void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to copy. Type Parameters TObject The object type ConvertTo<TObject>() Converts the current TableRow to an object array of the specified type. public TObject ConvertTo<TObject>() Returns TObject The resulting array. Type Parameters TObject The type of the object. CopyTo(TableCell[]?, int) Copies the elements of the row to an array, starting at a particular array index. public void CopyTo(TableCell[]? array, int arrayIndex) Parameters array TableCell[] The one-dimensional array that is the destination of the elements copied from the row. arrayIndex int The zero-based index in array at which copying begins. Equals(TableRow?) Determines whether the current TableRow is equal to another TableRow. public bool Equals(TableRow? other) Parameters other TableRow The TableRow to compare with the current TableRow. Returns bool true if the two TableRow objects are equal; otherwise, false. Equals(object?) Determines whether the current TableRow is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current TableRow. Returns bool true if the object is a TableRow and is equal to the current TableRow; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the cells in the row. public IEnumerator GetEnumerator() Returns IEnumerator An enumerator that can be used to iterate through the cells in the row. GetHashCode() Returns the hash code for the row. public override int GetHashCode() Returns int A 32-bit signed integer hash code. IndexOf(TableCell?) Searches for the specified cell and returns the zero-based index of the first occurrence within the entire row. public int IndexOf(TableCell? item) Parameters item TableCell The cell to locate in the row. Returns int The zero-based index of the first occurrence of the cell within the entire row, if found; otherwise, -1. Insert(int, TableCell?) Inserts a cell into the row at the specified index. public void Insert(int index, TableCell? item) Parameters index int The zero-based index at which the cell should be inserted. item TableCell The cell to insert into the row. Remove(TableCell?) Removes the first occurrence of a specific cell from the row. public bool Remove(TableCell? item) Parameters item TableCell The cell to remove from the row. Returns bool true if the cell is successfully removed; otherwise, false. RemoveAt(int) Removes the cell at the specified index from the row. public void RemoveAt(int index) Parameters index int The zero-based index of the cell to remove. ToString() Returns a string that represents the row. public override string ToString() Returns string A string that represents the row. Operators operator ==(TableRow?, TableRow?) Determines whether two TableRow objects are equal. public static bool operator ==(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the two TableRow objects are equal; otherwise, false. operator >(TableRow?, TableRow?) Determines whether the first TableRow is greater than the second TableRow. public static bool operator >(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the first TableRow is greater than the second TableRow; otherwise, false. operator >=(TableRow?, TableRow?) Determines whether the first TableRow is greater than or equal to the second TableRow. public static bool operator >=(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the first TableRow is greater than or equal to the second TableRow; otherwise, false. operator !=(TableRow?, TableRow?) Determines whether two TableRow objects are not equal. public static bool operator !=(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the two TableRow objects are not equal; otherwise, false. operator <(TableRow?, TableRow?) Determines whether the first TableRow is less than the second TableRow. public static bool operator <(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the first TableRow is less than the second TableRow; otherwise, false. operator <=(TableRow?, TableRow?) Determines whether the first TableRow is less than or equal to the second TableRow. public static bool operator <=(TableRow? left, TableRow? right) Parameters left TableRow The first TableRow to compare. right TableRow The second TableRow to compare. Returns bool true if the first TableRow is less than or equal to the second TableRow; otherwise, false."
  },
  "api/Archivist.DataTypes.Tables.html": {
    "href": "api/Archivist.DataTypes.Tables.html",
    "title": "Class Tables | Archivist API Reference",
    "keywords": "Class Tables Namespace Archivist.DataTypes Assembly Archivist.dll Represents a collection of tables. public class Tables : FileBaseClass<Tables>, IGenericFile, IComparable<Tables>, IEquatable<Tables>, IListConvertable, IList<Table>, ICollection<Table>, IEnumerable<Table>, IEnumerable Inheritance object FileBaseClass<Tables> Tables Implements IGenericFile IComparable<Tables> IEquatable<Tables> IListConvertable IList<Table> ICollection<Table> IEnumerable<Table> IEnumerable Inherited Members FileBaseClass<Tables>.Metadata FileBaseClass<Tables>.Title FileBaseClass<Tables>.Converter FileBaseClass<Tables>.CompareTo(object) FileBaseClass<Tables>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Tables() Initializes a new instance of the Tables class. public Tables() Tables(Convertinator?) Initializes a new instance of the Tables class. public Tables(Convertinator? converter) Parameters converter Convertinator The type converter. Properties Count The number of tables in the file. public int Count { get; } Property Value int IsReadOnly Is this file read only? public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the table at the specified index. public Table this[int index] { get; set; } Parameters index int The index of the table to get or set. Property Value Table The table at the specified index. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. Methods Add(Table?) Adds a new table to the Table collection. public void Add(Table? item) Parameters item Table The table to add to the collection. AddTable() Adds a new row to the Tables. public Table AddTable() Returns Table The new row. Clear() Clears the tables. public void Clear() CompareTo(Tables?) Compares the current Tables object with another Tables object. public override int CompareTo(Tables? other) Parameters other Tables The Tables object to compare with this Tables object. Returns int A value that indicates the relative order of the Tables objects being compared. Contains(Table?) Determines whether the Tables contains a specific table. public bool Contains(Table? item) Parameters item Table The table to locate in the Tables. Returns bool true if the table is found in the Tables; otherwise, false. ConvertFrom<TObject>(List<TObject?>?) Copies the list object to the Tables. public void ConvertFrom<TObject>(List<TObject?>? obj) Parameters obj List<TObject> The list object to copy to the Tables. Type Parameters TObject The type of the object. ConvertTo<TObject>() Converts this instance into the object array of the type specified. public List<TObject?> ConvertTo<TObject>() Returns List<TObject> The resulting array. Type Parameters TObject The type of the object. CopyTo(Table[]?, int) Copies the elements of the Tables to an array, starting at a particular array index. public void CopyTo(Table[]? array, int arrayIndex) Parameters array Table[] The one-dimensional array that is the destination of the elements copied from the Tables. arrayIndex int The zero-based index in the array at which copying begins. Exceptions ArgumentNullException Thrown when the array is null. Equals(Tables?) Determines whether the current Tables object is equal to another Tables object. public override bool Equals(Tables? other) Parameters other Tables The Tables object to compare with this Tables object. Returns bool true if the current Tables object is equal to the other Tables object; otherwise, false. Equals(object?) Determines whether the current Tables object is equal to another Tables object. public override bool Equals(object? obj) Parameters obj object The Tables object to compare with this Tables object. Returns bool true if the current Tables object is equal to the other Tables object; otherwise, false. GetContent() Gets the content of the Tables. public override string? GetContent() Returns string The content of the Tables. GetEnumerator() Returns an enumerator that iterates through the Tables. public IEnumerator<Table> GetEnumerator() Returns IEnumerator<Table> An enumerator that can be used to iterate through the Tables. GetHashCode() Returns the hash code for the current Tables object. public override int GetHashCode() Returns int A hash code for the current Tables object. IndexOf(Table?) Gets the index of the specified table. public int IndexOf(Table? item) Parameters item Table The table to locate in the Tables. Returns int The index of the table if found; otherwise, -1. Insert(int, Table?) Inserts a new table at the specified index. public void Insert(int index, Table? item) Parameters index int The index to insert the table at. item Table The table to insert. Remove(Table?) Removes the first occurrence of a specific table from the Tables. public bool Remove(Table? item) Parameters item Table The table to remove from the Tables. Returns bool true if the table was successfully removed; otherwise, false. RemoveAt(int) Removes the table at the specified index. public void RemoveAt(int index) Parameters index int The index of the table to remove. ToFileType<TFile>() Converts the Tables to the specified file type. public override TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The file of the specified type. Type Parameters TFile The type of the file. Operators operator ==(Tables?, Tables?) Determines whether two Tables objects are equal. public static bool operator ==(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the two Tables objects are equal; otherwise, false. operator >(Tables?, Tables?) Determines whether the first Tables object is greater than the second Tables object. public static bool operator >(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the first Tables object is greater than the second Tables object; otherwise, false. operator >=(Tables?, Tables?) Determines whether the first Tables object is greater than or equal to the second Tables object. public static bool operator >=(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the first Tables object is greater than or equal to the second Tables object; otherwise, false. implicit operator Calendar?(Tables?) Converts the Tables to a Calendar. public static implicit operator Calendar?(Tables? file) Parameters file Tables The Tables to convert. Returns Calendar implicit operator Card?(Tables?) Converts the Tables to a Card. public static implicit operator Card?(Tables? file) Parameters file Tables The Tables to convert. Returns Card The Card converted from the Tables. implicit operator Feed?(Tables?) Converts the Tables to a Feed. public static implicit operator Feed?(Tables? file) Parameters file Tables The Tables to convert. Returns Feed The Feed converted from the Tables. implicit operator Image?(Tables?) Converts the Tables to an Image. public static implicit operator Image?(Tables? file) Parameters file Tables The Tables to convert. Returns Image The Image converted from the Tables. implicit operator StructuredObject?(Tables?) Converts the Tables to a StructuredObject. public static implicit operator StructuredObject?(Tables? file) Parameters file Tables The Tables to convert. Returns StructuredObject implicit operator Table?(Tables?) Converts the Tables to a Table. public static implicit operator Table?(Tables? file) Parameters file Tables The Tables to convert. Returns Table The Table converted from the Tables. implicit operator Text?(Tables?) Converts the Tables to a Text. public static implicit operator Text?(Tables? file) Parameters file Tables The Tables to convert. Returns Text The Text converted from the Tables. operator !=(Tables?, Tables?) Determines whether two Tables objects are not equal. public static bool operator !=(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the two Tables objects are not equal; otherwise, false. operator <(Tables?, Tables?) Determines whether the first Tables object is less than the second Tables object. public static bool operator <(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the first Tables object is less than the second Tables object; otherwise, false. operator <=(Tables?, Tables?) Determines whether the first Tables object is less than or equal to the second Tables object. public static bool operator <=(Tables? left, Tables? right) Parameters left Tables The first Tables object. right Tables The second Tables object. Returns bool true if the first Tables object is less than or equal to the second Tables object; otherwise, false. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.Text.html": {
    "href": "api/Archivist.DataTypes.Text.html",
    "title": "Class Text | Archivist API Reference",
    "keywords": "Class Text Namespace Archivist.DataTypes Assembly Archivist.dll Represents a text file. public class Text : FileBaseClass<Text>, IGenericFile Inheritance object FileBaseClass<Text> Text Implements IGenericFile Inherited Members FileBaseClass<Text>.Metadata FileBaseClass<Text>.Title FileBaseClass<Text>.Converter FileBaseClass<Text>.CompareTo(object) FileBaseClass<Text>.Equals(object) FileBaseClass<Text>.GetHashCode() FileBaseClass<Text>.ToFileType<TFile>() FileBaseClass<Text>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Text() Initializes a new instance of the Text class. public Text() Text(Convertinator?, string?, string?) Initializes a new instance of the Text class. public Text(Convertinator? converter, string? content, string? title) Parameters converter Convertinator The type converter. content string The content of the text file. title string The title of the text file. Text(string?, string?) Initializes a new instance of the Text class. public Text(string? content, string? title) Parameters content string The content of the text file. title string The title of the text file. Properties Content Gets or sets the content of the text file. public string? Content { get; set; } Property Value string Methods CompareTo(Text?) Compares the current text file with another text file. public override int CompareTo(Text? other) Parameters other Text The text file to compare with. Returns int An integer that indicates the relative order of the text files. Equals(Text?) Determines whether the current text file is equal to another text file. public override bool Equals(Text? other) Parameters other Text The text file to compare with. Returns bool True if the text files are equal; otherwise, false. GetContent() Gets the content of the text file. public override string? GetContent() Returns string The content of the text file. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.html": {
    "href": "api/Archivist.DataTypes.html",
    "title": "Namespace Archivist.DataTypes | Archivist API Reference",
    "keywords": "Namespace Archivist.DataTypes Classes Calendar Represents a calendar object. CalendarComponent Represents a Calendar (vCalendar, etc.) file. Card Represents a card (vCard, etc.) file. Feed Represents a Feed object. FixedLengthField Represents a fixed-length field. FixedLengthFile Represents a fixed-length file. FixedLengthRecord Represents a fixed-length record. Image Image data type. KeyValueField Represents a field in a card. KeyValueParameter Represents a parameter for a card field. StructuredObject Represents a structured object. Table Represents a table in the Archivist system. TableCell Represents a cell in a table. TableRow Represents a table row. Tables Represents a collection of tables. Text Represents a text file."
  },
  "api/Archivist.Enums.CalendarMethods.html": {
    "href": "api/Archivist.Enums.CalendarMethods.html",
    "title": "Class CalendarMethods | Archivist API Reference",
    "keywords": "Class CalendarMethods Namespace Archivist.Enums Assembly Archivist.dll Represents the methods of a calendar item. public static class CalendarMethods Inheritance object CalendarMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cancel The calendar item is canceled. public static string Cancel { get; } Property Value string Completed The calendar item is completed. public static string Completed { get; } Property Value string Confirmed The calendar item is confirmed. public static string Confirmed { get; } Property Value string Draft The calendar item is in draft. public static string Draft { get; } Property Value string InProcess The calendar item is in process. public static string InProcess { get; } Property Value string NeedsAction The calendar item needs action. public static string NeedsAction { get; } Property Value string Request The calendar item is requested. public static string Request { get; } Property Value string Tentative The calendar item is tentative. public static string Tentative { get; } Property Value string"
  },
  "api/Archivist.Enums.CalendarStatuses.html": {
    "href": "api/Archivist.Enums.CalendarStatuses.html",
    "title": "Class CalendarStatuses | Archivist API Reference",
    "keywords": "Class CalendarStatuses Namespace Archivist.Enums Assembly Archivist.dll Represents the possible statuses of a calendar. public static class CalendarStatuses Inheritance object CalendarStatuses Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Busy Represents a busy status. public static string Busy { get; } Property Value string Cancelled Represents a cancelled status. public static string Cancelled { get; } Property Value string Completed Represents a completed status. public static string Completed { get; } Property Value string Confirmed Represents a confirmed status. public static string Confirmed { get; } Property Value string Draft Represents a draft status. public static string Draft { get; } Property Value string Final Represents a final status. public static string Final { get; } Property Value string Free Represents a free status. public static string Free { get; } Property Value string"
  },
  "api/Archivist.Enums.CommonCalendarFields.html": {
    "href": "api/Archivist.Enums.CommonCalendarFields.html",
    "title": "Class CommonCalendarFields | Archivist API Reference",
    "keywords": "Class CommonCalendarFields Namespace Archivist.Enums Assembly Archivist.dll Common ICal/VCal fields. public static class CommonCalendarFields Inheritance object CommonCalendarFields Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Action Gets the ACTION field. public static string Action { get; } Property Value string Attachment Gets the ATTACH field. public static string Attachment { get; } Property Value string Attendee Gets the ATTENDEE field. public static string Attendee { get; } Property Value string Categories Gets the CATEGORIES field. public static string Categories { get; } Property Value string Class Gets the CLASS field. public static string Class { get; } Property Value string Comment Gets the COMMENT field. public static string Comment { get; } Property Value string Completed Gets the COMPLETED field. public static string Completed { get; } Property Value string Contact Gets the CONTACT field. public static string Contact { get; } Property Value string Created Gets the CREATED field. public static string Created { get; } Property Value string DateStamp Gets the DTSTAMP field. public static string DateStamp { get; } Property Value string Description Gets the DESCRIPTION field. public static string Description { get; } Property Value string Due Gets the DUE field. public static string Due { get; } Property Value string Duration Gets the DURATION field. public static string Duration { get; } Property Value string EndDate Gets the DTEND field. public static string EndDate { get; } Property Value string ExcludeDates Gets the EXDATE field. public static string ExcludeDates { get; } Property Value string ExcludeRule Gets the EXRULE field. public static string ExcludeRule { get; } Property Value string FreeBusy Gets the FREEBUSY field. public static string FreeBusy { get; } Property Value string Geo Gets the GEO field. public static string Geo { get; } Property Value string LastModified Gets the LAST-MODIFIED field. public static string LastModified { get; } Property Value string Location Gets the LOCATION field. public static string Location { get; } Property Value string Method Gets the METHOD field. public static string Method { get; } Property Value string Organizer Gets the ORGANIZER field. public static string Organizer { get; } Property Value string Priority Gets the PRIORITY field. public static string Priority { get; } Property Value string ProductId Gets the Product ID field. public static string ProductId { get; } Property Value string RecurrenceId Gets the RECURRENCE-ID field. public static string RecurrenceId { get; } Property Value string RelatedTo Gets the RELATED-TO field. public static string RelatedTo { get; } Property Value string ReoccurDates Gets the RDATE field. public static string ReoccurDates { get; } Property Value string ReoccurRule Gets the RRULE field. public static string ReoccurRule { get; } Property Value string RepeatCount Gets the REPEAT field. public static string RepeatCount { get; } Property Value string Resources Gets the RESOURCES field. public static string Resources { get; } Property Value string Sequence Gets the SEQUENCE field. public static string Sequence { get; } Property Value string StartDate Gets the DTSTART field. public static string StartDate { get; } Property Value string Status Gets the STATUS field. public static string Status { get; } Property Value string Summary Gets the SUMMARY field. public static string Summary { get; } Property Value string Timezone Gets the TZID field. public static string Timezone { get; } Property Value string TimezoneName Gets the TZNAME field. public static string TimezoneName { get; } Property Value string TimezoneOffsetFrom Gets the TZOFFFROM field. public static string TimezoneOffsetFrom { get; } Property Value string TimezoneOffsetTo Gets the TZOFFTO field. public static string TimezoneOffsetTo { get; } Property Value string TimezoneUrl Gets the TZURL field. public static string TimezoneUrl { get; } Property Value string Transp Gets the TRANSP field. public static string Transp { get; } Property Value string Trigger Gets the TRIGGER field. public static string Trigger { get; } Property Value string Uid Gets the UID field. public static string Uid { get; } Property Value string Url Gets the URI field. public static string Url { get; } Property Value string"
  },
  "api/Archivist.Enums.CommonCardFields.html": {
    "href": "api/Archivist.Enums.CommonCardFields.html",
    "title": "Class CommonCardFields | Archivist API Reference",
    "keywords": "Class CommonCardFields Namespace Archivist.Enums Assembly Archivist.dll Represents the common fields for a card. public static class CommonCardFields Inheritance object CommonCardFields Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Address Gets the address field. public static string Address { get; } Property Value string Anniversary Gets the anniversary field. public static string Anniversary { get; } Property Value string Birthday Gets the birthday field. public static string Birthday { get; } Property Value string Birthplace Gets the birthplace field. public static string Birthplace { get; } Property Value string Deathdate Gets the death date field. public static string Deathdate { get; } Property Value string Deathplace Gets the death place field. public static string Deathplace { get; } Property Value string Email Gets the email field. public static string Email { get; } Property Value string Expertise Gets the expertise field. public static string Expertise { get; } Property Value string FullName Gets the full name field. public static string FullName { get; } Property Value string Gender Gets the gender field. public static string Gender { get; } Property Value string Geo Gets the geo field. public static string Geo { get; } Property Value string Hobby Gets the hobby field. public static string Hobby { get; } Property Value string IMPP Gets the IMPP field. public static string IMPP { get; } Property Value string Interest Gets the interest field. public static string Interest { get; } Property Value string Key Gets the key field. public static string Key { get; } Property Value string Label Gets the label field. public static string Label { get; } Property Value string Language Gets the language field. public static string Language { get; } Property Value string Logo Gets the logo field. public static string Logo { get; } Property Value string Name Gets the name field. public static string Name { get; } Property Value string Nickname Gets the nickname field. public static string Nickname { get; } Property Value string Note Gets the note field. public static string Note { get; } Property Value string Organization Gets the organization field. public static string Organization { get; } Property Value string Phone Gets the phone field. public static string Phone { get; } Property Value string Photo Gets the photo field. public static string Photo { get; } Property Value string Role Gets the role field. public static string Role { get; } Property Value string Sound Gets the sound field. public static string Sound { get; } Property Value string TimeZone Gets the time zone field. public static string TimeZone { get; } Property Value string Title Gets the title field. public static string Title { get; } Property Value string URL Gets the URL field. public static string URL { get; } Property Value string"
  },
  "api/Archivist.Enums.CommonImageMetadataFields.html": {
    "href": "api/Archivist.Enums.CommonImageMetadataFields.html",
    "title": "Class CommonImageMetadataFields | Archivist API Reference",
    "keywords": "Class CommonImageMetadataFields Namespace Archivist.Enums Assembly Archivist.dll Common image metadata fields. public static class CommonImageMetadataFields Inheritance object CommonImageMetadataFields Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Artist Gets or sets the artist of the image. public static string Artist { get; } Property Value string Brightness Gets or sets the brightness of the image. public static string Brightness { get; } Property Value string Contrast Gets or sets the contrast of the image. public static string Contrast { get; } Property Value string Converter Gets or sets the converter used for the image. public static string Converter { get; } Property Value string Copyright Gets or sets the copyright information of the image. public static string Copyright { get; } Property Value string DateTimeOriginal Gets or sets the original date and time of the image. public static string DateTimeOriginal { get; } Property Value string Description Gets the description of the image. public static string Description { get; } Property Value string DocumentName Gets the name of the document. public static string DocumentName { get; } Property Value string Exposure Gets or sets the exposure of the image. public static string Exposure { get; } Property Value string HostComputer Gets or sets the host computer of the image. public static string HostComputer { get; } Property Value string ImageType Gets or sets the image type (BMP, GIF, JPEG, etc.). public static string ImageType { get; } Property Value string Make Gets or sets the make of the image. public static string Make { get; } Property Value string Model Gets or sets the model of the image. public static string Model { get; } Property Value string MoireFilter Gets or sets the moire filter of the image. public static string MoireFilter { get; } Property Value string OffsetTimeOriginal Gets or sets the offset time original of the image. public static string OffsetTimeOriginal { get; } Property Value string Orientation Gets or sets the orientation of the image. public static string Orientation { get; } Property Value string OwnerName Gets or sets the owner name of the image. public static string OwnerName { get; } Property Value string Photographer Gets or sets the photographer of the image. public static string Photographer { get; } Property Value string ProcessingSoftware Gets the software used to create the image. public static string ProcessingSoftware { get; } Property Value string RawFile Gets or sets the raw file of the image. public static string RawFile { get; } Property Value string Saturation Gets or sets the saturation of the image. public static string Saturation { get; } Property Value string SecurityClassification Gets or sets the security classification of the image. public static string SecurityClassification { get; } Property Value string SerialNumber Gets or sets the serial number of the image. public static string SerialNumber { get; } Property Value string Shadows Gets or sets the shadows of the image. public static string Shadows { get; } Property Value string Sharpness Gets or sets the sharpness of the image. public static string Sharpness { get; } Property Value string Smoothness Gets or sets the smoothness of the image. public static string Smoothness { get; } Property Value string Software Gets or sets the software used for the image. public static string Software { get; } Property Value string WhiteBalance Gets or sets the white balance of the image. public static string WhiteBalance { get; } Property Value string"
  },
  "api/Archivist.Enums.ImageTypes.html": {
    "href": "api/Archivist.Enums.ImageTypes.html",
    "title": "Class ImageTypes | Archivist API Reference",
    "keywords": "Class ImageTypes Namespace Archivist.Enums Assembly Archivist.dll Image types. public static class ImageTypes Inheritance object ImageTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bmp Gets the BMP image type. public static string Bmp { get; } Property Value string Gif Gets the GIF image type. public static string Gif { get; } Property Value string Heif Gets the HEIF image type. public static string Heif { get; } Property Value string Ico Gets the ICO image type. public static string Ico { get; } Property Value string Jpg Gets the JPEG image type. public static string Jpg { get; } Property Value string Png Gets the PNG image type. public static string Png { get; } Property Value string Wbmp Gets the WBMP image type. public static string Wbmp { get; } Property Value string Webp Gets the WEBP image type. public static string Webp { get; } Property Value string"
  },
  "api/Archivist.Enums.html": {
    "href": "api/Archivist.Enums.html",
    "title": "Namespace Archivist.Enums | Archivist API Reference",
    "keywords": "Namespace Archivist.Enums Classes CalendarMethods Represents the methods of a calendar item. CalendarStatuses Represents the possible statuses of a calendar. CommonCalendarFields Common ICal/VCal fields. CommonCardFields Represents the common fields for a card. CommonImageMetadataFields Common image metadata fields. ImageTypes Image types."
  },
  "api/Archivist.ExtensionMethods.InternalExtensionMethods.html": {
    "href": "api/Archivist.ExtensionMethods.InternalExtensionMethods.html",
    "title": "Class InternalExtensionMethods | Archivist API Reference",
    "keywords": "Class InternalExtensionMethods Namespace Archivist.ExtensionMethods Assembly Archivist.dll Internal extension methods. public static class InternalExtensionMethods Inheritance object InternalExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSpaces(string?) Adds spaces before each capital letter in the input string. public static string AddSpaces(this string? input) Parameters input string Input string Returns string String with spaces before each capital letter FormatString(string?, string) Formats a string using the specified format. public static string FormatString(this string? input, string format) Parameters input string Input string format string Format to use Returns string The formatted string Left(string?, int) Gets the first x number of characters from the left hand side public static string Left(this string? input, int length) Parameters input string Input string length int x number of characters to return Returns string The resulting string ReadAll(Stream?, Encoding?) Takes all of the data in the stream and returns it as a string public static string ReadAll(this Stream? input, Encoding? encodingUsing = null) Parameters input Stream Input stream encodingUsing Encoding The encoding to return as Returns string The resulting string ReadAllAsync(Stream?, Encoding?) Takes all of the data in the stream and returns it as a string public static Task<string> ReadAllAsync(this Stream? input, Encoding? encodingUsing = null) Parameters input Stream Input stream encodingUsing Encoding Encoding that the string should be in (defaults to UTF8) Returns Task<string> A string containing the content of the stream ReadAllBinary(Stream?) Takes all of the data in the stream and returns it as an array of bytes public static byte[] ReadAllBinary(this Stream? input) Parameters input Stream Input stream Returns byte[] A byte array ReadAllBinaryAsync(Stream?) Takes all of the data in the stream and returns it as an array of bytes public static Task<byte[]> ReadAllBinaryAsync(this Stream? input) Parameters input Stream Input stream Returns Task<byte[]> A byte array StripIllegalCharacters(string?) Strips illegal characters from RSS items public static string StripIllegalCharacters(this string? original) Parameters original string Original text Returns string string stripped of certain characters. ToByteArray(string?, Encoding?) Converts a string to a byte array using the specified encoding. public static byte[] ToByteArray(this string? input, Encoding? encodingUsing = null) Parameters input string The input string encodingUsing Encoding The encoding to use (defaults to UTF8) Returns byte[] The resulting byte array ToString(byte[]?, Encoding?, int, int) Converts a byte array to a string public static string ToString(this byte[]? input, Encoding? encodingUsing, int index = 0, int count = -1) Parameters input byte[] Input byte array encodingUsing Encoding Encoding that the string should be in (defaults to UTF8) index int Index to start at count int Number of bytes to convert Returns string A string containing the content of the byte array"
  },
  "api/Archivist.ExtensionMethods.InternalStringFormatter.html": {
    "href": "api/Archivist.ExtensionMethods.InternalStringFormatter.html",
    "title": "Class InternalStringFormatter | Archivist API Reference",
    "keywords": "Class InternalStringFormatter Namespace Archivist.ExtensionMethods Assembly Archivist.dll Generic string formatter public static class InternalStringFormatter Inheritance object InternalStringFormatter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Format(string?, string?) Formats the string based on the pattern public static string Format(string? input, string? formatPattern) Parameters input string Input string formatPattern string Format pattern Returns string The formatted string"
  },
  "api/Archivist.ExtensionMethods.ServiceCollectionExtensionMethods.html": {
    "href": "api/Archivist.ExtensionMethods.ServiceCollectionExtensionMethods.html",
    "title": "Class ServiceCollectionExtensionMethods | Archivist API Reference",
    "keywords": "Class ServiceCollectionExtensionMethods Namespace Archivist.ExtensionMethods Assembly Archivist.dll Extension methods for IServiceCollection to add Archivist services. public static class ServiceCollectionExtensionMethods Inheritance object ServiceCollectionExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddArchivist(IServiceCollection?) Adds Archivist services to the specified IServiceCollection. public static IServiceCollection? AddArchivist(this IServiceCollection? services) Parameters services IServiceCollection The IServiceCollection to add the services to. Returns IServiceCollection The modified IServiceCollection."
  },
  "api/Archivist.ExtensionMethods.html": {
    "href": "api/Archivist.ExtensionMethods.html",
    "title": "Namespace Archivist.ExtensionMethods | Archivist API Reference",
    "keywords": "Namespace Archivist.ExtensionMethods Classes InternalExtensionMethods Internal extension methods. InternalStringFormatter Generic string formatter ServiceCollectionExtensionMethods Extension methods for IServiceCollection to add Archivist services."
  },
  "api/Archivist.FormatManager.html": {
    "href": "api/Archivist.FormatManager.html",
    "title": "Class FormatManager | Archivist API Reference",
    "keywords": "Class FormatManager Namespace Archivist Assembly Archivist.dll Represents a manager for handling different file formats. public class FormatManager Inheritance object FormatManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FormatManager(IEnumerable<IFormat>?, IEnumerable<ISubProcessor>?) Initializes a new instance of the FormatManager class. public FormatManager(IEnumerable<IFormat>? formats, IEnumerable<ISubProcessor>? subProcessors) Parameters formats IEnumerable<IFormat> The collection of formats to be managed. subProcessors IEnumerable<ISubProcessor> The collection of sub-processors to be managed."
  },
  "api/Archivist.Formats.Delimited.DelimitedFormat.html": {
    "href": "api/Archivist.Formats.Delimited.DelimitedFormat.html",
    "title": "Class DelimitedFormat | Archivist API Reference",
    "keywords": "Class DelimitedFormat Namespace Archivist.Formats.Delimited Assembly Archivist.dll Delimited file format public class DelimitedFormat : FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>, IFormat Inheritance object FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter> DelimitedFormat Implements IFormat Inherited Members FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.DisplayName FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.Extensions FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.HeaderInfo FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.MimeTypes FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.Order FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.Reader FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.Writer FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.CanRead(string) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.CanRead(Stream) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.CanWrite(string) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.CanWrite(IGenericFile) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.ReadAsync(Stream) FormatBaseClass<DelimitedFormat, DelimitedReader, DelimitedWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DelimitedFormat(IOptions<DelimitedOptions>?, Convertinator?) Initializes a new instance of the DelimitedFormat class. public DelimitedFormat(IOptions<DelimitedOptions>? options, Convertinator? converter) Parameters options IOptions<DelimitedOptions> The options. converter Convertinator The converter. Properties Extensions Gets the extensions associated with the format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the content types. public override string[] MimeTypes { get; } Property Value string[] The content types. See Also FormatBaseClass<TFormat, TFileReader, TFileWriter>"
  },
  "api/Archivist.Formats.Delimited.DelimitedReader.html": {
    "href": "api/Archivist.Formats.Delimited.DelimitedReader.html",
    "title": "Class DelimitedReader | Archivist API Reference",
    "keywords": "Class DelimitedReader Namespace Archivist.Formats.Delimited Assembly Archivist.dll Delimited file reader public class DelimitedReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass DelimitedReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DelimitedReader(DelimitedOptions, Convertinator?) Initializes a new instance of the DelimitedReader class. public DelimitedReader(DelimitedOptions options, Convertinator? converter) Parameters options DelimitedOptions The options. converter Convertinator The converter. Properties HeaderInfo Gets the header information. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream. Returns Task<IGenericFile> The table read from the stream See Also ReaderBaseClass"
  },
  "api/Archivist.Formats.Delimited.DelimitedWriter.html": {
    "href": "api/Archivist.Formats.Delimited.DelimitedWriter.html",
    "title": "Class DelimitedWriter | Archivist API Reference",
    "keywords": "Class DelimitedWriter Namespace Archivist.Formats.Delimited Assembly Archivist.dll Delimited file writer public class DelimitedWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass DelimitedWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DelimitedWriter(DelimitedOptions) Initializes a new instance of the DelimitedWriter class. public DelimitedWriter(DelimitedOptions options) Parameters options DelimitedOptions The options for the delimited writer. Methods WriteAsync(IGenericFile?, Stream?) Writes the content of the file to the specified stream asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to write. stream Stream The stream to write to. Returns Task<bool> A task representing the asynchronous write operation. The task result is true if the write operation is successful; otherwise, false. See Also WriterBaseClass"
  },
  "api/Archivist.Formats.Delimited.html": {
    "href": "api/Archivist.Formats.Delimited.html",
    "title": "Namespace Archivist.Formats.Delimited | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.Delimited Classes DelimitedFormat Delimited file format DelimitedReader Delimited file reader DelimitedWriter Delimited file writer"
  },
  "api/Archivist.Formats.Excel.ExcelFormat.html": {
    "href": "api/Archivist.Formats.Excel.ExcelFormat.html",
    "title": "Class ExcelFormat | Archivist API Reference",
    "keywords": "Class ExcelFormat Namespace Archivist.Formats.Excel Assembly Archivist.dll Represents the Excel format in the Archivist library. public class ExcelFormat : FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>, IFormat Inheritance object FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter> ExcelFormat Implements IFormat Inherited Members FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.DisplayName FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.Extensions FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.HeaderInfo FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.MimeTypes FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.Order FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.Reader FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.Writer FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.CanRead(string) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.CanRead(Stream) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.CanWrite(string) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.CanWrite(IGenericFile) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.ReadAsync(Stream) FormatBaseClass<ExcelFormat, ExcelReader, ExcelWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExcelFormat(IOptions<ExcelOptions>?, Convertinator?) Initializes a new instance of the ExcelFormat class. public ExcelFormat(IOptions<ExcelOptions>? options, Convertinator? converter) Parameters options IOptions<ExcelOptions> The options to use when deserializing Excel. converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the Excel format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the Excel format. public override string[] MimeTypes { get; } Property Value string[] See Also FormatBaseClass<TFormat, TFileReader, TFileWriter>"
  },
  "api/Archivist.Formats.Excel.ExcelReader.html": {
    "href": "api/Archivist.Formats.Excel.ExcelReader.html",
    "title": "Class ExcelReader | Archivist API Reference",
    "keywords": "Class ExcelReader Namespace Archivist.Formats.Excel Assembly Archivist.dll Represents a reader for Excel files. public class ExcelReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass ExcelReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExcelReader(ExcelOptions, Convertinator?) Initializes a new instance of the ExcelReader class. public ExcelReader(ExcelOptions options, Convertinator? converter) Parameters options ExcelOptions The Excel options. converter Convertinator The converter. Properties HeaderInfo Gets the header information for Excel files. public override byte[] HeaderInfo { get; } Property Value byte[] Options Gets the Excel options. public ExcelOptions Options { get; } Property Value ExcelOptions Methods InternalCanRead(Stream?) Determines if the reader can read the given stream as an Excel file. public override bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool True if the reader can read the file, false otherwise. ReadAsync(Stream?) Reads the Excel file asynchronously and returns the data as a generic file. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result is the generic file data. See Also ReaderBaseClass"
  },
  "api/Archivist.Formats.Excel.ExcelWriter.html": {
    "href": "api/Archivist.Formats.Excel.ExcelWriter.html",
    "title": "Class ExcelWriter | Archivist API Reference",
    "keywords": "Class ExcelWriter Namespace Archivist.Formats.Excel Assembly Archivist.dll Writes an Excel file. public class ExcelWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass ExcelWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExcelWriter() Initializes a new instance of the ExcelWriter class. public ExcelWriter() Methods WriteAsync(IGenericFile?, Stream?) Writes the file to the stream public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file object to write. stream Stream The stream to write to. Returns Task<bool> True if it is written succesfully, false otherwise. See Also WriterBaseClass"
  },
  "api/Archivist.Formats.Excel.html": {
    "href": "api/Archivist.Formats.Excel.html",
    "title": "Namespace Archivist.Formats.Excel | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.Excel Classes ExcelFormat Represents the Excel format in the Archivist library. ExcelReader Represents a reader for Excel files. ExcelWriter Writes an Excel file."
  },
  "api/Archivist.Formats.FixedLength.FixedLengthWriter.html": {
    "href": "api/Archivist.Formats.FixedLength.FixedLengthWriter.html",
    "title": "Class FixedLengthWriter | Archivist API Reference",
    "keywords": "Class FixedLengthWriter Namespace Archivist.Formats.FixedLength Assembly Archivist.dll Represents a writer for fixed-length files. public class FixedLengthWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass FixedLengthWriter Implements IFormatWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanWrite(IGenericFile?) Determines if the writer can write the specified file. public override bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to be written. Returns bool true if the writer can write the file; otherwise, false. WriteAsync(IGenericFile?, Stream?) Writes the specified file to the provided stream asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file to. Returns Task<bool> true if the file was written successfully; otherwise, false."
  },
  "api/Archivist.Formats.FixedLength.html": {
    "href": "api/Archivist.Formats.FixedLength.html",
    "title": "Namespace Archivist.Formats.FixedLength | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.FixedLength Classes FixedLengthWriter Represents a writer for fixed-length files."
  },
  "api/Archivist.Formats.ICalendar.ICalFormat.html": {
    "href": "api/Archivist.Formats.ICalendar.ICalFormat.html",
    "title": "Class ICalFormat | Archivist API Reference",
    "keywords": "Class ICalFormat Namespace Archivist.Formats.ICalendar Assembly Archivist.dll Represents the ICal format. public class ICalFormat : FormatBaseClass<ICalFormat, ICalReader, ICalWriter>, IFormat Inheritance object FormatBaseClass<ICalFormat, ICalReader, ICalWriter> ICalFormat Implements IFormat Inherited Members FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.DisplayName FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.Extensions FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.HeaderInfo FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.MimeTypes FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.Order FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.Reader FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.Writer FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.CanRead(string) FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.CanRead(Stream) FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.CanWrite(string) FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.CanWrite(IGenericFile) FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.ReadAsync(Stream) FormatBaseClass<ICalFormat, ICalReader, ICalWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ICalFormat(Convertinator?) Initializes a new instance of the ICalFormat class. public ICalFormat(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the ICal format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the Excel format. public override string[] MimeTypes { get; } Property Value string[] See Also FormatBaseClass<TFormat, TFileReader, TFileWriter>"
  },
  "api/Archivist.Formats.ICalendar.ICalReader.html": {
    "href": "api/Archivist.Formats.ICalendar.ICalReader.html",
    "title": "Class ICalReader | Archivist API Reference",
    "keywords": "Class ICalReader Namespace Archivist.Formats.ICalendar Assembly Archivist.dll Represents a reader for ICal files. public class ICalReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass ICalReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ICalReader(Convertinator?) Initializes a new instance of the ICalReader class. public ICalReader(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties HeaderInfo Gets the header information of the ICal file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads a ICal file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the ICal file from. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result contains the parsed ICal file."
  },
  "api/Archivist.Formats.ICalendar.ICalWriter.html": {
    "href": "api/Archivist.Formats.ICalendar.ICalWriter.html",
    "title": "Class ICalWriter | Archivist API Reference",
    "keywords": "Class ICalWriter Namespace Archivist.Formats.ICalendar Assembly Archivist.dll Represents a writer for ICal files. public class ICalWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass ICalWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the ICal file asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The IGenericFile object representing the ICal file. stream Stream The Stream object to write the ICal file to. Returns Task<bool> A task representing the asynchronous write operation. The task result is a boolean value indicating whether the write operation was successful."
  },
  "api/Archivist.Formats.ICalendar.html": {
    "href": "api/Archivist.Formats.ICalendar.html",
    "title": "Namespace Archivist.Formats.ICalendar | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.ICalendar Classes ICalFormat Represents the ICal format. ICalReader Represents a reader for ICal files. ICalWriter Represents a writer for ICal files."
  },
  "api/Archivist.Formats.Image.ImageFormat.html": {
    "href": "api/Archivist.Formats.Image.ImageFormat.html",
    "title": "Class ImageFormat | Archivist API Reference",
    "keywords": "Class ImageFormat Namespace Archivist.Formats.Image Assembly Archivist.dll Represents the Image format. public class ImageFormat : FormatBaseClass<ImageFormat, ImageReader, ImageWriter>, IFormat Inheritance object FormatBaseClass<ImageFormat, ImageReader, ImageWriter> ImageFormat Implements IFormat Inherited Members FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.DisplayName FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.Extensions FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.HeaderInfo FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.MimeTypes FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.Order FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.Reader FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.Writer FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.CanRead(string) FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.CanRead(Stream) FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.CanWrite(string) FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.CanWrite(IGenericFile) FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.ReadAsync(Stream) FormatBaseClass<ImageFormat, ImageReader, ImageWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageFormat(Convertinator?) Initializes a new instance of the ImageFormat class. public ImageFormat(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the Image format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the Image format. public override string[] MimeTypes { get; } Property Value string[] See Also FormatBaseClass<TFormat, TFileReader, TFileWriter>"
  },
  "api/Archivist.Formats.Image.ImageReader.html": {
    "href": "api/Archivist.Formats.Image.ImageReader.html",
    "title": "Class ImageReader | Archivist API Reference",
    "keywords": "Class ImageReader Namespace Archivist.Formats.Image Assembly Archivist.dll Represents a reader for Image files. public class ImageReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass ImageReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageReader(Convertinator?) Initializes a new instance of the ImageReader class. public ImageReader(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties HeaderInfo Gets the header information for the Image format. public override byte[] HeaderInfo { get; } Property Value byte[] Methods InternalCanRead(Stream?) Determines if the reader can read the specified stream. public override bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the stream; otherwise, false. ReadAsync(Stream?) Reads a Image file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the Image file from. Returns Task<IGenericFile> The parsed Image file."
  },
  "api/Archivist.Formats.Image.ImageWriter.html": {
    "href": "api/Archivist.Formats.Image.ImageWriter.html",
    "title": "Class ImageWriter | Archivist API Reference",
    "keywords": "Class ImageWriter Namespace Archivist.Formats.Image Assembly Archivist.dll Represents a writer for Image files. public class ImageWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass ImageWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ImageWriter() Initializes a new instance of the ImageWriter class. public ImageWriter() Methods WriteAsync(IGenericFile?, Stream?) Writes the structured object to the specified stream as Image. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The structured object to write. stream Stream The stream to write the Image to. Returns Task<bool> A task representing the asynchronous operation. The task result is a boolean indicating whether the write operation was successful. See Also WriterBaseClass"
  },
  "api/Archivist.Formats.Image.html": {
    "href": "api/Archivist.Formats.Image.html",
    "title": "Namespace Archivist.Formats.Image | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.Image Classes ImageFormat Represents the Image format. ImageReader Represents a reader for Image files. ImageWriter Represents a writer for Image files."
  },
  "api/Archivist.Formats.JSON.JsonFormat.html": {
    "href": "api/Archivist.Formats.JSON.JsonFormat.html",
    "title": "Class JsonFormat | Archivist API Reference",
    "keywords": "Class JsonFormat Namespace Archivist.Formats.JSON Assembly Archivist.dll Represents the JSON format. public class JsonFormat : FormatBaseClass<JsonFormat, JsonReader, JsonWriter>, IFormat Inheritance object FormatBaseClass<JsonFormat, JsonReader, JsonWriter> JsonFormat Implements IFormat Inherited Members FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.DisplayName FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.Extensions FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.HeaderInfo FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.MimeTypes FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.Order FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.Reader FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.Writer FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.CanRead(string) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.CanRead(Stream) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.CanWrite(string) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.CanWrite(IGenericFile) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.ReadAsync(Stream) FormatBaseClass<JsonFormat, JsonReader, JsonWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonFormat(JsonSerializerSettings?, Convertinator?) Initializes a new instance of the JsonFormat class. public JsonFormat(JsonSerializerSettings? options, Convertinator? converter) Parameters options JsonSerializerSettings The options to use when deserializing JSON. converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the JSON format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the JSON format. public override string[] MimeTypes { get; } Property Value string[] See Also FormatBaseClass<TFormat, TFileReader, TFileWriter>"
  },
  "api/Archivist.Formats.JSON.JsonReader.html": {
    "href": "api/Archivist.Formats.JSON.JsonReader.html",
    "title": "Class JsonReader | Archivist API Reference",
    "keywords": "Class JsonReader Namespace Archivist.Formats.JSON Assembly Archivist.dll Represents a reader for JSON files. public class JsonReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass JsonReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonReader(JsonSerializerSettings?, Convertinator?) Initializes a new instance of the JsonReader class. public JsonReader(JsonSerializerSettings? options, Convertinator? converter) Parameters options JsonSerializerSettings The options to use when deserializing JSON. converter Convertinator The converter used to convert between IGenericFile objects. Properties HeaderInfo Gets the header information for the JSON format. public override byte[] HeaderInfo { get; } Property Value byte[] Methods InternalCanRead(Stream?) Determines if the reader can read the specified stream. public override bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the stream; otherwise, false. ReadAsync(Stream?) Reads a JSON file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the JSON file from. Returns Task<IGenericFile> The parsed JSON file."
  },
  "api/Archivist.Formats.JSON.JsonWriter.html": {
    "href": "api/Archivist.Formats.JSON.JsonWriter.html",
    "title": "Class JsonWriter | Archivist API Reference",
    "keywords": "Class JsonWriter Namespace Archivist.Formats.JSON Assembly Archivist.dll Represents a JSON writer for serializing structured objects. public class JsonWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass JsonWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JsonWriter(JsonSerializerSettings?) Initializes a new instance of the JsonWriter class. public JsonWriter(JsonSerializerSettings? options) Parameters options JsonSerializerSettings The options to use when serializing JSON. Methods WriteAsync(IGenericFile?, Stream?) Writes the structured object to the specified stream as JSON. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The structured object to write. stream Stream The stream to write the JSON to. Returns Task<bool> A task representing the asynchronous operation. The task result is a boolean indicating whether the write operation was successful."
  },
  "api/Archivist.Formats.JSON.html": {
    "href": "api/Archivist.Formats.JSON.html",
    "title": "Namespace Archivist.Formats.JSON | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.JSON Classes JsonFormat Represents the JSON format. JsonReader Represents a reader for JSON files. JsonWriter Represents a JSON writer for serializing structured objects."
  },
  "api/Archivist.Formats.RSS.RSSFormat.html": {
    "href": "api/Archivist.Formats.RSS.RSSFormat.html",
    "title": "Class RSSFormat | Archivist API Reference",
    "keywords": "Class RSSFormat Namespace Archivist.Formats.RSS Assembly Archivist.dll Represents a RSS format for archiving. public class RSSFormat : FormatBaseClass<RSSFormat, RSSReader, RSSWriter>, IFormat Inheritance object FormatBaseClass<RSSFormat, RSSReader, RSSWriter> RSSFormat Implements IFormat Inherited Members FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.DisplayName FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.Extensions FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.HeaderInfo FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.MimeTypes FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.Order FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.Reader FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.Writer FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.CanRead(string) FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.CanRead(Stream) FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.CanWrite(string) FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.CanWrite(IGenericFile) FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.ReadAsync(Stream) FormatBaseClass<RSSFormat, RSSReader, RSSWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RSSFormat(Convertinator?) Initializes a new instance of the RSSFormat class. public RSSFormat(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the RSS format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the RSS format. public override string[] MimeTypes { get; } Property Value string[]"
  },
  "api/Archivist.Formats.RSS.RSSReader.html": {
    "href": "api/Archivist.Formats.RSS.RSSReader.html",
    "title": "Class RSSReader | Archivist API Reference",
    "keywords": "Class RSSReader Namespace Archivist.Formats.RSS Assembly Archivist.dll Represents a RSS reader for reading RSS files. public class RSSReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass RSSReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RSSReader(Convertinator?) Initializes a new instance of the RSSReader class. public RSSReader(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties HeaderInfo Gets the header information of the RSS file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods InternalCanRead(Stream?) Determines if the reader can read the specified stream. public override bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the stream; otherwise, false. ReadAsync(Stream?) Reads the RSS file asynchronously. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the RSS file from. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result contains the generic file representation of the RSS file."
  },
  "api/Archivist.Formats.RSS.RSSWriter.html": {
    "href": "api/Archivist.Formats.RSS.RSSWriter.html",
    "title": "Class RSSWriter | Archivist API Reference",
    "keywords": "Class RSSWriter Namespace Archivist.Formats.RSS Assembly Archivist.dll Represents a RSS writer for the Txt format. public class RSSWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass RSSWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the content of the specified file to the provided stream asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file content to. Returns Task<bool> True if the file was written successfully; otherwise, false."
  },
  "api/Archivist.Formats.RSS.html": {
    "href": "api/Archivist.Formats.RSS.html",
    "title": "Namespace Archivist.Formats.RSS | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.RSS Classes RSSFormat Represents a RSS format for archiving. RSSReader Represents a RSS reader for reading RSS files. RSSWriter Represents a RSS writer for the Txt format."
  },
  "api/Archivist.Formats.Txt.TextFormat.html": {
    "href": "api/Archivist.Formats.Txt.TextFormat.html",
    "title": "Class TextFormat | Archivist API Reference",
    "keywords": "Class TextFormat Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text format for archiving. public class TextFormat : FormatBaseClass<TextFormat, TextReader, TextWriter>, IFormat Inheritance object FormatBaseClass<TextFormat, TextReader, TextWriter> TextFormat Implements IFormat Inherited Members FormatBaseClass<TextFormat, TextReader, TextWriter>.DisplayName FormatBaseClass<TextFormat, TextReader, TextWriter>.Extensions FormatBaseClass<TextFormat, TextReader, TextWriter>.HeaderInfo FormatBaseClass<TextFormat, TextReader, TextWriter>.MimeTypes FormatBaseClass<TextFormat, TextReader, TextWriter>.Order FormatBaseClass<TextFormat, TextReader, TextWriter>.Reader FormatBaseClass<TextFormat, TextReader, TextWriter>.Writer FormatBaseClass<TextFormat, TextReader, TextWriter>.CanRead(string) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanRead(Stream) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanWrite(string) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanWrite(IGenericFile) FormatBaseClass<TextFormat, TextReader, TextWriter>.ReadAsync(Stream) FormatBaseClass<TextFormat, TextReader, TextWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextFormat(Convertinator?) Initializes a new instance of the TextFormat class. public TextFormat(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the text format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the text format. public override string[] MimeTypes { get; } Property Value string[] Order Text format is format of last resort. public override int Order { get; } Property Value int"
  },
  "api/Archivist.Formats.Txt.TextReader.html": {
    "href": "api/Archivist.Formats.Txt.TextReader.html",
    "title": "Class TextReader | Archivist API Reference",
    "keywords": "Class TextReader Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text reader for reading text files. public class TextReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass TextReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextReader(Convertinator?) Initializes a new instance of the TextReader class. public TextReader(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties HeaderInfo Gets the header information of the text file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads the text file asynchronously. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the text file from. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result contains the generic file representation of the text file."
  },
  "api/Archivist.Formats.Txt.TextWriter.html": {
    "href": "api/Archivist.Formats.Txt.TextWriter.html",
    "title": "Class TextWriter | Archivist API Reference",
    "keywords": "Class TextWriter Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text writer for the Txt format. public class TextWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass TextWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the content of the specified file to the provided stream asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file content to. Returns Task<bool> True if the file was written successfully; otherwise, false."
  },
  "api/Archivist.Formats.Txt.html": {
    "href": "api/Archivist.Formats.Txt.html",
    "title": "Namespace Archivist.Formats.Txt | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.Txt Classes TextFormat Represents a text format for archiving. TextReader Represents a text reader for reading text files. TextWriter Represents a text writer for the Txt format."
  },
  "api/Archivist.Formats.VCard.VCardFormat.html": {
    "href": "api/Archivist.Formats.VCard.VCardFormat.html",
    "title": "Class VCardFormat | Archivist API Reference",
    "keywords": "Class VCardFormat Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a VCard format for storing contact information. public class VCardFormat : FormatBaseClass<VCardFormat, VCardReader, VCardWriter>, IFormat Inheritance object FormatBaseClass<VCardFormat, VCardReader, VCardWriter> VCardFormat Implements IFormat Inherited Members FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.DisplayName FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Extensions FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.HeaderInfo FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.MimeTypes FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Order FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Reader FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Writer FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanRead(string) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanRead(Stream) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanWrite(string) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanWrite(IGenericFile) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.ReadAsync(Stream) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VCardFormat(Convertinator?) Initializes a new instance of the VCardFormat class. public VCardFormat(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the VCard format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the VCard format. public override string[] MimeTypes { get; } Property Value string[]"
  },
  "api/Archivist.Formats.VCard.VCardReader.html": {
    "href": "api/Archivist.Formats.VCard.VCardReader.html",
    "title": "Class VCardReader | Archivist API Reference",
    "keywords": "Class VCardReader Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a reader for VCard files. public class VCardReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass VCardReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VCardReader(Convertinator?) Initializes a new instance of the VCardReader class. public VCardReader(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties HeaderInfo Gets the header information of the VCard file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads a VCard file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the VCard file from. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result contains the parsed VCard file."
  },
  "api/Archivist.Formats.VCard.VCardWriter.html": {
    "href": "api/Archivist.Formats.VCard.VCardWriter.html",
    "title": "Class VCardWriter | Archivist API Reference",
    "keywords": "Class VCardWriter Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a writer for VCard files. public class VCardWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass VCardWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the VCard file asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The IGenericFile object representing the VCard file. stream Stream The Stream object to write the VCard file to. Returns Task<bool> A task representing the asynchronous write operation. The task result is a boolean value indicating whether the write operation was successful."
  },
  "api/Archivist.Formats.VCard.html": {
    "href": "api/Archivist.Formats.VCard.html",
    "title": "Namespace Archivist.Formats.VCard | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.VCard Classes VCardFormat Represents a VCard format for storing contact information. VCardReader Represents a reader for VCard files. VCardWriter Represents a writer for VCard files."
  },
  "api/Archivist.Formats.XML.XMLFormat.html": {
    "href": "api/Archivist.Formats.XML.XMLFormat.html",
    "title": "Class XMLFormat | Archivist API Reference",
    "keywords": "Class XMLFormat Namespace Archivist.Formats.XML Assembly Archivist.dll Represents an XML format for storing data. public class XMLFormat : FormatBaseClass<XMLFormat, XMLReader, XMLWriter>, IFormat Inheritance object FormatBaseClass<XMLFormat, XMLReader, XMLWriter> XMLFormat Implements IFormat Inherited Members FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.DisplayName FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.Extensions FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.HeaderInfo FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.MimeTypes FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.Order FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.Reader FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.Writer FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.CanRead(string) FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.CanRead(Stream) FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.CanWrite(string) FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.CanWrite(IGenericFile) FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.ReadAsync(Stream) FormatBaseClass<XMLFormat, XMLReader, XMLWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors XMLFormat(JsonSerializerSettings?, Convertinator?) Initializes a new instance of the XMLFormat class. public XMLFormat(JsonSerializerSettings? options, Convertinator? converter) Parameters options JsonSerializerSettings The options to use when serializing and deserializing JSON. converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the XML format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the XML format. public override string[] MimeTypes { get; } Property Value string[]"
  },
  "api/Archivist.Formats.XML.XMLReader.html": {
    "href": "api/Archivist.Formats.XML.XMLReader.html",
    "title": "Class XMLReader | Archivist API Reference",
    "keywords": "Class XMLReader Namespace Archivist.Formats.XML Assembly Archivist.dll Represents a reader for XML files. public class XMLReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass XMLReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors XMLReader(JsonSerializerSettings?, Convertinator?) Initializes a new instance of the Newtonsoft.Json.JsonReader class. public XMLReader(JsonSerializerSettings? options, Convertinator? converter) Parameters options JsonSerializerSettings The options to use when deserializing JSON. converter Convertinator The converter used to convert between IGenericFile objects. Properties HeaderInfo Gets the header information of the XML file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads a JSON file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the JSON file from. Returns Task<IGenericFile> The parsed JSON file."
  },
  "api/Archivist.Formats.XML.XMLWriter.html": {
    "href": "api/Archivist.Formats.XML.XMLWriter.html",
    "title": "Class XMLWriter | Archivist API Reference",
    "keywords": "Class XMLWriter Namespace Archivist.Formats.XML Assembly Archivist.dll Represents a writer for XML files. public class XMLWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass XMLWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the XML file asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The IGenericFile object representing the XML file. stream Stream The Stream object to write the XML file to. Returns Task<bool> A task representing the asynchronous write operation. The task result is a boolean value indicating whether the write operation was successful."
  },
  "api/Archivist.Formats.XML.html": {
    "href": "api/Archivist.Formats.XML.html",
    "title": "Namespace Archivist.Formats.XML | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.XML Classes XMLFormat Represents an XML format for storing data. XMLReader Represents a reader for XML files. XMLWriter Represents a writer for XML files."
  },
  "api/Archivist.Formats.YAML.YAMLFormat.html": {
    "href": "api/Archivist.Formats.YAML.YAMLFormat.html",
    "title": "Class YAMLFormat | Archivist API Reference",
    "keywords": "Class YAMLFormat Namespace Archivist.Formats.YAML Assembly Archivist.dll Represents an YAML format for storing data. public class YAMLFormat : FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>, IFormat Inheritance object FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter> YAMLFormat Implements IFormat Inherited Members FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.DisplayName FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.Extensions FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.HeaderInfo FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.MimeTypes FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.Order FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.Reader FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.Writer FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.CanRead(string) FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.CanRead(Stream) FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.CanWrite(string) FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.CanWrite(IGenericFile) FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.ReadAsync(Stream) FormatBaseClass<YAMLFormat, YAMLReader, YAMLWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors YAMLFormat(Convertinator?) Initializes a new instance of the YAMLFormat class. public YAMLFormat(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties Extensions Gets the file extensions associated with the YAML format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the YAML format. public override string[] MimeTypes { get; } Property Value string[]"
  },
  "api/Archivist.Formats.YAML.YAMLReader.html": {
    "href": "api/Archivist.Formats.YAML.YAMLReader.html",
    "title": "Class YAMLReader | Archivist API Reference",
    "keywords": "Class YAMLReader Namespace Archivist.Formats.YAML Assembly Archivist.dll Represents a reader for YAML files. public class YAMLReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass YAMLReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.IsValidStream(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors YAMLReader(Convertinator?) Initializes a new instance of the YAMLReader class. public YAMLReader(Convertinator? converter) Parameters converter Convertinator The converter used to convert between IGenericFile objects. Properties HeaderInfo Gets the header information for the YAML format. public override byte[] HeaderInfo { get; } Property Value byte[] Methods InternalCanRead(Stream?) Determines if the reader can read the specified stream. public override bool InternalCanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the stream; otherwise, false. ReadAsync(Stream?) Reads a YAML file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the YAML file from. Returns Task<IGenericFile> The parsed YAML file."
  },
  "api/Archivist.Formats.YAML.YAMLWriter.html": {
    "href": "api/Archivist.Formats.YAML.YAMLWriter.html",
    "title": "Class YAMLWriter | Archivist API Reference",
    "keywords": "Class YAMLWriter Namespace Archivist.Formats.YAML Assembly Archivist.dll Represents a YAML writer for serializing structured objects. public class YAMLWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass YAMLWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors YAMLWriter() Initializes a new instance of the YAMLWriter class. public YAMLWriter() Methods WriteAsync(IGenericFile?, Stream?) Writes the structured object to the specified stream as YAML. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The structured object to write. stream Stream The stream to write the YAML to. Returns Task<bool> A task representing the asynchronous operation. The task result is a boolean indicating whether the write operation was successful."
  },
  "api/Archivist.Formats.YAML.html": {
    "href": "api/Archivist.Formats.YAML.html",
    "title": "Namespace Archivist.Formats.YAML | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.YAML Classes YAMLFormat Represents an YAML format for storing data. YAMLReader Represents a reader for YAML files. YAMLWriter Represents a YAML writer for serializing structured objects."
  },
  "api/Archivist.Interfaces.IDataConverter.html": {
    "href": "api/Archivist.Interfaces.IDataConverter.html",
    "title": "Interface IDataConverter | Archivist API Reference",
    "keywords": "Interface IDataConverter Namespace Archivist.Interfaces Assembly Archivist.dll Interface for data converters. public interface IDataConverter Methods CanConvert(Type?, Type?) Determines if the converter can convert the source type to the destination type. bool CanConvert(Type? source, Type? destination) Parameters source Type Source type destination Type Destination type Returns bool True if the converter can convert the source type to the destination type, otherwise false. Convert(object?, Type?) Converts the source object to the destination type. object? Convert(object? source, Type? destination) Parameters source object Source type destination Type Destination type Returns object Converted object"
  },
  "api/Archivist.Interfaces.IFormat.html": {
    "href": "api/Archivist.Interfaces.IFormat.html",
    "title": "Interface IFormat | Archivist API Reference",
    "keywords": "Interface IFormat Namespace Archivist.Interfaces Assembly Archivist.dll Represents a file format. public interface IFormat Properties DisplayName Gets the display name of this file format. string DisplayName { get; } Property Value string Extensions Gets the file extensions associated with this file format. string[] Extensions { get; } Property Value string[] HeaderInfo Gets the header information of this file format. byte[] HeaderInfo { get; } Property Value byte[] MimeTypes Gets the content types supported by this file format. string[] MimeTypes { get; } Property Value string[] Order Gets the order that the file format should be checked. The lower the value, the higher the priority. Note that the order is only relevant when multiple file formats have the same HeaderInfo length. The system uses HeaderInfo to determine the order to check first, with longer headers checked first. int Order { get; } Property Value int Methods CanRead(Stream?) Determines whether this file format can read the specified stream. bool CanRead(Stream? stream) Parameters stream Stream The stream to check. Returns bool true if this file format can read the specified stream; otherwise, false. CanRead(string?) Determines whether this file format can read the specified file. bool CanRead(string? fileName) Parameters fileName string The name of the file to check. Returns bool true if this file format can read the specified file; otherwise, false. CanWrite(IGenericFile?) Determines whether this file format can write the specified file. bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to check. Returns bool true if this file format can write the specified file; otherwise, false. CanWrite(string?) Determines whether this file format can write the specified file. bool CanWrite(string? fileName) Parameters fileName string The name of the file to check. Returns bool true if this file format can write the specified file; otherwise, false. ReadAsync(Stream?) Asynchronously reads the specified stream and returns an instance of IGenericFile. Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous operation. The task result contains an instance of IGenericFile. WriteAsync(Stream?, IGenericFile?) Asynchronously writes the specified IGenericFile to the specified stream. Task<bool> WriteAsync(Stream? writer, IGenericFile? file) Parameters writer Stream The stream to write to. file IGenericFile The file to write. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean value indicating whether the write operation is successful."
  },
  "api/Archivist.Interfaces.IFormatReader.html": {
    "href": "api/Archivist.Interfaces.IFormatReader.html",
    "title": "Interface IFormatReader | Archivist API Reference",
    "keywords": "Interface IFormatReader Namespace Archivist.Interfaces Assembly Archivist.dll Represents a format reader. public interface IFormatReader Properties HeaderInfo Gets the header information of the format. byte[] HeaderInfo { get; } Property Value byte[] Methods CanRead(Stream?) Determines whether the format reader can read the specified stream. bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the format reader can read the stream; otherwise, false. ReadAsync(Stream?) Asynchronously reads the specified stream and returns the generic file. Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous operation. The task result contains the generic file read from the stream."
  },
  "api/Archivist.Interfaces.IFormatWriter.html": {
    "href": "api/Archivist.Interfaces.IFormatWriter.html",
    "title": "Interface IFormatWriter | Archivist API Reference",
    "keywords": "Interface IFormatWriter Namespace Archivist.Interfaces Assembly Archivist.dll Represents a format writer. public interface IFormatWriter Methods CanWrite(IGenericFile?) Determines whether the format writer can write the specified file. bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to write. Returns bool true if the format writer can write the file; otherwise, false. WriteAsync(IGenericFile?, Stream?) Asynchronously writes the specified file to the stream. Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to write. stream Stream The stream to write to. Returns Task<bool> A task that represents the asynchronous operation."
  },
  "api/Archivist.Interfaces.IGenericFile.html": {
    "href": "api/Archivist.Interfaces.IGenericFile.html",
    "title": "Interface IGenericFile | Archivist API Reference",
    "keywords": "Interface IGenericFile Namespace Archivist.Interfaces Assembly Archivist.dll Represents a generic file. public interface IGenericFile Properties Metadata Gets or sets the metadata associated with the file. Dictionary<string, string> Metadata { get; } Property Value Dictionary<string, string> Title Gets or sets the title of the file. string? Title { get; set; } Property Value string Methods GetContent() Gets the content of the file. string? GetContent() Returns string The content of the file. ToFileType<TFile>() Sets the content of the file in the specified format. TFile? ToFileType<TFile>() where TFile : IGenericFile Returns TFile The content of the file in the specified format. Type Parameters TFile"
  },
  "api/Archivist.Interfaces.IListConvertable.html": {
    "href": "api/Archivist.Interfaces.IListConvertable.html",
    "title": "Interface IListConvertable | Archivist API Reference",
    "keywords": "Interface IListConvertable Namespace Archivist.Interfaces Assembly Archivist.dll Represents a list convertable object. public interface IListConvertable Methods ConvertFrom<TObject>(List<TObject?>) Imports the list into the current object. void ConvertFrom<TObject>(List<TObject?> obj) Parameters obj List<TObject> The list to import. Type Parameters TObject Type of the object importing. ConvertTo<TObject>() Converts the object to a list of the specified type. List<TObject?> ConvertTo<TObject>() Returns List<TObject> The resulting list. Type Parameters TObject The type of the object."
  },
  "api/Archivist.Interfaces.IObjectConvertable.html": {
    "href": "api/Archivist.Interfaces.IObjectConvertable.html",
    "title": "Interface IObjectConvertable | Archivist API Reference",
    "keywords": "Interface IObjectConvertable Namespace Archivist.Interfaces Assembly Archivist.dll Represents an object that can be converted to another type. public interface IObjectConvertable Methods ConvertFrom<TObject>(TObject) Imports the object into the current object. void ConvertFrom<TObject>(TObject obj) Parameters obj TObject The object to import. Type Parameters TObject Type of the object importing. ConvertTo<TObject>() Converts the object to the specified type. TObject? ConvertTo<TObject>() Returns TObject The resulting object. Type Parameters TObject The type of the object."
  },
  "api/Archivist.Interfaces.ISubProcessor.html": {
    "href": "api/Archivist.Interfaces.ISubProcessor.html",
    "title": "Interface ISubProcessor | Archivist API Reference",
    "keywords": "Interface ISubProcessor Namespace Archivist.Interfaces Assembly Archivist.dll Interface for sub-processors. public interface ISubProcessor Methods Process(IGenericFile?, Stream?) Processes the given file. IGenericFile? Process(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to process. stream Stream The stream to process. Returns IGenericFile The processed file object."
  },
  "api/Archivist.Interfaces.html": {
    "href": "api/Archivist.Interfaces.html",
    "title": "Namespace Archivist.Interfaces | Archivist API Reference",
    "keywords": "Namespace Archivist.Interfaces Interfaces IDataConverter Interface for data converters. IFormat Represents a file format. IFormatReader Represents a format reader. IFormatWriter Represents a format writer. IGenericFile Represents a generic file. IListConvertable Represents a list convertable object. IObjectConvertable Represents an object that can be converted to another type. ISubProcessor Interface for sub-processors."
  },
  "api/Archivist.Modules.CanisterModule.html": {
    "href": "api/Archivist.Modules.CanisterModule.html",
    "title": "Class CanisterModule | Archivist API Reference",
    "keywords": "Class CanisterModule Namespace Archivist.Modules Assembly Archivist.dll Represents a module for registering services related to Canister. public class CanisterModule : IModule Inheritance object CanisterModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Gets the order in which the module should be loaded. public int Order { get; } Property Value int Methods Load(IServiceCollection?) Loads the services into the service collection. public void Load(IServiceCollection? serviceDescriptors) Parameters serviceDescriptors IServiceCollection The service collection to load the services into."
  },
  "api/Archivist.Modules.html": {
    "href": "api/Archivist.Modules.html",
    "title": "Namespace Archivist.Modules | Archivist API Reference",
    "keywords": "Namespace Archivist.Modules Classes CanisterModule Represents a module for registering services related to Canister."
  },
  "api/Archivist.Options.DelimitedOptions.html": {
    "href": "api/Archivist.Options.DelimitedOptions.html",
    "title": "Class DelimitedOptions | Archivist API Reference",
    "keywords": "Class DelimitedOptions Namespace Archivist.Options Assembly Archivist.dll Represents the options for handling delimited data. public class DelimitedOptions Inheritance object DelimitedOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Default The default delimited options if none are specified. public static DelimitedOptions Default { get; } Property Value DelimitedOptions DefaultSeparator Gets or sets the default separator used to delimit the data. public string? DefaultSeparator { get; set; } Property Value string FirstRowIsColumnHeaders Gets or sets a value indicating whether the first row of the data is treated as column headers. public bool FirstRowIsColumnHeaders { get; set; } Property Value bool Quote Gets or sets the quote character to use (use an empty string is quotes are not desired). public string? Quote { get; set; } Property Value string"
  },
  "api/Archivist.Options.ExcelOptions.html": {
    "href": "api/Archivist.Options.ExcelOptions.html",
    "title": "Class ExcelOptions | Archivist API Reference",
    "keywords": "Class ExcelOptions Namespace Archivist.Options Assembly Archivist.dll Represents the options for Excel files. public class ExcelOptions Inheritance object ExcelOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Default Gets the default Excel options. public static ExcelOptions Default { get; } Property Value ExcelOptions FirstRowIsColumnHeaders Gets or sets a value indicating whether the first row in the Excel file is treated as column headers. public bool FirstRowIsColumnHeaders { get; set; } Property Value bool"
  },
  "api/Archivist.Options.html": {
    "href": "api/Archivist.Options.html",
    "title": "Namespace Archivist.Options | Archivist API Reference",
    "keywords": "Namespace Archivist.Options Classes DelimitedOptions Represents the options for handling delimited data. ExcelOptions Represents the options for Excel files."
  },
  "api/Archivist.html": {
    "href": "api/Archivist.html",
    "title": "Namespace Archivist | Archivist API Reference",
    "keywords": "Namespace Archivist Classes FormatManager Represents a manager for handling different file formats."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Archivist API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Archivist API Reference",
    "keywords": "Code namespace Archivist.Example { internal static class Program { private static void Main(string[] args) => Console.WriteLine(\"Hello, World!\"); } } Output"
  },
  "index.html": {
    "href": "index.html",
    "title": "Archivist | Archivist API Reference",
    "keywords": "Archivist Archivist is a C# open-source library designed to simplify file loading tasks by providing a unified interface for accessing files of various formats."
  }
}