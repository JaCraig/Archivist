{
  "api/Archivist.BaseClasses.FileBaseClass-1.html": {
    "href": "api/Archivist.BaseClasses.FileBaseClass-1.html",
    "title": "Class FileBaseClass<TFileType> | Archivist API Reference",
    "keywords": "Class FileBaseClass<TFileType> Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for file types in the Archivist library. public abstract class FileBaseClass<TFileType> : IGenericFile where TFileType : FileBaseClass<TFileType> Type Parameters TFileType The specific file type derived from this base class. Inheritance object FileBaseClass<TFileType> Implements IGenericFile Derived Card Text Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Content Gets or sets the content of the file. public abstract string? Content { get; protected set; } Property Value string Metadata Gets or sets the metadata associated with the file. public Dictionary<string, string> Metadata { get; } Property Value Dictionary<string, string> Title Gets or sets the title of the file. public string? Title { get; set; } Property Value string Methods CompareTo(object?) Compares the file object to another object. public int CompareTo(object? obj) Parameters obj object The object to compare to. Returns int 0 if the objects are equal, -1 if this is smaller, 1 if it is larger. CompareTo(TFileType?) Compares the file object to another file object. public abstract int CompareTo(TFileType? other) Parameters other TFileType The file object to compare to. Returns int 0 if the file objects are equal, -1 if this is smaller, 1 if it is larger. Equals(object?) Determines if the file object is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare to. Returns bool True if the file objects are equal, false otherwise. Equals(TFileType?) Determines if the file object is equal to another file object. public abstract bool Equals(TFileType? other) Parameters other TFileType The file object to compare to. Returns bool True if the file objects are equal, false otherwise. GetHashCode() Gets the hash code for the file object. public override int GetHashCode() Returns int The hash code for the file object. ToString() Converts the file object to a string. public override string ToString() Returns string The content of the file object. Operators operator ==(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the two file objects are equal. public static bool operator ==(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the file objects are equal, false otherwise. operator >(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is greater than the second file object. public static bool operator >(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is greater than the second file object, false otherwise. operator >=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is greater than or equal to the second file object. public static bool operator >=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is greater than or equal to the second file object, false otherwise. operator !=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the two file objects are not equal. public static bool operator !=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the file objects are not equal, false otherwise. operator <(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is less than the second file object. public static bool operator <(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is less than the second file object, false otherwise. operator <=(FileBaseClass<TFileType>?, FileBaseClass<TFileType>?) Determines if the first file object is less than or equal to the second file object. public static bool operator <=(FileBaseClass<TFileType>? value1, FileBaseClass<TFileType>? value2) Parameters value1 FileBaseClass<TFileType> The first file object. value2 FileBaseClass<TFileType> The second file object. Returns bool True if the first file object is less than or equal to the second file object, false otherwise."
  },
  "api/Archivist.BaseClasses.FormatBaseClass-3.html": {
    "href": "api/Archivist.BaseClasses.FormatBaseClass-3.html",
    "title": "Class FormatBaseClass<TFormat, TFileReader, TFileWriter> | Archivist API Reference",
    "keywords": "Class FormatBaseClass<TFormat, TFileReader, TFileWriter> Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for file formats. public abstract class FormatBaseClass<TFormat, TFileReader, TFileWriter> : IFormat where TFormat : FormatBaseClass<TFormat, TFileReader, TFileWriter> where TFileReader : IFormatReader where TFileWriter : IFormatWriter Type Parameters TFormat The derived format class. TFileReader The file reader class. TFileWriter The file writer class. Inheritance object FormatBaseClass<TFormat, TFileReader, TFileWriter> Implements IFormat Derived TextFormat VCardFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FormatBaseClass(TFileReader, TFileWriter) Initializes a new instance of the FormatBaseClass<TFormat, TFileReader, TFileWriter> class. protected FormatBaseClass(TFileReader reader, TFileWriter writer) Parameters reader TFileReader The file reader instance. writer TFileWriter The file writer instance. Properties DisplayName Gets the display name of the format. public virtual string DisplayName { get; } Property Value string Extensions Gets the file extensions associated with the format. public abstract string[] Extensions { get; } Property Value string[] HeaderInfo Gets the header information of the format. public byte[] HeaderInfo { get; } Property Value byte[] MimeTypes Gets the content types supported by the format. public abstract string[] MimeTypes { get; } Property Value string[] Order Gets the order that the file format should be checked. The lower the value, the higher the priority. Note that the order is only relevant when multiple file formats have the same HeaderInfo length. The system uses HeaderInfo to determine the order to check first, with longer headers checked first. public virtual int Order { get; } Property Value int Reader Gets the file reader instance. protected TFileReader Reader { get; } Property Value TFileReader Writer Gets the file writer instance. protected TFileWriter Writer { get; } Property Value TFileWriter Methods CanRead(Stream?) Determines whether the format can read the specified stream. public bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the format can read the stream; otherwise, false. CanRead(string?) Determines whether the format can read the specified file. public bool CanRead(string? fileName) Parameters fileName string The name of the file. Returns bool true if the format can read the file; otherwise, false. CanWrite(IGenericFile?) Determines whether the format can write the specified file. public bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to write. Returns bool true if the format can write the file; otherwise, false. CanWrite(string?) Determines whether the format can write the specified file. public bool CanWrite(string? fileName) Parameters fileName string The name of the file. Returns bool true if the format can write the file; otherwise, false. ReadAsync(Stream?) Reads the file asynchronously from the specified stream. public Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous read operation. The task result contains the generic file. WriteAsync(Stream?, IGenericFile?) Writes the file asynchronously to the specified stream. public Task<bool> WriteAsync(Stream? writer, IGenericFile? file) Parameters writer Stream The stream to write. file IGenericFile The file to write. Returns Task<bool> A task that represents the asynchronous write operation. The task result contains a value indicating whether the write operation was successful. See Also IFormat"
  },
  "api/Archivist.BaseClasses.ReaderBaseClass.html": {
    "href": "api/Archivist.BaseClasses.ReaderBaseClass.html",
    "title": "Class ReaderBaseClass | Archivist API Reference",
    "keywords": "Class ReaderBaseClass Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for format readers. public abstract class ReaderBaseClass : IFormatReader Inheritance object ReaderBaseClass Implements IFormatReader Derived TextReader VCardReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderInfo Gets the header information for the format. public abstract byte[] HeaderInfo { get; } Property Value byte[] Methods CanRead(Stream?) Determines whether the reader can read the specified stream. public bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the stream; otherwise, false. InternalCanRead(Stream) Used to determine if a reader can actually read the file. public virtual bool InternalCanRead(Stream stream) Parameters stream Stream The stream to read. Returns bool true if the reader can read the file; otherwise, false. ReadAsync(Stream?) Reads the file asynchronously. public abstract Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task representing the asynchronous operation that returns the generic file. See Also IFormatReader"
  },
  "api/Archivist.BaseClasses.WriterBaseClass.html": {
    "href": "api/Archivist.BaseClasses.WriterBaseClass.html",
    "title": "Class WriterBaseClass | Archivist API Reference",
    "keywords": "Class WriterBaseClass Namespace Archivist.BaseClasses Assembly Archivist.dll Base class for format writers. public abstract class WriterBaseClass : IFormatWriter Inheritance object WriterBaseClass Implements IFormatWriter Derived TextWriter VCardWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CanWrite(IGenericFile?) Determines if the writer can write the specified file. public virtual bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to be written. Returns bool true if the writer can write the file; otherwise, false. WriteAsync(IGenericFile?, Stream?) Writes the specified file to the provided stream asynchronously. public abstract Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file to. Returns Task<bool> A task representing the asynchronous write operation. The task result is true if the write operation is successful; otherwise, false."
  },
  "api/Archivist.BaseClasses.html": {
    "href": "api/Archivist.BaseClasses.html",
    "title": "Namespace Archivist.BaseClasses | Archivist API Reference",
    "keywords": "Namespace Archivist.BaseClasses Classes FileBaseClass<TFileType> Base class for file types in the Archivist library. FormatBaseClass<TFormat, TFileReader, TFileWriter> Base class for file formats. ReaderBaseClass Base class for format readers. WriterBaseClass Base class for format writers."
  },
  "api/Archivist.DataTypes.Card.html": {
    "href": "api/Archivist.DataTypes.Card.html",
    "title": "Class Card | Archivist API Reference",
    "keywords": "Class Card Namespace Archivist.DataTypes Assembly Archivist.dll Represents a card (vCard, etc.) file. public class Card : FileBaseClass<Card>, IGenericFile, IComparable<Card>, IEquatable<Card>, IEnumerable<CardField?>, IEnumerable Inheritance object FileBaseClass<Card> Card Implements IGenericFile IComparable<Card> IEquatable<Card> IEnumerable<CardField> IEnumerable Inherited Members FileBaseClass<Card>.Metadata FileBaseClass<Card>.Title FileBaseClass<Card>.CompareTo(object) FileBaseClass<Card>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Content Gets or sets the content of the card. public override string? Content { get; protected set; } Property Value string Count Gets the number of fields in the card. public int Count { get; } Property Value int Fields Gets or sets the fields of the card. public List<CardField?> Fields { get; } Property Value List<CardField> FirstName Gets the first name from the card. public string FirstName { get; set; } Property Value string this[int] Gets or sets the field at the specified index. public CardField? this[int index] { get; set; } Parameters index int The index of the field. Property Value CardField The field at the specified index. this[string] Gets the fields with the specified property name. public IEnumerable<CardField?> this[string property] { get; } Parameters property string The property name of the fields. Property Value IEnumerable<CardField> The fields with the specified property name. this[string, string?] Gets the fields with the specified property name and parameter. public IEnumerable<CardField?> this[string property, string? parameter] { get; } Parameters property string The property name of the fields. parameter string The parameter of the fields. Property Value IEnumerable<CardField> The fields with the specified property name and parameter. LastName Gets the last name from the card. public string LastName { get; set; } Property Value string MiddleName Gets the middle name from the card. public string MiddleName { get; set; } Property Value string Prefix Gets the prefix from the card. public string Prefix { get; set; } Property Value string Suffix Gets the suffix from the card. public string Suffix { get; set; } Property Value string Methods CompareTo(Card?) Compares the card to another card based on their content. public override int CompareTo(Card? other) Parameters other Card The other card to compare. Returns int An integer that indicates the relative order of the cards. Equals(Card?) Determines whether the card is equal to another card based on their content. public override bool Equals(Card? other) Parameters other Card The other card to compare. Returns bool True if the cards are equal; otherwise, false. Equals(object?) Determines whether the card is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare. Returns bool True if the card is equal to the object; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<CardField?> GetEnumerator() Returns IEnumerator<CardField> An enumerator that can be used to iterate through the collection. GetHashCode() Gets the hash code of the card based on its content. public override int GetHashCode() Returns int The hash code of the card. Operators operator ==(Card, Card) Determines whether two card objects are equal. public static bool operator ==(Card left, Card right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the two card objects are equal; otherwise, false. operator >(Card, Card) Determines whether one card object is greater than another card object. public static bool operator >(Card left, Card right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is greater than the second card object; otherwise, false. operator >=(Card, Card) Determines whether one card object is greater than or equal to another card object. public static bool operator >=(Card left, Card right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is greater than or equal to the second card object; otherwise, false. operator !=(Card, Card) Determines whether two card objects are not equal. public static bool operator !=(Card left, Card right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the two card objects are not equal; otherwise, false. operator <(Card, Card) Determines whether one card object is less than another card object. public static bool operator <(Card left, Card right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is less than the second card object; otherwise, false. operator <=(Card, Card) Determines whether one card object is less than or equal to another card object. public static bool operator <=(Card left, Card right) Parameters left Card The first card object to compare. right Card The second card object to compare. Returns bool True if the first card object is less than or equal to the second card object; otherwise, false. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.CardField.html": {
    "href": "api/Archivist.DataTypes.CardField.html",
    "title": "Class CardField | Archivist API Reference",
    "keywords": "Class CardField Namespace Archivist.DataTypes Assembly Archivist.dll Represents a field in a card. public class CardField Inheritance object CardField Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CardField(string, IEnumerable<CardFieldParameter>?, string?) Initializes a new instance of the CardField class. public CardField(string property, IEnumerable<CardFieldParameter>? parameters, string? value) Parameters property string The property of the field. parameters IEnumerable<CardFieldParameter> The parameters of the field. value string The value of the field. Properties Parameters Gets or sets the parameter of the field (sub type). public List<CardFieldParameter> Parameters { get; } Property Value List<CardFieldParameter> Property Gets or sets the property of the field (the type). public string Property { get; set; } Property Value string Value Gets or sets the value of the field. public string? Value { get; set; } Property Value string Methods ToString() Returns a string representation of the card field. public override string ToString() Returns string A string representation of the card field."
  },
  "api/Archivist.DataTypes.CardFieldParameter.html": {
    "href": "api/Archivist.DataTypes.CardFieldParameter.html",
    "title": "Class CardFieldParameter | Archivist API Reference",
    "keywords": "Class CardFieldParameter Namespace Archivist.DataTypes Assembly Archivist.dll Represents a parameter for a card field. public class CardFieldParameter Inheritance object CardFieldParameter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors CardFieldParameter(string?, string?) Initializes a new instance of the CardFieldParameter class. public CardFieldParameter(string? name, string? value) Parameters name string The name of the parameter. value string The value of the parameter. Properties Name Gets or sets the name of the parameter. public string? Name { get; set; } Property Value string Value Gets or sets the value of the parameter. public string? Value { get; set; } Property Value string Methods ToString() Returns a string representation of the card field parameter. public override string ToString() Returns string A string representation of the card field parameter."
  },
  "api/Archivist.DataTypes.Text.html": {
    "href": "api/Archivist.DataTypes.Text.html",
    "title": "Class Text | Archivist API Reference",
    "keywords": "Class Text Namespace Archivist.DataTypes Assembly Archivist.dll Represents a text file. public class Text : FileBaseClass<Text>, IGenericFile Inheritance object FileBaseClass<Text> Text Implements IGenericFile Inherited Members FileBaseClass<Text>.Metadata FileBaseClass<Text>.Title FileBaseClass<Text>.CompareTo(object) FileBaseClass<Text>.Equals(object) FileBaseClass<Text>.GetHashCode() FileBaseClass<Text>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Text(string?, string?) Initializes a new instance of the Text class. public Text(string? content, string? title) Parameters content string The content of the text file. title string The title of the text file. Properties Content Gets or sets the content of the text file. public override string? Content { get; protected set; } Property Value string Methods CompareTo(Text?) Compares the current text file with another text file. public override int CompareTo(Text? other) Parameters other Text The text file to compare with. Returns int An integer that indicates the relative order of the text files. Equals(Text?) Determines whether the current text file is equal to another text file. public override bool Equals(Text? other) Parameters other Text The text file to compare with. Returns bool True if the text files are equal; otherwise, false. SetContent(string) Gets or sets the title of the text file. public void SetContent(string content) Parameters content string The content of the file. See Also FileBaseClass<TFileType>"
  },
  "api/Archivist.DataTypes.html": {
    "href": "api/Archivist.DataTypes.html",
    "title": "Namespace Archivist.DataTypes | Archivist API Reference",
    "keywords": "Namespace Archivist.DataTypes Classes Card Represents a card (vCard, etc.) file. CardField Represents a field in a card. CardFieldParameter Represents a parameter for a card field. Text Represents a text file."
  },
  "api/Archivist.Enums.CommonCardFields.html": {
    "href": "api/Archivist.Enums.CommonCardFields.html",
    "title": "Class CommonCardFields | Archivist API Reference",
    "keywords": "Class CommonCardFields Namespace Archivist.Enums Assembly Archivist.dll Represents the common fields for a card. public static class CommonCardFields Inheritance object CommonCardFields Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Address Gets the address field. public static string Address { get; } Property Value string Anniversary Gets the anniversary field. public static string Anniversary { get; } Property Value string Birthday Gets the birthday field. public static string Birthday { get; } Property Value string Birthplace Gets the birthplace field. public static string Birthplace { get; } Property Value string Deathdate Gets the death date field. public static string Deathdate { get; } Property Value string Deathplace Gets the death place field. public static string Deathplace { get; } Property Value string Email Gets the email field. public static string Email { get; } Property Value string Expertise Gets the expertise field. public static string Expertise { get; } Property Value string FullName Gets the full name field. public static string FullName { get; } Property Value string Gender Gets the gender field. public static string Gender { get; } Property Value string Geo Gets the geo field. public static string Geo { get; } Property Value string Hobby Gets the hobby field. public static string Hobby { get; } Property Value string IMPP Gets the IMPP field. public static string IMPP { get; } Property Value string Interest Gets the interest field. public static string Interest { get; } Property Value string Key Gets the key field. public static string Key { get; } Property Value string Label Gets the label field. public static string Label { get; } Property Value string Language Gets the language field. public static string Language { get; } Property Value string Logo Gets the logo field. public static string Logo { get; } Property Value string Name Gets the name field. public static string Name { get; } Property Value string Nickname Gets the nickname field. public static string Nickname { get; } Property Value string Note Gets the note field. public static string Note { get; } Property Value string Organization Gets the organization field. public static string Organization { get; } Property Value string Phone Gets the phone field. public static string Phone { get; } Property Value string Photo Gets the photo field. public static string Photo { get; } Property Value string Role Gets the role field. public static string Role { get; } Property Value string Sound Gets the sound field. public static string Sound { get; } Property Value string TimeZone Gets the time zone field. public static string TimeZone { get; } Property Value string Title Gets the title field. public static string Title { get; } Property Value string URL Gets the URL field. public static string URL { get; } Property Value string"
  },
  "api/Archivist.Enums.html": {
    "href": "api/Archivist.Enums.html",
    "title": "Namespace Archivist.Enums | Archivist API Reference",
    "keywords": "Namespace Archivist.Enums Classes CommonCardFields Represents the common fields for a card."
  },
  "api/Archivist.ExtensionMethods.InternalExtensionMethods.html": {
    "href": "api/Archivist.ExtensionMethods.InternalExtensionMethods.html",
    "title": "Class InternalExtensionMethods | Archivist API Reference",
    "keywords": "Class InternalExtensionMethods Namespace Archivist.ExtensionMethods Assembly Archivist.dll Internal extension methods. public static class InternalExtensionMethods Inheritance object InternalExtensionMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSpaces(string?) Adds spaces before each capital letter in the input string. public static string AddSpaces(this string? input) Parameters input string Input string Returns string String with spaces before each capital letter Left(string?, int) Gets the first x number of characters from the left hand side public static string Left(this string? input, int length) Parameters input string Input string length int x number of characters to return Returns string The resulting string ReadAllAsync(Stream?, Encoding?) Takes all of the data in the stream and returns it as a string public static Task<string> ReadAllAsync(this Stream? input, Encoding? encodingUsing = null) Parameters input Stream Input stream encodingUsing Encoding Encoding that the string should be in (defaults to UTF8) Returns Task<string> A string containing the content of the stream ReadAllBinaryAsync(Stream?) Takes all of the data in the stream and returns it as an array of bytes public static Task<byte[]> ReadAllBinaryAsync(this Stream? input) Parameters input Stream Input stream Returns Task<byte[]> A byte array ToString(byte[]?, Encoding?, int, int) Converts a byte array to a string public static string ToString(this byte[]? input, Encoding? encodingUsing, int index = 0, int count = -1) Parameters input byte[] Input byte array encodingUsing Encoding Encoding that the string should be in (defaults to UTF8) index int Index to start at count int Number of bytes to convert Returns string A string containing the content of the byte array"
  },
  "api/Archivist.ExtensionMethods.html": {
    "href": "api/Archivist.ExtensionMethods.html",
    "title": "Namespace Archivist.ExtensionMethods | Archivist API Reference",
    "keywords": "Namespace Archivist.ExtensionMethods Classes InternalExtensionMethods Internal extension methods."
  },
  "api/Archivist.FormatManager.html": {
    "href": "api/Archivist.FormatManager.html",
    "title": "Class FormatManager | Archivist API Reference",
    "keywords": "Class FormatManager Namespace Archivist Assembly Archivist.dll Represents a manager for handling different file formats. public class FormatManager Inheritance object FormatManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FormatManager(IEnumerable<IFormat>?) Initializes a new instance of the FormatManager class. public FormatManager(IEnumerable<IFormat>? formats) Parameters formats IEnumerable<IFormat> The collection of formats to be managed."
  },
  "api/Archivist.Formats.Txt.TextFormat.html": {
    "href": "api/Archivist.Formats.Txt.TextFormat.html",
    "title": "Class TextFormat | Archivist API Reference",
    "keywords": "Class TextFormat Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text format for archiving. public class TextFormat : FormatBaseClass<TextFormat, TextReader, TextWriter>, IFormat Inheritance object FormatBaseClass<TextFormat, TextReader, TextWriter> TextFormat Implements IFormat Inherited Members FormatBaseClass<TextFormat, TextReader, TextWriter>.DisplayName FormatBaseClass<TextFormat, TextReader, TextWriter>.Extensions FormatBaseClass<TextFormat, TextReader, TextWriter>.HeaderInfo FormatBaseClass<TextFormat, TextReader, TextWriter>.MimeTypes FormatBaseClass<TextFormat, TextReader, TextWriter>.Order FormatBaseClass<TextFormat, TextReader, TextWriter>.Reader FormatBaseClass<TextFormat, TextReader, TextWriter>.Writer FormatBaseClass<TextFormat, TextReader, TextWriter>.CanRead(string) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanRead(Stream) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanWrite(string) FormatBaseClass<TextFormat, TextReader, TextWriter>.CanWrite(IGenericFile) FormatBaseClass<TextFormat, TextReader, TextWriter>.ReadAsync(Stream) FormatBaseClass<TextFormat, TextReader, TextWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextFormat() Initializes a new instance of the TextFormat class. public TextFormat() Properties Extensions Gets the file extensions associated with the text format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the text format. public override string[] MimeTypes { get; } Property Value string[] Order Text format is format of last resort. public override int Order { get; } Property Value int"
  },
  "api/Archivist.Formats.Txt.TextReader.html": {
    "href": "api/Archivist.Formats.Txt.TextReader.html",
    "title": "Class TextReader | Archivist API Reference",
    "keywords": "Class TextReader Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text reader for reading text files. public class TextReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass TextReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderInfo Gets the header information of the text file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads the text file asynchronously. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the text file from. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result contains the generic file representation of the text file."
  },
  "api/Archivist.Formats.Txt.TextWriter.html": {
    "href": "api/Archivist.Formats.Txt.TextWriter.html",
    "title": "Class TextWriter | Archivist API Reference",
    "keywords": "Class TextWriter Namespace Archivist.Formats.Txt Assembly Archivist.dll Represents a text writer for the Txt format. public class TextWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass TextWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the content of the specified file to the provided stream asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to be written. stream Stream The stream to write the file content to. Returns Task<bool> True if the file was written successfully; otherwise, false."
  },
  "api/Archivist.Formats.Txt.html": {
    "href": "api/Archivist.Formats.Txt.html",
    "title": "Namespace Archivist.Formats.Txt | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.Txt Classes TextFormat Represents a text format for archiving. TextReader Represents a text reader for reading text files. TextWriter Represents a text writer for the Txt format."
  },
  "api/Archivist.Formats.VCard.VCardFormat.html": {
    "href": "api/Archivist.Formats.VCard.VCardFormat.html",
    "title": "Class VCardFormat | Archivist API Reference",
    "keywords": "Class VCardFormat Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a VCard format for storing contact information. public class VCardFormat : FormatBaseClass<VCardFormat, VCardReader, VCardWriter>, IFormat Inheritance object FormatBaseClass<VCardFormat, VCardReader, VCardWriter> VCardFormat Implements IFormat Inherited Members FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.DisplayName FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Extensions FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.HeaderInfo FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.MimeTypes FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Order FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Reader FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.Writer FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanRead(string) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanRead(Stream) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanWrite(string) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.CanWrite(IGenericFile) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.ReadAsync(Stream) FormatBaseClass<VCardFormat, VCardReader, VCardWriter>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors VCardFormat() Initializes a new instance of the VCardFormat class. public VCardFormat() Properties Extensions Gets the file extensions associated with the VCard format. public override string[] Extensions { get; } Property Value string[] MimeTypes Gets the MIME types associated with the VCard format. public override string[] MimeTypes { get; } Property Value string[] Order Gets the order of the VCard format in the list of supported formats. public override int Order { get; } Property Value int"
  },
  "api/Archivist.Formats.VCard.VCardReader.html": {
    "href": "api/Archivist.Formats.VCard.VCardReader.html",
    "title": "Class VCardReader | Archivist API Reference",
    "keywords": "Class VCardReader Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a reader for VCard files. public class VCardReader : ReaderBaseClass, IFormatReader Inheritance object ReaderBaseClass VCardReader Implements IFormatReader Inherited Members ReaderBaseClass.CanRead(Stream) ReaderBaseClass.InternalCanRead(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderInfo Gets the header information of the VCard file. public override byte[] HeaderInfo { get; } Property Value byte[] Methods ReadAsync(Stream?) Reads a VCard file asynchronously from the specified stream. public override Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read the VCard file from. Returns Task<IGenericFile> A task representing the asynchronous operation. The task result contains the parsed VCard file."
  },
  "api/Archivist.Formats.VCard.VCardWriter.html": {
    "href": "api/Archivist.Formats.VCard.VCardWriter.html",
    "title": "Class VCardWriter | Archivist API Reference",
    "keywords": "Class VCardWriter Namespace Archivist.Formats.VCard Assembly Archivist.dll Represents a writer for VCard files. public class VCardWriter : WriterBaseClass, IFormatWriter Inheritance object WriterBaseClass VCardWriter Implements IFormatWriter Inherited Members WriterBaseClass.CanWrite(IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteAsync(IGenericFile?, Stream?) Writes the VCard file asynchronously. public override Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The IGenericFile object representing the VCard file. stream Stream The Stream object to write the VCard file to. Returns Task<bool> A task representing the asynchronous write operation. The task result is a boolean value indicating whether the write operation was successful."
  },
  "api/Archivist.Formats.VCard.html": {
    "href": "api/Archivist.Formats.VCard.html",
    "title": "Namespace Archivist.Formats.VCard | Archivist API Reference",
    "keywords": "Namespace Archivist.Formats.VCard Classes VCardFormat Represents a VCard format for storing contact information. VCardReader Represents a reader for VCard files. VCardWriter Represents a writer for VCard files."
  },
  "api/Archivist.Interfaces.IFormat.html": {
    "href": "api/Archivist.Interfaces.IFormat.html",
    "title": "Interface IFormat | Archivist API Reference",
    "keywords": "Interface IFormat Namespace Archivist.Interfaces Assembly Archivist.dll Represents a file format. public interface IFormat Properties DisplayName Gets the display name of this file format. string DisplayName { get; } Property Value string Extensions Gets the file extensions associated with this file format. string[] Extensions { get; } Property Value string[] HeaderInfo Gets the header information of this file format. byte[] HeaderInfo { get; } Property Value byte[] MimeTypes Gets the content types supported by this file format. string[] MimeTypes { get; } Property Value string[] Order Gets the order that the file format should be checked. The lower the value, the higher the priority. Note that the order is only relevant when multiple file formats have the same HeaderInfo length. The system uses HeaderInfo to determine the order to check first, with longer headers checked first. int Order { get; } Property Value int Methods CanRead(Stream?) Determines whether this file format can read the specified stream. bool CanRead(Stream? stream) Parameters stream Stream The stream to check. Returns bool true if this file format can read the specified stream; otherwise, false. CanRead(string?) Determines whether this file format can read the specified file. bool CanRead(string? fileName) Parameters fileName string The name of the file to check. Returns bool true if this file format can read the specified file; otherwise, false. CanWrite(IGenericFile?) Determines whether this file format can write the specified file. bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to check. Returns bool true if this file format can write the specified file; otherwise, false. CanWrite(string?) Determines whether this file format can write the specified file. bool CanWrite(string? fileName) Parameters fileName string The name of the file to check. Returns bool true if this file format can write the specified file; otherwise, false. ReadAsync(Stream?) Asynchronously reads the specified stream and returns an instance of IGenericFile. Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous operation. The task result contains an instance of IGenericFile. WriteAsync(Stream?, IGenericFile?) Asynchronously writes the specified IGenericFile to the specified stream. Task<bool> WriteAsync(Stream? writer, IGenericFile? file) Parameters writer Stream The stream to write to. file IGenericFile The file to write. Returns Task<bool> A task that represents the asynchronous operation. The task result contains a boolean value indicating whether the write operation is successful."
  },
  "api/Archivist.Interfaces.IFormatReader.html": {
    "href": "api/Archivist.Interfaces.IFormatReader.html",
    "title": "Interface IFormatReader | Archivist API Reference",
    "keywords": "Interface IFormatReader Namespace Archivist.Interfaces Assembly Archivist.dll Represents a format reader. public interface IFormatReader Properties HeaderInfo Gets the header information of the format. byte[] HeaderInfo { get; } Property Value byte[] Methods CanRead(Stream?) Determines whether the format reader can read the specified stream. bool CanRead(Stream? stream) Parameters stream Stream The stream to read. Returns bool true if the format reader can read the stream; otherwise, false. ReadAsync(Stream?) Asynchronously reads the specified stream and returns the generic file. Task<IGenericFile?> ReadAsync(Stream? stream) Parameters stream Stream The stream to read. Returns Task<IGenericFile> A task that represents the asynchronous operation. The task result contains the generic file read from the stream."
  },
  "api/Archivist.Interfaces.IFormatWriter.html": {
    "href": "api/Archivist.Interfaces.IFormatWriter.html",
    "title": "Interface IFormatWriter | Archivist API Reference",
    "keywords": "Interface IFormatWriter Namespace Archivist.Interfaces Assembly Archivist.dll Represents a format writer. public interface IFormatWriter Methods CanWrite(IGenericFile?) Determines whether the format writer can write the specified file. bool CanWrite(IGenericFile? file) Parameters file IGenericFile The file to write. Returns bool true if the format writer can write the file; otherwise, false. WriteAsync(IGenericFile?, Stream?) Asynchronously writes the specified file to the stream. Task<bool> WriteAsync(IGenericFile? file, Stream? stream) Parameters file IGenericFile The file to write. stream Stream The stream to write to. Returns Task<bool> A task that represents the asynchronous operation."
  },
  "api/Archivist.Interfaces.IGenericFile.html": {
    "href": "api/Archivist.Interfaces.IGenericFile.html",
    "title": "Interface IGenericFile | Archivist API Reference",
    "keywords": "Interface IGenericFile Namespace Archivist.Interfaces Assembly Archivist.dll Represents a generic file. public interface IGenericFile Properties Content Gets or sets the content of the file. string? Content { get; } Property Value string Metadata Gets or sets the metadata associated with the file. Dictionary<string, string> Metadata { get; } Property Value Dictionary<string, string> Title Gets or sets the title of the file. string? Title { get; set; } Property Value string"
  },
  "api/Archivist.Interfaces.html": {
    "href": "api/Archivist.Interfaces.html",
    "title": "Namespace Archivist.Interfaces | Archivist API Reference",
    "keywords": "Namespace Archivist.Interfaces Interfaces IFormat Represents a file format. IFormatReader Represents a format reader. IFormatWriter Represents a format writer. IGenericFile Represents a generic file."
  },
  "api/Archivist.html": {
    "href": "api/Archivist.html",
    "title": "Namespace Archivist | Archivist API Reference",
    "keywords": "Namespace Archivist Classes FormatManager Represents a manager for handling different file formats."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | Archivist API Reference",
    "keywords": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | Archivist API Reference",
    "keywords": "Code namespace Archivist.Example { internal class Program { static void Main(string[] args) { Console.WriteLine(\"Hello, World!\"); } } } Output"
  },
  "index.html": {
    "href": "index.html",
    "title": "Archivist | Archivist API Reference",
    "keywords": "Archivist Archivist is a C# open-source library designed to simplify file loading tasks by providing a unified interface for accessing files of various formats."
  }
}